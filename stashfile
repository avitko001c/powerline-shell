




stash@{0}: WIP on vitko: e315959 Adding changes and coupon printer



diff --git a/powerline_shell/__init__.py b/powerline_shell/__init__.py
deleted file mode 100644
index 020ffea..0000000
--- a/powerline_shell/__init__.py
+++ /dev/null
@@ -1,280 +0,0 @@
-# -*- coding: utf-8 -*-
-from __future__ import print_function
-import re
-import os
-import sys
-import json
-import logging
-import argparse
-import traceback
-import importlib
-from powerline_shell.utils import warn, info, debug, exception, critical, error, py3, import_file
-from powerline_shell.encoding import get_preferred_output_encoding, get_preferred_input_encoding
-
-
-def _current_dir():
-    """Returns the full current working directory as the user would have used
-    in their shell (ie. without following symbolic links).
-
-    With the introduction of Bash for Windows, we can't use the PWD environment
-    variable very easily. `os.sep` for windows is `\` but the PWD variable will
-    use `/`. So just always use the `os` functions for dealing with paths. This
-    also is fine because the use of PWD below is done to avoid following
-    symlinks, which Windows doesn't have.
-
-    For non-Windows systems, prefer the PWD environment variable. Python's
-    `os.getcwd` function follows symbolic links, which is undesirable."""
-    if os.name == "nt":
-        return os.getcwd()
-    return os.getenv("PWD") or os.getcwd()
-
-
-def get_valid_cwd():
-    """Determine and check the current working directory for validity.
-
-    Typically, an directory arises when you checkout a different branch on git
-    that doesn't have this directory. When an invalid directory is found, a
-    warning is printed to the screen, but the directory is still returned
-    as-is, since this is what the shell considers to be the cwd."""
-    try:
-        cwd = _current_dir()
-    except:
-        warn("Your current directory is invalid. If you open a ticket at " +
-            "https://github.com/milkbikis/powerline-shell/issues/new " +
-            "we would love to help fix the issue.")
-        sys.stdout.write("> ")
-        sys.exit(1)
-
-    parts = cwd.split(os.sep)
-    up = cwd
-    while parts and not os.path.exists(up):
-        parts.pop()
-        up = os.sep.join(parts)
-    if cwd != up:
-        warn("Your current directory is invalid. Lowest valid directory: "
-             + up)
-        cwd = up
-    return cwd
-
-DEFAULT_SYMBOLS = {
-    'compatible': {
-            'lock': 'RO',
-            'network': 'SSH',
-            'separator': u'\u25B6',
-            'separator_thin': u'\u276F'
-    },
-    'patched': {
-            'lock': u'\uE0A2',
-            'network': 'SSH',
-            'separator': u'\uE0B0',
-            'separator_thin': u'\uE0B1'
-    },
-    'flat': {
-            'lock': u'\uE0A2',
-            'network': 'SSH',
-            'separator': '',
-            'separator_thin': ''
-    }
-}
-
-
-class Powerline(object):
-
-    color_templates = {
-        'bash': r'\[\e%s\]',
-        'tcsh': r'%%{\e%s%%}',
-        'zsh': '%%{%s%%}',
-        'bare': '%s',
-    }
-
-    def __init__(self, args, config, theme):
-        self.args = args
-        self.config = config
-        self.theme = theme
-        self.cwd = get_valid_cwd()
-        self.mode = config.get("mode", "patched")
-
-        self.template_symbols = getattr(self.theme, 'SYMBOLS', DEFAULT_SYMBOLS)
-        self.symbols = self.template_symbols.get(self.mode, DEFAULT_SYMBOLS.get(self.mode, DEFAULT_SYMBOLS['patched']))
-
-        self.color_template = self.color_templates[args.shell]
-        self.reset = self.color_template % '[0m'
-        self.lock = self.symbols['lock']
-        self.network = self.symbols['network']
-        self.separator = self.symbols['separator']
-        self.separator_thin = self.symbols['separator_thin']
-        self.segments = []
-
-    def segment_conf(self, seg_name, key, default=None):
-        return self.config.get(seg_name, {}).get(key, default)
-
-    def color(self, prefix, code):
-        if code is None:
-            return ''
-        elif code == self.theme.RESET:
-            return self.reset
-        else:
-            return self.color_template % ('[%s;5;%sm' % (prefix, code))
-
-    def fgcolor(self, code):
-        return self.color('38', code)
-
-    def bgcolor(self, code):
-        return self.color('48', code)
-
-    def append(self, content, fg, bg, separator=None, separator_fg=None, sanitize=True):
-        if self.args.shell == "bash" and sanitize:
-            content = re.sub(r"([`$])", r"\\\1", content)
-        self.segments.append((content, fg, bg,
-            separator if separator is not None else self.separator,
-            separator_fg if separator_fg is not None else bg))
-
-    def draw(self):
-        text = (''.join(self.draw_segment(i) for i in range(len(self.segments)))
-                + self.reset) + ' '
-        if py3:
-            return text
-        else:
-            return text.encode(get_preferred_output_encoding())
-
-    def draw_segment(self, idx):
-        segment = self.segments[idx]
-        next_segment = self.segments[idx + 1] if idx < len(self.segments)-1 else None
-
-        return ''.join((
-            self.fgcolor(segment[1]),
-            self.bgcolor(segment[2]),
-            segment[0],
-            self.bgcolor(next_segment[2]) if next_segment else self.reset,
-            self.fgcolor(segment[4]),
-            segment[3]))
-
-
-def find_config():
-    for location in [
-        "powerline-shell.json",
-        "~/.powerline-shell.json",
-        os.path.join(os.environ.get("XDG_CONFIG_HOME", "~/.config"), "powerline-shell", "config.json"),
-    ]:
-        full = os.path.expanduser(location)
-        if os.path.exists(full):
-            return full
-
-DEFAULT_CONFIG = {
-    "segments": [
-        'virtual_env',
-        'username',
-        'hostname',
-        'ssh',
-        'cwd',
-        'git',
-        'hg',
-        'jobs',
-        'root',
-    ]
-}
-
-
-class ModuleNotFoundException(Exception):
-    pass
-
-
-class CustomImporter(object):
-    def __init__(self):
-        self.file_import_count = 0
-
-    def import_(self, module_prefix, module_or_file, description):
-        try:
-            mod = importlib.import_module(module_prefix + module_or_file)
-        except ImportError:
-            try:
-                module_name = "_custom_mod_{0}".format(self.file_import_count)
-                mod = import_file(module_name, os.path.expanduser(module_or_file))
-                self.file_import_count += 1
-            except (ImportError, IOError):
-                msg = "{0} {1} cannot be found".format(description, module_or_file)
-                raise ModuleNotFoundException( msg)
-        return mod
-
-def get_args():
-    arg_parser = argparse.ArgumentParser()
-    arg_parser.add_argument('--generate-config', action='store_true',
-                            help='Generate the default config and print it to stdout')
-    arg_parser.add_argument('--shell', action='store', default='bash',
-                            help='Set this to your shell type',
-                            choices=['bash', 'tcsh', 'zsh', 'bare'])
-    arg_parser.add_argument('--config', '-c', action='store',
-                            help='Configuration file to load')
-    arg_parser.add_argument('--loglevel', '-l', action='store', default='info',
-                            help='set the loglevel you want: Default info')
-    arg_parser.add_argument('prev_error', nargs='?', type=int, default=0,
-                            help='Error code returned by the last command')
-    argparser = arg_parser.parse_args()
-    return argparser
-
-def main():
-    args = get_args()
-    if args.generate_config:
-        info(json.dumps(DEFAULT_CONFIG, indent=2))
-        return 0
-
-    if args.config and not os.path.exists(os.path.expanduser(args.config)):
-        info('Cannot find config file using default config file: {0}', args.config)
-        config_path = find_config()
-    elif args.config and os.path.exists(os.path.expanduser(args.config)):
-        config_path = args.config
-    else:
-        config_path = find_config()
-    if config_path:
-        with open(config_path) as f:
-            try:
-                config = json.loads(f.read())
-            except Exception:
-                warn("Config file ({0}) could not be decoded! Using Default config:"
-                     .format(config_path))
-                error(traceback.format_exc())
-                config = DEFAULT_CONFIG
-    else:
-        config = DEFAULT_CONFIG
-
-    custom_importer = CustomImporter()
-    theme_mod = custom_importer.import_(
-        "powerline_shell.themes.",
-        config.get("theme", "default"),
-        "Theme")
-    theme = getattr(theme_mod, "Color")
-
-    powerline = Powerline(args, config, theme)
-
-    def process_segment(seg_conf):
-        seg_name = seg_conf["type"]
-        seg_mod = custom_importer.import_(
-            "powerline_shell.segments.",
-            seg_name,
-            "Segment")
-        segment = getattr(seg_mod, "Segment")(powerline, seg_conf)
-        try:
-            segment.start()
-        except:
-            error(traceback.format_exec())
-        try:
-            segment.add_to_powerline()
-        except:
-            error(traceback.format_exc())
-
-    for seg_conf in config["segments"]:
-        if not isinstance(seg_conf, dict):
-            seg_conf = {"type": seg_conf}
-        process_segment(seg_conf)
-
-    #with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
-    #    seg = {executer.submit(process_segment, seg_conf): seg_conf for seg_conf in config["segments"]}
-    #    for complete in concurrent.futures.as_completed(seg):
-    #        out = seg[complete]
-    #        segment = complete.result()
-
-    try:
-        sys.stdout.write(powerline.draw())
-    except:
-        error(traceback.format_exec())
-    return 0
diff --git a/powerline_shell/brandicons.py b/powerline_shell/brandicons.py
deleted file mode 100644
index 6ee4647..0000000
--- a/powerline_shell/brandicons.py
+++ /dev/null
@@ -1,1449 +0,0 @@
-# -*- coding: utf-8 -*-
-# This file was generated automatically by fontawesome-python
-# It contains the icon set from: https://github.com/FortAwesome/Font-Awesome
-# The content is licensed under the SIL OFL 1.1: http://scripts.sil.org/OFL
-
-VERSION = 'master'
-
-logos = {
-        '500px': '\uf26e',                                # 
-        'accessible-icon': '\uf368',                      # 
-        'accusoft': '\uf369',                             # 
-        'acquisitions-incorporated': '\uf6af',            # 
-        'ad': '\uf641',                                   # 
-        'address-book': '\uf2b9',                         # 
-        'address-card': '\uf2bb',                         # 
-        'adjust': '\uf042',                               # 
-        'adn': '\uf170',                                  # 
-        'adobe': '\uf778',                                # 
-        'adversal': '\uf36a',                             # 
-        'affiliatetheme': '\uf36b',                       # 
-        'air-freshener': '\uf5d0',                        # 
-        'airbnb': '\uf834',                               # 
-        'algolia': '\uf36c',                              # 
-        'align-center': '\uf037',                         # 
-        'align-justify': '\uf039',                        # 
-        'align-left': '\uf036',                           # 
-        'align-right': '\uf038',                          # 
-        'alipay': '\uf642',                               # 
-        'allergies': '\uf461',                            # 
-        'amazon': '\uf270',                               # 
-        'amazon-pay': '\uf42c',                           # 
-        'ambulance': '\uf0f9',                            # 
-        'american-sign-language-interpreting': '\uf2a3',  # 
-        'amilia': '\uf36d',                               # 
-        'anchor': '\uf13d',                               # 
-        'android': '\uf17b',                              # 
-        'angellist': '\uf209',                            # 
-        'angle-double-down': '\uf103',                    # 
-        'angle-double-left': '\uf100',                    # 
-        'angle-double-right': '\uf101',                   # 
-        'angle-double-up': '\uf102',                      # 
-        'angle-down': '\uf107',                           # 
-        'angle-left': '\uf104',                           # 
-        'angle-right': '\uf105',                          # 
-        'angle-up': '\uf106',                             # 
-        'angry': '\uf556',                                # 
-        'angrycreative': '\uf36e',                        # 
-        'angular': '\uf420',                              # 
-        'ankh': '\uf644',                                 # 
-        'appcelerator': '\uf014',                         # 
-        'app-store': '\uf36f',                            # 
-        'app-store-ios': '\uf370',                        # 
-        'apper': '\uf371',                                # 
-        'apple': '\uf179',                                # 
-        'apple-alt': '\uf5d1',                            # 
-        'apple-pay': '\uf415',                            # 
-        'aptana': '\uf016',                               # 
-        'archive': '\uf187',                              # 
-        'archway': '\uf557',                              # 
-        'arrow-alt-circle-down': '\uf358',                # 
-        'arrow-alt-circle-left': '\uf359',                # 
-        'arrow-alt-circle-right': '\uf35a',               # 
-        'arrow-alt-circle-up': '\uf35b',                  # 
-        'arrow-circle-down': '\uf0ab',                    # 
-        'arrow-circle-left': '\uf0a8',                    # 
-        'arrow-circle-right': '\uf0a9',                   # 
-        'arrow-circle-up': '\uf0aa',                      # 
-        'arrow-down': '\uf063',                           # 
-        'arrow-left': '\uf060',                           # 
-        'arrow-right': '\uf061',                          # 
-        'arrow-up': '\uf062',                             # 
-        'arrows-alt': '\uf0b2',                           # 
-        'arrows-alt-h': '\uf337',                         # 
-        'arrows-alt-v': '\uf338',                         # 
-        'artstation': '\uf77a',                           # 
-        'assistive-listening-systems': '\uf2a2',          # 
-        'asterisk': '\uf01a',                             # 
-        'asterisk-symbol': '\uf069',                      # 
-        'asymmetrik': '\uf372',                           # 
-        'at': '\uf1fa',                                   # 
-        'atlas': '\uf558',                                # 
-        'atlassian': '\uf77b',                            # 
-        'atom': '\uf5d3',                                 # 
-        'atom-alt': '\uf5d2',                             # 
-        'audible': '\uf373',                              # 
-        'audio-description': '\uf29e',                    # 
-        'autoprefixer': '\uf41c',                         # 
-        'avianex': '\uf374',                              # 
-        'aviato': '\uf421',                               # 
-        'award': '\uf559',                                # 
-        'aws': '\uf375',                                  # 
-        'baby': '\uf77c',                                 # 
-        'baby-carriage': '\uf77d',                        # 
-        'backbone': '\uf5d4',                             # 
-        'backspace': '\uf55a',                            # 
-        'backward': '\uf04a',                             # 
-        'bacon': '\uf7e5',                                # 
-        'balance-scale': '\uf24e',                        # 
-        'ban': '\uf05e',                                  # 
-        'band-aid': '\uf462',                             # 
-        'bandcamp': '\uf2d5',                             # 
-        'barcode': '\uf02a',                              # 
-        'bars': '\uf0c9',                                 # 
-        'baseball-ball': '\uf433',                        # 
-        'basketball-ball': '\uf434',                      # 
-        'bath': '\uf2cd',                                 # 
-        'battery-empty': '\uf244',                        # 
-        'battery-full': '\uf240',                         # 
-        'battery-half': '\uf242',                         # 
-        'battery-quarter': '\uf243',                      # 
-        'battery-three-quarters': '\uf241',               # 
-        'battle-net': '\uf835',                           # 
-        'bed': '\uf236',                                  # 
-        'beer': '\uf0fc',                                 # 
-        'behance': '\uf1b4',                              # 
-        'behance-square': '\uf1b5',                       # 
-        'bell': '\uf0f3',                                 # 
-        'bell-slash': '\uf1f6',                           # 
-        'bezier-curve': '\uf55b',                         # 
-        'bible': '\uf647',                                # 
-        'bicycle': '\uf206',                              # 
-        'bimobject': '\uf378',                            # 
-        'bing_small:': '\uf5d9',                          # 
-        'binoculars': '\uf1e5',                           # 
-        'bintray': '\uf5db',                              # 
-        'biohazard': '\uf780',                            # 
-        'birthday-cake': '\uf1fd',                        # 
-        'bitbucket': '\uf172',                            # 
-        'bitbucket-logo': '\uf171',                       # 
-        'bitcoin': '\uf379',                              # 
-        'bity': '\uf37a',                                 # 
-        'black-tie': '\uf27e',                            # 
-        'blackberry': '\uf37b',                           # 
-        'blender': '\uf517',                              # 
-        'blender-phone': '\uf6b6',                        # 
-        'blind': '\uf29d',                                # 
-        'blog': '\uf781',                                 # 
-        'blogger': '\uf37c',                              # 
-        'blogger-b': '\uf37d',                            # 
-        'bluetooth': '\uf293',                            # 
-        'bluetooth-b': '\uf294',                          # 
-        'bold': '\uf032',                                 # 
-        'bolt': '\uf0e7',                                 # 
-        'bomb': '\uf1e2',                                 # 
-        'bone': '\uf5d7',                                 # 
-        'bong': '\uf55c',                                 # 
-        'book': '\uf02d',                                 # 
-        'book-dead': '\uf6b7',                            # 
-        'book-medical': '\uf7e6',                         # 
-        'book-open': '\uf518',                            # 
-        'book-reader': '\uf5da',                          # 
-        'bookmark': '\uf02e',                             # 
-        'bootstrap': '\uf836',                            # 
-        'bowling-ball': '\uf436',                         # 
-        'bower': '\uf5d5',                                # 
-        'box': '\uf466',                                  # 
-        'box-open': '\uf49e',                             # 
-        'boxes': '\uf468',                                # 
-        'brackets': '\uf5d6',                             # 
-        'braille': '\uf2a1',                              # 
-        'brain': '\uf5dc',                                # 
-        'bread-slice': '\uf7ec',                          # 
-        'briefcase': '\uf0b1',                            # 
-        'briefcase-medical': '\uf469',                    # 
-        'broadcast-tower': '\uf519',                      # 
-        'broom': '\uf51a',                                # 
-        'brush': '\uf55d',                                # 
-        'btc': '\uf15a',                                  # 
-        'buffer': '\uf837',                               # 
-        'bug': '\uf188',                                  # 
-        'building': '\uf1ad',                             # 
-        'bullhorn': '\uf0a1',                             # 
-        'bullseye': '\uf140',                             # 
-        'burn': '\uf46a',                                 # 
-        'buromobelexperte': '\uf37f',                     # 
-        'bus': '\uf207',                                  # 
-        'bus-alt': '\uf55e',                              # 
-        'business-time': '\uf64a',                        # 
-        'buysellads': '\uf20d',                           # 
-        'calculator': '\uf1ec',                           # 
-        'calendar': '\uf133',                             # 
-        'calendar-alt': '\uf073',                         # 
-        'calendar-check': '\uf274',                       # 
-        'calendar-day': '\uf783',                         # 
-        'calendar-minus': '\uf272',                       # 
-        'calendar-plus': '\uf271',                        # 
-        'calendar-times': '\uf273',                       # 
-        'calendar-week': '\uf784',                        # 
-        'camera': '\uf030',                               # 
-        'camera-retro': '\uf083',                         # 
-        'campground': '\uf6bb',                           # 
-        'canadian-maple-leaf': '\uf785',                  # 
-        'candy-cane': '\uf786',                           # 
-        'cannabis': '\uf55f',                             # 
-        'capsules': '\uf46b',                             # 
-        'car': '\uf1b9',                                  # 
-        'car-alt': '\uf5de',                              # 
-        'car-battery': '\uf5df',                          # 
-        'car-crash': '\uf5e1',                            # 
-        'car-side': '\uf5e4',                             # 
-        'caret-down': '\uf0d7',                           # 
-        'caret-left': '\uf0d9',                           # 
-        'caret-right': '\uf0da',                          # 
-        'caret-square-down': '\uf150',                    # 
-        'caret-square-left': '\uf191',                    # 
-        'caret-square-right': '\uf152',                   # 
-        'caret-square-up': '\uf151',                      # 
-        'caret-up': '\uf0d8',                             # 
-        'carrot': '\uf787',                               # 
-        'cart-arrow-down': '\uf218',                      # 
-        'cart-plus': '\uf217',                            # 
-        'cash-register': '\uf788',                        # 
-        'cat': '\uf6be',                                  # 
-        'cc-amazon-pay': '\uf42d',                        # 
-        'cc-amex': '\uf1f3',                              # 
-        'cc-apple-pay': '\uf416',                         # 
-        'cc-diners-club': '\uf24c',                       # 
-        'cc-discover': '\uf1f2',                          # 
-        'cc-jcb': '\uf24b',                               # 
-        'cc-mastercard': '\uf1f1',                        # 
-        'cc-paypal': '\uf1f4',                            # 
-        'cc-stripe': '\uf1f5',                            # 
-        'cc-visa': '\uf1f0',                              # 
-        'celluloid': '\uf640',                            # 
-        'centercode': '\uf380',                           # 
-        'centos': '\uf789',                               # 
-        'certificate': '\uf0a3',                          # 
-        'chair': '\uf6c0',                                # 
-        'chalkboard': '\uf51b',                           # 
-        'chalkboard-teacher': '\uf51c',                   # 
-        'charging-station': '\uf5e7',                     # 
-        'chart-area': '\uf1fe',                           # 
-        'chart-bar': '\uf080',                            # 
-        'chart-line': '\uf201',                           # 
-        'chart-pie': '\uf200',                            # 
-        'check': '\uf00c',                                # 
-        'check-circle': '\uf058',                         # 
-        'check-double': '\uf560',                         # 
-        'check-square': '\uf14a',                         # 
-        'cheese': '\uf7ef',                               # 
-        'chess': '\uf439',                                # 
-        'chess-bishop': '\uf43a',                         # 
-        'chess-board': '\uf43c',                          # 
-        'chess-king': '\uf43f',                           # 
-        'chess-knight': '\uf441',                         # 
-        'chess-pawn': '\uf443',                           # 
-        'chess-queen': '\uf445',                          # 
-        'chess-rook': '\uf447',                           # 
-        'chevron-circle-down': '\uf13a',                  # 
-        'chevron-circle-left': '\uf137',                  # 
-        'chevron-circle-right': '\uf138',                 # 
-        'chevron-circle-up': '\uf139',                    # 
-        'chevron-down': '\uf078',                         # 
-        'chevron-left': '\uf053',                         # 
-        'chevron-right': '\uf054',                        # 
-        'chevron-up': '\uf077',                           # 
-        'child': '\uf1ae',                                # 
-        'chrome': '\uf268',                               # 
-        'chromecast': '\uf838',                           # 
-        'church': '\uf51d',                               # 
-        'circle': '\uf111',                               # 
-        'circle-notch': '\uf1ce',                         # 
-        'cisco': '\uf643',                                # 
-        'city': '\uf64f',                                 # 
-        'clinic-medical': '\uf7f2',                       # 
-        'clipboard': '\uf328',                            # 
-        'clipboard-check': '\uf46c',                      # 
-        'clipboard-list': '\uf46d',                       # 
-        'clock': '\uf017',                                # 
-        'clojure': '\uf645',                              # 
-        'clojure-alt': '\uf645',                          # 
-        'clone': '\uf24d',                                # 
-        'closed-captioning': '\uf20a',                    # 
-        'cloud': '\uf0c2',                                # 
-        'cloud9': '\uf648',                               # 
-        'cloud-download-alt': '\uf381',                   # 
-        'cloud-meatball': '\uf73b',                       # 
-        'cloud-moon': '\uf6c3',                           # 
-        'cloud-moon-rain': '\uf73c',                      # 
-        'cloud-rain': '\uf73d',                           # 
-        'cloud-showers-heavy': '\uf740',                  # 
-        'cloud-sun': '\uf6c4',                            # 
-        'cloud-sun-rain': '\uf743',                       # 
-        'cloud-upload-alt': '\uf382',                     # 
-        'cloudscale': '\uf383',                           # 
-        'cloudsmith': '\uf384',                           # 
-        'cloudversify': '\uf385',                         # 
-        'cocktail': '\uf561',                             # 
-        'coda': '\uf656',                                 # 
-        'code': '\uf121',                                 # 
-        'code-branch': '\uf126',                          # 
-        'codebadge': '\uf123',                            # 
-        'codeigniter': '\uf11f',                          # 
-        'codepen': '\uf1cb',                              # 
-        'codrops': '\uf1cf',                              # 
-        'codiepie': '\uf284',                             # 
-        'coffee': '\uf0f4',                               # 
-        'coffeescript': '\uf18f',                         # 
-        'cog': '\uf013',                                  # 
-        'cogs': '\uf085',                                 # 
-        'coins': '\uf51e',                                # 
-        'columns': '\uf0db',                              # 
-        'comment': '\uf075',                              # 
-        'comment-alt': '\uf27a',                          # 
-        'comment-dollar': '\uf651',                       # 
-        'comment-dots': '\uf4ad',                         # 
-        'comment-medical': '\uf7f5',                      # 
-        'comment-slash': '\uf4b3',                        # 
-        'comments': '\uf086',                             # 
-        'comments-dollar': '\uf653',                      # 
-        'compact-disc': '\uf51f',                         # 
-        'compass': '\uf14e',                              # 
-        'compass-logo': '\uf06f',                         # 
-        'composer': '\uf6f3',                             # 
-        'compress': '\uf066',                             # 
-        'compress-arrows-alt': '\uf78c',                  # 
-        'concierge-bell': '\uf562',                       # 
-        'confluence': '\uf78d',                           # 
-        'connectdevelop': '\uf20e',                       # 
-        'contao': '\uf26d',                               # 
-        'cookie': '\uf563',                               # 
-        'cookie-bite': '\uf564',                          # 
-        'copy': '\uf0c5',                                 # 
-        'copyright': '\uf1f9',                            # 
-        'couch': '\uf4b8',                                # 
-        'cpanel': '\uf388',                               # 
-        'creative-commons': '\uf25e',                     # 
-        'creative-commons-badge': '\uf732',               # 
-        'creative-commons-by': '\uf4e7',                  # 
-        'creative-commons-nc': '\uf4e8',                  # 
-        'creative-commons-nc-eu': '\uf4e9',               # 
-        'creative-commons-nc-jp': '\uf4ea',               # 
-        'creative-commons-nd': '\uf4eb',                  # 
-        'creative-commons-pd': '\uf4ec',                  # 
-        'creative-commons-pd-alt': '\uf4ed',              # 
-        'creative-commons-remix': '\uf4ee',               # 
-        'creative-commons-sa': '\uf4ef',                  # 
-        'creative-commons-sampling': '\uf4f0',            # 
-        'creative-commons-sampling-plus': '\uf4f1',       # 
-        'creative-commons-share': '\uf4f2',               # 
-        'creative-commons-zero': '\uf4f3',                # 
-        'credit-card': '\uf09d',                          # 
-        'critical-role': '\uf6c9',                        # 
-        'crop': '\uf125',                                 # 
-        'crop-alt': '\uf565',                             # 
-        'cross': '\uf654',                                # 
-        'crosshairs': '\uf05b',                           # 
-        'crow': '\uf520',                                 # 
-        'crown': '\uf521',                                # 
-        'crutch': '\uf7f7',                               # 
-        'css3': '\uf13c',                                 # 
-        'css3-alt': '\uf38b',                             # 
-        'css-tricks': '\uf5a9',                           # 
-        'cssdeck': '\uf5dd',                              # 
-        'cube': '\uf1b2',                                 # 
-        'cubes': '\uf1b3',                                # 
-        'cut': '\uf0c4',                                  # 
-        'cuttlefish': '\uf38c',                           # 
-        'd-and-d': '\uf38d',                              # 
-        'd-and-d-beyond': '\uf6ca',                       # 
-        'dashcube': '\uf210',                             # 
-        'dart': '\uf5e0',                                 # 
-        'database': '\uf1c0',                             # 
-        'deaf': '\uf2a4',                                 # 
-        'debian': '\uf5e2',                               # 
-        'delicious': '\uf1a5',                            # 
-        'democrat': '\uf747',                             # 
-        'deploydog': '\uf38e',                            # 
-        'deskpro': '\uf38f',                              # 
-        'desktop': '\uf108',                              # 
-        'dev': '\uf6cc',                                  # 
-        'deviantart': '\uf1bd',                           # 
-        'dharmachakra': '\uf655',                         # 
-        'dhl': '\uf790',                                  # 
-        'diagnoses': '\uf470',                            # 
-        'diaspora': '\uf791',                             # 
-        'dice': '\uf522',                                 # 
-        'dice-d20': '\uf6cf',                             # 
-        'dice-d6': '\uf6d1',                              # 
-        'dice-five': '\uf523',                            # 
-        'dice-four': '\uf524',                            # 
-        'dice-one': '\uf525',                             # 
-        'dice-six': '\uf526',                             # 
-        'dice-three': '\uf527',                           # 
-        'dice-two': '\uf528',                             # 
-        'digg': '\uf1a6',                                 # 
-        'digital-ocean': '\uf391',                        # 
-        'digital-tachograph': '\uf566',                   # 
-        'directions': '\uf5eb',                           # 
-        'discord': '\uf392',                              # 
-        'discourse': '\uf393',                            # 
-        'divide': '\uf529',                               # 
-        'dizzy': '\uf567',                                # 
-        'django': '\uf638',                               # 
-        'dlang': '\uf639',                                # 
-        'dna': '\uf471',                                  # 
-        'dochub': '\uf394',                               # 
-        'docker': '\uf395',                               # 
-        'docker-alt': '\uf376',                           # 
-        'doctrine': '\uf636',                             # 
-        'dog': '\uf6d3',                                  # 
-        'dojo': '\uf63a',                                 # 
-        'dollar-sign': '\uf155',                          # 
-        'dolly': '\uf472',                                # 
-        'dolly-flatbed': '\uf474',                        # 
-        'donate': '\uf4b9',                               # 
-        'door-closed': '\uf52a',                          # 
-        'door-open': '\uf52b',                            # 
-        'dot-circle': '\uf192',                           # 
-        'dotnet': '\uf635',                               # 
-        'dove': '\uf4ba',                                 # 
-        'download': '\uf019',                             # 
-        'draft2digital': '\uf396',                        # 
-        'drafting-compass': '\uf568',                     # 
-        'dragon': '\uf6d5',                               # 
-        'draw-polygon': '\uf5ee',                         # 
-        'dribbble': '\uf17d',                             # 
-        'dribbble-square': '\uf397',                      # 
-        'dropbox': '\uf16b',                              # 
-        'drum': '\uf569',                                 # 
-        'drum-steelpan': '\uf56a',                        # 
-        'drumstick-bite': '\uf6d7',                       # 
-        'drupal': '\uf1a9',                               # 
-        'dumbbell': '\uf44b',                             # 
-        'dumpster': '\uf793',                             # 
-        'dumpster-fire': '\uf794',                        # 
-        'dungeon': '\uf6d9',                              # 
-        'dyalog': '\uf399',                               # 
-        'earlybirds': '\uf39a',                           # 
-        'ebay': '\uf4f4',                                 # 
-        'eclipse': '\uf634',                              # 
-        'edge': '\uf282',                                 # 
-        'edit': '\uf044',                                 # 
-        'egg': '\uf7fb',                                  # 
-        'eject': '\uf052',                                # 
-        'elementor': '\uf430',                            # 
-        'ellipsis-h': '\uf141',                           # 
-        'ellipsis-v': '\uf142',                           # 
-        'ello': '\uf5f1',                                 # 
-        'ember': '\uf423',                                # 
-        'empire': '\uf1d1',                               # 
-        'empire-alt': '\uf1cd',                           # 
-        'envato': '\uf424',                               # 
-        'envelope': '\uf0e0',                             # 
-        'envelope-open': '\uf2b6',                        # 
-        'envelope-open-text': '\uf658',                   # 
-        'envelope-square': '\uf199',                      # 
-        'envira': '\uf299',                               # 
-        'equals': '\uf52c',                               # 
-        'eraser': '\uf12d',                               # 
-        'erlang': '\uf39d',                               # 
-        'ethereum': '\uf42e',                             # 
-        'ethernet': '\uf796',                             # 
-        'etsy': '\uf2d7',                                 # 
-        'euro-sign': '\uf153',                            # 
-        'evernote': '\uf839',                             # 
-        'exchange-alt': '\uf362',                         # 
-        'exclamation': '\uf12a',                          # 
-        'exclamation-circle': '\uf06a',                   # 
-        'exclamation-triangle': '\uf071',                 # 
-        'expand': '\uf065',                               # 
-        'expand-arrows-alt': '\uf31e',                    # 
-        'expeditedssl': '\uf23e',                         # 
-        'external-link-alt': '\uf35d',                    # 
-        'external-link-square-alt': '\uf360',             # 
-        'extjs': '\uf389',                                # 
-        'eye': '\uf06e',                                  # 
-        'eye-dropper': '\uf1fb',                          # 
-        'eye-slash': '\uf070',                            # 
-        'facebook': '\uf09a',                             # 
-        'facebook-f': '\uf39e',                           # 
-        'facebook-messenger': '\uf39f',                   # 
-        'facebook-square': '\uf082',                      # 
-        'fantasy-flight-games': '\uf6dc',                 # 
-        'fast-backward': '\uf049',                        # 
-        'fast-forward': '\uf050',                         # 
-        'fax': '\uf1ac',                                  # 
-        'feather': '\uf52d',                              # 
-        'feather-alt': '\uf56b',                          # 
-        'fedex': '\uf797',                                # 
-        'fedora': '\uf798',                               # 
-        'female': '\uf182',                               # 
-        'fighter-jet': '\uf0fb',                          # 
-        'figma': '\uf799',                                # 
-        'file': '\uf15b',                                 # 
-        'file-alt': '\uf15c',                             # 
-        'file-archive': '\uf1c6',                         # 
-        'file-audio': '\uf1c7',                           # 
-        'file-code': '\uf1c9',                            # 
-        'file-contract': '\uf56c',                        # 
-        'file-csv': '\uf6dd',                             # 
-        'file-download': '\uf56d',                        # 
-        'file-excel': '\uf1c3',                           # 
-        'file-export': '\uf56e',                          # 
-        'file-image': '\uf1c5',                           # 
-        'file-import': '\uf56f',                          # 
-        'file-invoice': '\uf570',                         # 
-        'file-invoice-dollar': '\uf571',                  # 
-        'file-medical': '\uf477',                         # 
-        'file-medical-alt': '\uf478',                     # 
-        'file-pdf': '\uf1c1',                             # 
-        'file-powerpoint': '\uf1c4',                      # 
-        'file-prescription': '\uf572',                    # 
-        'file-signature': '\uf573',                       # 
-        'file-upload': '\uf574',                          # 
-        'file-video': '\uf1c8',                           # 
-        'file-word': '\uf1c2',                            # 
-        'fill': '\uf575',                                 # 
-        'fill-drip': '\uf576',                            # 
-        'film': '\uf008',                                 # 
-        'filter': '\uf0b0',                               # 
-        'fingerprint': '\uf577',                          # 
-        'fire': '\uf06d',                                 # 
-        'fire-alt': '\uf7e4',                             # 
-        'fire-extinguisher': '\uf134',                    # 
-        'firefox': '\uf269',                              # 
-        'first-aid': '\uf479',                            # 
-        'first-order': '\uf2b0',                          # 
-        'first-order-alt': '\uf50a',                      # 
-        'firstdraft': '\uf3a1',                           # 
-        'fish': '\uf578',                                 # 
-        'fist-raised': '\uf6de',                          # 
-        'flag': '\uf024',                                 # 
-        'flag-checkered': '\uf11e',                       # 
-        'flag-usa': '\uf74d',                             # 
-        'flask': '\uf0c3',                                # 
-        'flickr': '\uf16e',                               # 
-        'flipboard': '\uf44d',                            # 
-        'flushed': '\uf579',                              # 
-        'fly': '\uf417',                                  # 
-        'folder': '\uf07b',                               # 
-        'folder-minus': '\uf65d',                         # 
-        'folder-open': '\uf07c',                          # 
-        'folder-plus': '\uf65e',                          # 
-        'font': '\uf031',                                 # 
-        'font-awesome': '\uf2b4',                         # 
-        'font-awesome-alt': '\uf35c',                     # 
-        'font-awesome-flag': '\uf425',                    # 
-        'font-awesome-logo-full': '\uf4e6',               # 
-        'fonticons': '\uf280',                            # 
-        'fonticons-fi': '\uf3a2',                         # 
-        'football-ball': '\uf44e',                        # 
-        'fort-awesome': '\uf286',                         # 
-        'fort-awesome-alt': '\uf3a3',                     # 
-        'forumbee': '\uf211',                             # 
-        'forward': '\uf04e',                              # 
-        'foursquare': '\uf180',                           # 
-        'free-code-camp': '\uf2c5',                       # 
-        'freebsd': '\uf3a4',                              # 
-        'freebsd-alt': '\uf3a4',                          # 
-        'frog': '\uf52e',                                 # 
-        'frown': '\uf119',                                # 
-        'frown-open': '\uf57a',                           # 
-        'fulcrum': '\uf50b',                              # 
-        'funnel-dollar': '\uf662',                        # 
-        'futbol': '\uf1e3',                               # 
-        'galactic-republic': '\uf50c',                    # 
-        'galactic-senate': '\uf50d',                      # 
-        'gamepad': '\uf11b',                              # 
-        'gas-pump': '\uf52f',                             # 
-        'gavel': '\uf0e3',                                # 
-        'gem': '\uf3a5',                                  # 
-        'genderless': '\uf22d',                           # 
-        'get-pocket': '\uf265',                           # 
-        'gg': '\uf260',                                   # 
-        'gg-circle': '\uf261',                            # 
-        'ghost-logo': '\uf3ce',                           # 
-        'ghost-name': '\uf3cf',                           # 
-        'ghost': '\uf6e2',                                # 
-        'gift': '\uf06b',                                 # 
-        'gifts': '\uf79c',                                # 
-        'git': '\uf1d3',                                  # 
-        'git-add': '\uf1d3',                              # 
-        'git-branch': '\uf0b3',                           # 
-        'git-commit': '\uf0b4',                           # 
-        'git-compare': '\uf0b5',                          # 
-        'git-merge': '\uf0b6',                            # 
-        'git-pull-reguest': '\uf0b7',                     # 
-        'git-square': '\uf1d2',                           # 
-        'github': '\uf113',                               # 
-        'github-logo': '\uf09b',                          # 
-        'github-badge': '\uf092',                         # 
-        'github-name': '\uf0b8',                          # 
-        'gitkraken': '\uf3a6',                            # 
-        'gitlab': '\uf296',                               # 
-        'gitter': '\uf426',                               # 
-        'glass-cheers': '\uf79f',                         # 
-        'glass-martini': '\uf000',                        # 
-        'glass-martini-alt': '\uf57b',                    # 
-        'glass-whiskey': '\uf7a0',                        # 
-        'glasses': '\uf530',                              # 
-        'glide': '\uf2a5',                                # 
-        'glide-g': '\uf2a6',                              # 
-        'globe': '\uf0ac',                                # 
-        'globe-africa': '\uf57c',                         # 
-        'globe-americas': '\uf57d',                       # 
-        'globe-asia': '\uf57e',                           # 
-        'globe-europe': '\uf7a2',                         # 
-        'gnu': '\uf449',                                  # 
-        'gofore': '\uf3a7',                               # 
-        'golang': '\uf390',                               # 
-        'golf-ball': '\uf450',                            # 
-        'goodreads': '\uf3a8',                            # 
-        'goodreads-g': '\uf3a9',                          # 
-        'google': '\uf1a0',                               # 
-        'google-analytics': '\uf3a0',                     # 
-        'google-cloud': '\uf39c',                         # 
-        'google-drive': '\uf3aa',                         # 
-        'google-play': '\uf3ab',                          # 
-        'google-plus': '\uf2b3',                          # 
-        'google-plus-g': '\uf0d5',                        # 
-        'google-plus-square': '\uf0d4',                   # 
-        'google-wallet': '\uf1ee',                        # 
-        'gopuram': '\uf664',                              # 
-        'graduation-cap': '\uf19d',                       # 
-        'gratipay': '\uf184',                             # 
-        'grav': '\uf2d6',                                 # 
-        'greater-than': '\uf531',                         # 
-        'greater-than-equal': '\uf532',                   # 
-        'grimace': '\uf57f',                              # 
-        'grin': '\uf580',                                 # 
-        'grin-alt': '\uf581',                             # 
-        'grin-beam': '\uf582',                            # 
-        'grin-beam-sweat': '\uf583',                      # 
-        'grin-hearts': '\uf584',                          # 
-        'grin-squint': '\uf585',                          # 
-        'grin-squint-tears': '\uf586',                    # 
-        'grin-stars': '\uf587',                           # 
-        'grin-tears': '\uf588',                           # 
-        'grin-tongue': '\uf589',                          # 
-        'grin-tongue-squint': '\uf58a',                   # 
-        'grin-tongue-wink': '\uf58b',                     # 
-        'grin-wink': '\uf58c',                            # 
-        'grip-horizontal': '\uf58d',                      # 
-        'grip-lines': '\uf7a4',                           # 
-        'grip-lines-vertical': '\uf7a5',                  # 
-        'grip-vertical': '\uf58e',                        # 
-        'gripfire': '\uf3ac',                             # 
-        'grunt': '\uf3ad',                                # 
-        'guitar': '\uf7a6',                               # 
-        'gulp': '\uf3ae',                                 # 
-        'h-square': '\uf0fd',                             # 
-        'hacker-news': '\uf1d4',                          # 
-        'hacker-news-square': '\uf3af',                   # 
-        'hackerrank': '\uf5f7',                           # 
-        'hamburger': '\uf805',                            # 
-        'hammer': '\uf6e3',                               # 
-        'hamsa': '\uf665',                                # 
-        'hand-holding': '\uf4bd',                         # 
-        'hand-holding-heart': '\uf4be',                   # 
-        'hand-holding-usd': '\uf4c0',                     # 
-        'hand-lizard': '\uf258',                          # 
-        'hand-middle-finger': '\uf806',                   # 
-        'hand-paper': '\uf256',                           # 
-        'hand-peace': '\uf25b',                           # 
-        'hand-point-down': '\uf0a7',                      # 
-        'hand-point-left': '\uf0a5',                      # 
-        'hand-point-right': '\uf0a4',                     # 
-        'hand-point-up': '\uf0a6',                        # 
-        'hand-pointer': '\uf25a',                         # 
-        'hand-rock': '\uf255',                            # 
-        'hand-scissors': '\uf257',                        # 
-        'hand-spock': '\uf259',                           # 
-        'hands': '\uf4c2',                                # 
-        'hands-helping': '\uf4c4',                        # 
-        'handshake': '\uf2b5',                            # 
-        'hanukiah': '\uf6e6',                             # 
-        'hard-hat': '\uf807',                             # 
-        'hashtag': '\uf292',                              # 
-        'haskell': '\uf350',                              # 
-        'hat-wizard': '\uf6e8',                           # 
-        'haykal': '\uf666',                               # 
-        'hdd': '\uf0a0',                                  # 
-        'heading': '\uf1dc',                              # 
-        'headphones': '\uf025',                           # 
-        'headphones-alt': '\uf58f',                       # 
-        'headset': '\uf590',                              # 
-        'heart': '\uf004',                                # 
-        'heart-broken': '\uf7a9',                         # 
-        'heartbeat': '\uf21e',                            # 
-        'helicopter': '\uf533',                           # 
-        'heroku': '\uf3b3',                               # 
-        'highlighter': '\uf591',                          # 
-        'hiking': '\uf6ec',                               # 
-        'hippo': '\uf6ed',                                # 
-        'hips': '\uf452',                                 # 
-        'hire-a-helper': '\uf3b0',                        # 
-        'history': '\uf1da',                              # 
-        'hockey-puck': '\uf453',                          # 
-        'holly-berry': '\uf7aa',                          # 
-        'home': '\uf015',                                 # 
-        'hooli': '\uf427',                                # 
-        'hornbill': '\uf592',                             # 
-        'horse': '\uf6f0',                                # 
-        'horse-head': '\uf7ab',                           # 
-        'hospital': '\uf0f8',                             # 
-        'hospital-alt': '\uf47d',                         # 
-        'hospital-symbol': '\uf47e',                      # 
-        'hot-tub': '\uf593',                              # 
-        'hotdog': '\uf80f',                               # 
-        'hotel': '\uf594',                                # 
-        'hotjar': '\uf3b1',                               # 
-        'hourglass': '\uf254',                            # 
-        'hourglass-end': '\uf253',                        # 
-        'hourglass-half': '\uf252',                       # 
-        'hourglass-start': '\uf251',                      # 
-        'house-damage': '\uf6f1',                         # 
-        'houzz': '\uf27c',                                # 
-        'hryvnia': '\uf6f2',                              # 
-        'html5': '\uf13b',                                # 
-        'hubspot': '\uf3b2',                              # 
-        'i-cursor': '\uf246',                             # 
-        'ice-cream': '\uf810',                            # 
-        'icicles': '\uf7ad',                              # 
-        'id-badge': '\uf2c1',                             # 
-        'id-card': '\uf2c2',                              # 
-        'id-card-alt': '\uf47f',                          # 
-        'igloo': '\uf7ae',                                # 
-        'image': '\uf03e',                                # 
-        'images': '\uf302',                               # 
-        'imdb': '\uf2d8',                                 # 
-        'inbox': '\uf01c',                                # 
-        'indent': '\uf03c',                               # 
-        'industry': '\uf275',                             # 
-        'infinity': '\uf534',                             # 
-        'info': '\uf129',                                 # 
-        'info-circle': '\uf05a',                          # 
-        'instagram': '\uf16d',                            # 
-        'intellij': '\uf387',                             # 
-        'intercom': '\uf7af',                             # 
-        'internet-explorer': '\uf26b',                    # 
-        'invision': '\uf7b0',                             # 
-        'ioxhost': '\uf208',                              # 
-        'italic': '\uf033',                               # 
-        'itch-io': '\uf83a',                              # 
-        'itunes': '\uf3b4',                               # 
-        'itunes-note': '\uf3b5',                          # 
-        'jabber': '\uf145',                               # 
-        'java': '\uf4e4',                                 # 
-        'jedi': '\uf669',                                 # 
-        'jekyll': '\uf38a',                               # 
-        'jedi-order': '\uf50e',                           # 
-        'jenkins': '\uf3b6',                              # 
-        'jira': '\uf7b1',                                 # 
-        'joget': '\uf3b7',                                # 
-        'joint': '\uf595',                                # 
-        'joomla': '\uf1aa',                               # 
-        'journal-whills': '\uf66a',                       # 
-        'js': '\uf3b8',                                   # 
-        'js-name': '\uf39b',                              # 
-        'js-square': '\uf3b9',                            # 
-        'jsfiddle': '\uf1cc',                             # 
-        'kaaba': '\uf66b',                                # 
-        'kaggle': '\uf5fa',                               # 
-        'key': '\uf084',                                  # 
-        'keybase': '\uf4f5',                              # 
-        'keyboard': '\uf11c',                             # 
-        'keycdn': '\uf3ba',                               # 
-        'khanda': '\uf66d',                               # 
-        'kickstarter': '\uf3bb',                          # 
-        'kickstarter-k': '\uf3bc',                        # 
-        'kiss': '\uf596',                                 # 
-        'kiss-beam': '\uf597',                            # 
-        'kiss-wink-heart': '\uf598',                      # 
-        'kiwi-bird': '\uf535',                            # 
-        'komodo': '\uf398',                               #
-        'korvue': '\uf42f',                               # 
-        'kubernetes': '\uf398',                           # 
-        'landmark': '\uf66f',                             # 
-        'language': '\uf1ab',                             # 
-        'laptop': '\uf109',                               # 
-        'laptop-code': '\uf5fc',                          # 
-        'laptop-medical': '\uf812',                       # 
-        'laravel': '\uf3bd',                              # 
-        'lastfm': '\uf202',                               # 
-        'lastfm-square': '\uf203',                        # 
-        'laugh': '\uf599',                                # 
-        'laugh-beam': '\uf59a',                           # 
-        'laugh-squint': '\uf59b',                         # 
-        'laugh-wink': '\uf59c',                           # 
-        'layer-group': '\uf5fd',                          # 
-        'leaf': '\uf06c',                                 # 
-        'leanpub': '\uf212',                              # 
-        'lemon': '\uf094',                                # 
-        'less': '\uf41d',                                 # 
-        'less-than': '\uf536',                            # 
-        'less-than-equal': '\uf537',                      # 
-        'level-down-alt': '\uf3be',                       # 
-        'level-up-alt': '\uf3bf',                         # 
-        'life-ring': '\uf1cd',                            # 
-        'lightbulb': '\uf0eb',                            # 
-        'line': '\uf3c0',                                 # 
-        'link': '\uf0c1',                                 # 
-        'linkedin': '\uf08c',                             # 
-        'linkedin-in': '\uf0e1',                          # 
-        'linode': '\uf2b8',                               # 
-        'linux': '\uf17c',                                # 
-        'lira-sign': '\uf195',                            # 
-        'list': '\uf03a',                                 # 
-        'list-alt': '\uf022',                             # 
-        'list-ol': '\uf0cb',                              # 
-        'list-ul': '\uf0ca',                              # 
-        'location-arrow': '\uf124',                       # 
-        'lock': '\uf023',                                 # 
-        'lock-open': '\uf3c1',                            # 
-        'long-arrow-alt-down': '\uf309',                  # 
-        'long-arrow-alt-left': '\uf30a',                  # 
-        'long-arrow-alt-right': '\uf30b',                 # 
-        'long-arrow-alt-up': '\uf30c',                    # 
-        'low-vision': '\uf2a8',                           # 
-        'luggage-cart': '\uf59d',                         # 
-        'lyft': '\uf3c3',                                 # 
-        'magento': '\uf3c4',                              # 
-        'magic': '\uf0d0',                                # 
-        'magnet': '\uf076',                               # 
-        'mail-bulk': '\uf674',                            # 
-        'mailchimp': '\uf59e',                            # 
-        'male': '\uf183',                                 # 
-        'mandalorian': '\uf50f',                          # 
-        'map': '\uf279',                                  # 
-        'map-marked': '\uf59f',                           # 
-        'map-marked-alt': '\uf5a0',                       # 
-        'map-marker': '\uf041',                           # 
-        'map-marker-alt': '\uf3c5',                       # 
-        'map-pin': '\uf276',                              # 
-        'map-signs': '\uf277',                            # 
-        'markdown': '\uf60f',                             # 
-        'marker': '\uf5a1',                               # 
-        'mars': '\uf222',                                 # 
-        'mars-double': '\uf227',                          # 
-        'mars-stroke': '\uf229',                          # 
-        'mars-stroke-h': '\uf22b',                        # 
-        'mars-stroke-v': '\uf22a',                        # 
-        'mask': '\uf6fa',                                 # 
-        'mastodon': '\uf4f6',                             # 
-        'maxcdn': '\uf136',                               # 
-        'medal': '\uf5a2',                                # 
-        'medapps': '\uf3c6',                              # 
-        'medium': '\uf23a',                               # 
-        'medium-m': '\uf3c7',                             # 
-        'medkit': '\uf0fa',                               # 
-        'medrt': '\uf3c8',                                # 
-        'meetup': '\uf2e0',                               # 
-        'megaport': '\uf5a3',                             # 
-        'meh': '\uf11a',                                  # 
-        'meh-blank': '\uf5a4',                            # 
-        'meh-rolling-eyes': '\uf5a5',                     # 
-        'memory': '\uf538',                               # 
-        'mendeley': '\uf7b3',                             # 
-        'menorah': '\uf676',                              # 
-        'mercury': '\uf223',                              # 
-        'meteor': '\uf755',                               # 
-        'meteor-full': '\uf754',                          # 
-        'meteorite': '\uf753',                            # 
-        'microchip': '\uf2db',                            # 
-        'microphone': '\uf130',                           # 
-        'microphone-alt': '\uf3c9',                       # 
-        'microphone-alt-slash': '\uf539',                 # 
-        'microphone-slash': '\uf131',                     # 
-        'microscope': '\uf610',                           # 
-        'microsoft': '\uf3ca',                            # 
-        'minus': '\uf068',                                # 
-        'minus-circle': '\uf056',                         # 
-        'minus-square': '\uf146',                         # 
-        'mitten': '\uf7b5',                               # 
-        'mix': '\uf3cb',                                  # 
-        'mixcloud': '\uf289',                             # 
-        'mizuni': '\uf3cc',                               # 
-        'mobile': '\uf10b',                               # 
-        'mobile-alt': '\uf3cd',                           # 
-        'modx': '\uf285',                                 # 
-        'monero': '\uf3d0',                               # 
-        'money-bill': '\uf0d6',                           # 
-        'money-bill-alt': '\uf3d1',                       # 
-        'money-bill-wave': '\uf53a',                      # 
-        'money-bill-wave-alt': '\uf53b',                  # 
-        'money-check': '\uf53c',                          # 
-        'money-check-alt': '\uf53d',                      # 
-        'monument': '\uf5a6',                             # 
-        'moon': '\uf186',                                 # 
-        'mortar-pestle': '\uf5a7',                        # 
-        'mosque': '\uf678',                               # 
-        'motorcycle': '\uf21c',                           # 
-        'mountain': '\uf6fc',                             # 
-        'mouse-pointer': '\uf245',                        # 
-        'mug-hot': '\uf7b6',                              # 
-        'music': '\uf001',                                # 
-        'napster': '\uf3d2',                              # 
-        'neos': '\uf612',                                 # 
-        'network-wired': '\uf6ff',                        # 
-        'neuter': '\uf22c',                               # 
-        'newspaper': '\uf1ea',                            # 
-        'nimblr': '\uf5a8',                               # 
-        'nintendo-switch': '\uf418',                      # 
-        'node': '\uf419',                                 # 
-        'node-js': '\uf3d3',                              # 
-        'not-equal': '\uf53e',                            # 
-        'notes-medical': '\uf481',                        # 
-        'npm': '\uf3d4',                                  # 
-        'ns8': '\uf3d5',                                  # 
-        'nutritionix': '\uf3d6',                          # 
-        'object-group': '\uf247',                         # 
-        'object-ungroup': '\uf248',                       # 
-        'odnoklassniki': '\uf263',                        # 
-        'odnoklassniki-square': '\uf264',                 # 
-        'oil-can': '\uf613',                              # 
-        'old-republic': '\uf510',                         # 
-        'om': '\uf679',                                   # 
-        'opencart': '\uf23d',                             # 
-        'openid': '\uf19b',                               # 
-        'opensource': '\uf196',                           # 
-        'opensource-alt': '\uf41a',                       # 
-        'opera': '\uf26a',                                # 
-        'optin-monster': '\uf23c',                        # 
-        'otter': '\uf700',                                # 
-        'outdent': '\uf03b',                              # 
-        'page4': '\uf3d7',                                # 
-        'pagelines': '\uf18c',                            # 
-        'pager': '\uf815',                                # 
-        'paint-brush': '\uf1fc',                          # 
-        'paint-roller': '\uf5aa',                         # 
-        'palette': '\uf53f',                              # 
-        'palfed': '\uf3d8',                               # 
-        'pallet': '\uf482',                               # 
-        'paper-plane': '\uf1d8',                          # 
-        'paperclip': '\uf0c6',                            # 
-        'parachute-box': '\uf4cd',                        # 
-        'paragraph': '\uf1dd',                            # 
-        'parking': '\uf540',                              # 
-        'passport': '\uf5ab',                             # 
-        'pastafarianism': '\uf67b',                       # 
-        'paste': '\uf0ea',                                # 
-        'patreon': '\uf3d9',                              # 
-        'pause': '\uf04c',                                # 
-        'pause-circle': '\uf28b',                         # 
-        'paw': '\uf1b0',                                  # 
-        'paypal': '\uf1ed',                               # 
-        'peace': '\uf67c',                                # 
-        'pen': '\uf304',                                  # 
-        'pen-alt': '\uf305',                              # 
-        'pen-fancy': '\uf5ac',                            # 
-        'pen-nib': '\uf5ad',                              # 
-        'pen-square': '\uf14b',                           # 
-        'pencil-alt': '\uf303',                           # 
-        'pencil-ruler': '\uf5ae',                         # 
-        'penny-arcade': '\uf704',                         # 
-        'people-carry': '\uf4ce',                         # 
-        'pepper-hot': '\uf816',                           # 
-        'percent': '\uf295',                              # 
-        'percentage': '\uf541',                           # 
-        'periscope': '\uf3da',                            # 
-        'person-booth': '\uf756',                         # 
-        'phabricator': '\uf3db',                          # 
-        'phoenix-framework': '\uf3dc',                    # 
-        'phoenix-squadron': '\uf511',                     # 
-        'phone': '\uf095',                                # 
-        'phone-slash': '\uf3dd',                          # 
-        'phone-square': '\uf098',                         # 
-        'phone-volume': '\uf2a0',                         # 
-        'php': '\uf457',                                  # 
-        'pied-piper': '\uf2ae',                           # 
-        'pied-piper-alt': '\uf1a8',                       # 
-        'pied-piper-hat': '\uf4e5',                       # 
-        'pied-piper-pp': '\uf1a7',                        # 
-        'piggy-bank': '\uf4d3',                           # 
-        'pills': '\uf484',                                # 
-        'pinterest': '\uf0d2',                            # 
-        'pinterest-p': '\uf231',                          # 
-        'pinterest-square': '\uf0d3',                     # 
-        'pizza-slice': '\uf818',                          # 
-        'place-of-worship': '\uf67f',                     # 
-        'plane': '\uf072',                                # 
-        'plane-arrival': '\uf5af',                        # 
-        'plane-departure': '\uf5b0',                      # 
-        'play': '\uf04b',                                 # 
-        'play-circle': '\uf144',                          # 
-        'playstation': '\uf3df',                          # 
-        'plug': '\uf1e6',                                 # 
-        'plus': '\uf067',                                 # 
-        'plus-circle': '\uf055',                          # 
-        'plus-square': '\uf0fe',                          # 
-        'podcast': '\uf2ce',                              # 
-        'poll': '\uf681',                                 # 
-        'poll-h': '\uf682',                               # 
-        'poo': '\uf2fe',                                  # 
-        'poo-storm': '\uf75a',                            # 
-        'poop': '\uf619',                                 # 
-        'portrait': '\uf3e0',                             # 
-        'pound-sign': '\uf154',                           # 
-        'power-off': '\uf011',                            # 
-        'pray': '\uf683',                                 # 
-        'praying-hands': '\uf684',                        # 
-        'prescription': '\uf5b1',                         # 
-        'prescription-bottle': '\uf485',                  # 
-        'prescription-bottle-alt': '\uf486',              # 
-        'print': '\uf02f',                                # 
-        'procedures': '\uf487',                           # 
-        'product-hunt': '\uf288',                         # 
-        'project-diagram': '\uf542',                      # 
-        'pushed': '\uf3e1',                               # 
-        'puzzle-piece': '\uf12e',                         # 
-        'python': '\uf3e2',                               # 
-        'qq': '\uf1d6',                                   # 
-        'qrcode': '\uf029',                               # 
-        'question': '\uf128',                             # 
-        'question-circle': '\uf059',                      # 
-        'quidditch': '\uf458',                            # 
-        'quinscape': '\uf459',                            # 
-        'quora': '\uf2c4',                                # 
-        'quote-left': '\uf10d',                           # 
-        'quote-right': '\uf10e',                          # 
-        'quran': '\uf687',                                # 
-        'r-project': '\uf4f7',                            # 
-        'radiation': '\uf7b9',                            # 
-        'radiation-alt': '\uf7ba',                        # 
-        'rainbow': '\uf75b',                              # 
-        'random': '\uf074',                               # 
-        'raspberry-pi': '\uf7bb',                         # 
-        'ravelry': '\uf2d9',                              # 
-        'react': '\uf41b',                                # 
-        'reacteurope': '\uf75d',                          # 
-        'readme': '\uf4d5',                               # 
-        'rebel': '\uf1d0',                                # 
-        'receipt': '\uf543',                              # 
-        'recycle': '\uf1b8',                              # 
-        'red-river': '\uf3e3',                            # 
-        'reddit': '\uf1a1',                               # 
-        'reddit-alien': '\uf281',                         # 
-        'reddit-square': '\uf1a2',                        # 
-        'redhat': '\uf7bc',                               # 
-        'redo': '\uf01e',                                 # 
-        'redo-alt': '\uf2f9',                             # 
-        'registered': '\uf25d',                           # 
-        'renren': '\uf18b',                               # 
-        'reply': '\uf3e5',                                # 
-        'reply-all': '\uf122',                            # 
-        'replyd': '\uf3e6',                               # 
-        'republican': '\uf75e',                           # 
-        'researchgate': '\uf4f8',                         # 
-        'resolving': '\uf3e7',                            # 
-        'restroom': '\uf7bd',                             # 
-        'retweet': '\uf079',                              # 
-        'rev': '\uf5b2',                                  # 
-        'ribbon': '\uf4d6',                               # 
-        'ring': '\uf70b',                                 # 
-        'road': '\uf018',                                 # 
-        'robot': '\uf544',                                # 
-        'rocket': '\uf135',                               # 
-        'rocketchat': '\uf3e8',                           # 
-        'rockrms': '\uf3e9',                              # 
-        'route': '\uf4d7',                                # 
-        'rss': '\uf09e',                                  # 
-        'rss-square': '\uf143',                           # 
-        'ruble-sign': '\uf158',                           # 
-        'ruby': '\uf166',                                 # 
-        'ruler': '\uf545',                                # 
-        'ruler-combined': '\uf546',                       # 
-        'ruler-horizontal': '\uf547',                     # 
-        'ruler-vertical': '\uf548',                       # 
-        'running': '\uf70c',                              # 
-        'rupee-sign': '\uf156',                           # 
-        'sad-cry': '\uf5b3',                              # 
-        'sad-tear': '\uf5b4',                             # 
-        'safari': '\uf267',                               # 
-        'salesforce': '\uf83b',                           # 
-        'sass': '\uf41e',                                 # 
-        'satellite': '\uf7bf',                            # 
-        'satellite-dish': '\uf7c0',                       # 
-        'save': '\uf0c7',                                 # 
-        'schlix': '\uf3ea',                               # 
-        'school': '\uf549',                               # 
-        'screwdriver': '\uf54a',                          # 
-        'scribd': '\uf28a',                               # 
-        'scroll': '\uf70e',                               # 
-        'sd-card': '\uf7c2',                              # 
-        'search': '\uf002',                               # 
-        'search-dollar': '\uf688',                        # 
-        'search-location': '\uf689',                      # 
-        'search-minus': '\uf010',                         # 
-        'search-plus': '\uf00e',                          # 
-        'searchengin': '\uf3eb',                          # 
-        'seedling': '\uf4d8',                             # 
-        'sellcast': '\uf2da',                             # 
-        'sellsy': '\uf213',                               # 
-        'server': '\uf233',                               # 
-        'servicestack': '\uf3ec',                         # 
-        'shapes': '\uf61f',                               # 
-        'share': '\uf064',                                # 
-        'share-alt': '\uf1e0',                            # 
-        'share-alt-square': '\uf1e1',                     # 
-        'share-square': '\uf14d',                         # 
-        'shekel-sign': '\uf20b',                          # 
-        'shield-alt': '\uf3ed',                           # 
-        'ship': '\uf21a',                                 # 
-        'shipping-fast': '\uf48b',                        # 
-        'shirtsinbulk': '\uf214',                         # 
-        'shoe-prints': '\uf54b',                          # 
-        'shopping-bag': '\uf290',                         # 
-        'shopping-basket': '\uf291',                      # 
-        'shopping-cart': '\uf07a',                        # 
-        'shopware': '\uf5b5',                             # 
-        'shower': '\uf2cc',                               # 
-        'shuttle-van': '\uf5b6',                          # 
-        'sign': '\uf4d9',                                 # 
-        'sign-in-alt': '\uf2f6',                          # 
-        'sign-language': '\uf2a7',                        # 
-        'sign-out-alt': '\uf2f5',                         # 
-        'signal': '\uf012',                               # 
-        'signature': '\uf5b7',                            # 
-        'sim-card': '\uf7c4',                             # 
-        'simplybuilt': '\uf215',                          # 
-        'sistrix': '\uf3ee',                              # 
-        'sitemap': '\uf0e8',                              # 
-        'sith': '\uf512',                                 # 
-        'skating': '\uf7c5',                              # 
-        'sketch': '\uf7c6',                               # 
-        'skiing': '\uf7c9',                               # 
-        'skiing-nordic': '\uf7ca',                        # 
-        'skull': '\uf54c',                                # 
-        'skull-crossbones': '\uf714',                     # 
-        'skyatlas': '\uf216',                             # 
-        'skype': '\uf17e',                                # 
-        'slack': '\uf198',                                # 
-        'slack-hash': '\uf3ef',                           # 
-        'slash': '\uf715',                                # 
-        'sleigh': '\uf7cc',                               # 
-        'sliders-h': '\uf1de',                            # 
-        'slideshare': '\uf1e7',                           # 
-        'smile': '\uf118',                                # 
-        'smile-beam': '\uf5b8',                           # 
-        'smile-wink': '\uf4da',                           # 
-        'smog': '\uf75f',                                 # 
-        'smoking': '\uf48d',                              # 
-        'smoking-ban': '\uf54d',                          # 
-        'sms': '\uf7cd',                                  # 
-        'snapchat': '\uf2ab',                             # 
-        'snapchat-ghost': '\uf2ac',                       # 
-        'snapchat-square': '\uf2ad',                      # 
-        'snowboarding': '\uf7ce',                         # 
-        'snowflake': '\uf2dc',                            # 
-        'snowman': '\uf7d0',                              # 
-        'snowplow': '\uf7d2',                             # 
-        'socks': '\uf696',                                # 
-        'solar-panel': '\uf5ba',                          # 
-        'sort': '\uf0dc',                                 # 
-        'sort-alpha-down': '\uf15d',                      # 
-        'sort-alpha-up': '\uf15e',                        # 
-        'sort-amount-down': '\uf160',                     # 
-        'sort-amount-up': '\uf161',                       # 
-        'sort-down': '\uf0dd',                            # 
-        'sort-numeric-down': '\uf162',                    # 
-        'sort-numeric-up': '\uf163',                      # 
-        'sort-up': '\uf0de',                              # 
-        'soundcloud': '\uf1be',                           # 
-        'sourcetree': '\uf7d3',                           # 
-        'spa': '\uf5bb',                                  # 
-        'space-shuttle': '\uf197',                        # 
-        'speakap': '\uf3f3',                              # 
-        'speaker-deck': '\uf83c',                         # 
-        'spider': '\uf717',                               # 
-        'spinner': '\uf110',                              # 
-        'splotch': '\uf5bc',                              # 
-        'splunk': '\uf5d8',                               # 
-        'spotify': '\uf1bc',                              # 
-        'spray-can': '\uf5bd',                            # 
-        'square': '\uf0c8',                               # 
-        'square-full': '\uf45c',                          # 
-        'square-root-alt': '\uf698',                      # 
-        'squarespace': '\uf5be',                          # 
-        'stack-exchange': '\uf18d',                       # 
-        'stack-overflow': '\uf16c',                       # 
-        'stamp': '\uf5bf',                                # 
-        'star': '\uf005',                                 # 
-        'star-and-crescent': '\uf699',                    # 
-        'star-half': '\uf089',                            # 
-        'star-half-alt': '\uf5c0',                        # 
-        'star-of-david': '\uf69a',                        # 
-        'star-of-life': '\uf621',                         # 
-        'staylinked': '\uf3f5',                           # 
-        'steam': '\uf1b6',                                # 
-        'steam-square': '\uf1b7',                         # 
-        'steam-symbol': '\uf3f6',                         # 
-        'step-backward': '\uf048',                        # 
-        'step-forward': '\uf051',                         # 
-        'stethoscope': '\uf0f1',                          # 
-        'sticker-mule': '\uf3f7',                         # 
-        'sticky-note': '\uf249',                          # 
-        'stop': '\uf04d',                                 # 
-        'stop-circle': '\uf28d',                          # 
-        'stopwatch': '\uf2f2',                            # 
-        'store': '\uf54e',                                # 
-        'store-alt': '\uf54f',                            # 
-        'strava': '\uf428',                               # 
-        'stream': '\uf550',                               # 
-        'street-view': '\uf21d',                          # 
-        'strikethrough': '\uf0cc',                        # 
-        'stripe': '\uf429',                               # 
-        'stripe-s': '\uf42a',                             # 
-        'stroopwafel': '\uf551',                          # 
-        'studiovinari': '\uf3f8',                         # 
-        'stumbleupon': '\uf1a4',                          # 
-        'stumbleupon-circle': '\uf1a3',                   # 
-        'subscript': '\uf12c',                            # 
-        'subway': '\uf239',                               # 
-        'suitcase': '\uf0f2',                             # 
-        'suitcase-rolling': '\uf5c1',                     # 
-        'sun': '\uf185',                                  # 
-        'superpowers': '\uf2dd',                          # 
-        'superscript': '\uf12b',                          # 
-        'supple': '\uf3f9',                               # 
-        'surprise': '\uf5c2',                             # 
-        'suse': '\uf7d6',                                 # 
-        'swatchbook': '\uf5c3',                           # 
-        'swimmer': '\uf5c4',                              # 
-        'swimming-pool': '\uf5c5',                        # 
-        'symfony': '\uf83d',                              # 
-        'synagogue': '\uf69b',                            # 
-        'sync': '\uf021',                                 # 
-        'sync-alt': '\uf2f1',                             # 
-        'syringe': '\uf48e',                              # 
-        'table': '\uf0ce',                                # 
-        'table-tennis': '\uf45d',                         # 
-        'tablet': '\uf10a',                               # 
-        'tablet-alt': '\uf3fa',                           # 
-        'tablets': '\uf490',                              # 
-        'tachometer-alt': '\uf3fd',                       # 
-        'tag': '\uf02b',                                  # 
-        'tags': '\uf02c',                                 # 
-        'tape': '\uf4db',                                 # 
-        'tasks': '\uf0ae',                                # 
-        'taxi': '\uf1ba',                                 # 
-        'teamspeak': '\uf4f9',                            # 
-        'teeth': '\uf62e',                                # 
-        'teeth-open': '\uf62f',                           # 
-        'telegram': '\uf2c6',                             # 
-        'telegram-plane': '\uf3fe',                       # 
-        'temperature-high': '\uf769',                     # 
-        'temperature-low': '\uf76b',                      # 
-        'tencent-weibo': '\uf1d5',                        # 
-        'tenge': '\uf7d7',                                # 
-        'terminal': '\uf120',                             # 
-        'text-height': '\uf034',                          # 
-        'text-width': '\uf035',                           # 
-        'th': '\uf00a',                                   # 
-        'th-large': '\uf009',                             # 
-        'th-list': '\uf00b',                              # 
-        'the-red-yeti': '\uf69d',                         # 
-        'theater-masks': '\uf630',                        # 
-        'themeco': '\uf5c6',                              # 
-        'themeisle': '\uf2b2',                            # 
-        'thermometer': '\uf491',                          # 
-        'thermometer-empty': '\uf2cb',                    # 
-        'thermometer-full': '\uf2c7',                     # 
-        'thermometer-half': '\uf2c9',                     # 
-        'thermometer-quarter': '\uf2ca',                  # 
-        'thermometer-three-quarters': '\uf2c8',           # 
-        'think-peaks': '\uf731',                          # 
-        'thumbs-down': '\uf165',                          # 
-        'thumbs-up': '\uf164',                            # 
-        'thumbtack': '\uf08d',                            # 
-        'ticket-alt': '\uf3ff',                           # 
-        'times': '\uf00d',                                # 
-        'times-circle': '\uf057',                         # 
-        'tint': '\uf043',                                 # 
-        'tint-slash': '\uf5c7',                           # 
-        'tired': '\uf5c8',                                # 
-        'toggle-off': '\uf204',                           # 
-        'toggle-on': '\uf205',                            # 
-        'toilet': '\uf7d8',                               # 
-        'toilet-paper': '\uf71e',                         # 
-        'toolbox': '\uf552',                              # 
-        'tools': '\uf7d9',                                # 
-        'tooth': '\uf5c9',                                # 
-        'torah': '\uf6a0',                                # 
-        'torii-gate': '\uf6a1',                           # 
-        'tractor': '\uf722',                              # 
-        'trade-federation': '\uf513',                     # 
-        'trademark': '\uf25c',                            # 
-        'traffic-light': '\uf637',                        # 
-        'train': '\uf238',                                # 
-        'tram': '\uf7da',                                 # 
-        'transgender': '\uf224',                          # 
-        'transgender-alt': '\uf225',                      # 
-        'trash': '\uf1f8',                                # 
-        'trash-alt': '\uf2ed',                            # 
-        'trash-restore': '\uf829',                        # 
-        'trash-restore-alt': '\uf82a',                    # 
-        'tree': '\uf1bb',                                 # 
-        'trello': '\uf181',                               # 
-        'tripadvisor': '\uf262',                          # 
-        'trophy': '\uf091',                               # 
-        'truck': '\uf0d1',                                # 
-        'truck-loading': '\uf4de',                        # 
-        'truck-monster': '\uf63b',                        # 
-        'truck-moving': '\uf4df',                         # 
-        'truck-pickup': '\uf63c',                         # 
-        'tshirt': '\uf553',                               # 
-        'tty': '\uf1e4',                                  # 
-        'tumblr': '\uf173',                               # 
-        'tumblr-square': '\uf174',                        # 
-        'tv': '\uf26c',                                   # 
-        'twitch': '\uf1e8',                               # 
-        'twitter': '\uf099',                              # 
-        'twitter-square': '\uf081',                       # 
-        'typo3': '\uf42b',                                # 
-        'uber': '\uf402',                                 # 
-        'ubuntu': '\uf7df',                               # 
-        'uikit': '\uf403',                                # 
-        'umbrella': '\uf0e9',                             # 
-        'umbrella-beach': '\uf5ca',                       # 
-        'underline': '\uf0cd',                            # 
-        'undo': '\uf0e2',                                 # 
-        'undo-alt': '\uf2ea',                             # 
-        'uniregistry': '\uf404',                          # 
-        'universal-access': '\uf29a',                     # 
-        'university': '\uf19c',                           # 
-        'unlink': '\uf127',                               # 
-        'unlock': '\uf09c',                               # 
-        'unlock-alt': '\uf13e',                           # 
-        'untappd': '\uf405',                              # 
-        'upload': '\uf093',                               # 
-        'ups': '\uf7e0',                                  # 
-        'usb': '\uf287',                                  # 
-        'user': '\uf007',                                 # 
-        'user-alt': '\uf406',                             # 
-        'user-alt-slash': '\uf4fa',                       # 
-        'user-astronaut': '\uf4fb',                       # 
-        'user-check': '\uf4fc',                           # 
-        'user-circle': '\uf2bd',                          # 
-        'user-clock': '\uf4fd',                           # 
-        'user-cog': '\uf4fe',                             # 
-        'user-edit': '\uf4ff',                            # 
-        'user-friends': '\uf500',                         # 
-        'user-graduate': '\uf501',                        # 
-        'user-injured': '\uf728',                         # 
-        'user-lock': '\uf502',                            # 
-        'user-md': '\uf0f0',                              # 
-        'user-minus': '\uf503',                           # 
-        'user-ninja': '\uf504',                           # 
-        'user-nurse': '\uf82f',                           # 
-        'user-plus': '\uf234',                            # 
-        'user-secret': '\uf21b',                          # 
-        'user-shield': '\uf505',                          # 
-        'user-slash': '\uf506',                           # 
-        'user-tag': '\uf507',                             # 
-        'user-tie': '\uf508',                             # 
-        'user-times': '\uf235',                           # 
-        'users': '\uf0c0',                                # 
-        'users-cog': '\uf509',                            # 
-        'usps': '\uf7e1',                                 # 
-        'ussunnah': '\uf407',                             # 
-        'utensil-spoon': '\uf2e5',                        # 
-        'utensils': '\uf2e7',                             # 
-        'vaadin': '\uf408',                               # 
-        'vector-square': '\uf5cb',                        # 
-        'venus': '\uf221',                                # 
-        'venus-double': '\uf226',                         # 
-        'venus-mars': '\uf228',                           # 
-        'viacoin': '\uf237',                              # 
-        'viadeo': '\uf2a9',                               # 
-        'viadeo-square': '\uf2aa',                        # 
-        'vial': '\uf492',                                 # 
-        'vials': '\uf493',                                # 
-        'viber': '\uf409',                                # 
-        'video': '\uf03d',                                # 
-        'video-slash': '\uf4e2',                          # 
-        'vihara': '\uf6a7',                               # 
-        'vimeo': '\uf40a',                                # 
-        'vimeo-square': '\uf194',                         # 
-        'vimeo-v': '\uf27d',                              # 
-        'vine': '\uf1ca',                                 # 
-        'vk': '\uf189',                                   # 
-        'vnv': '\uf40b',                                  # 
-        'volleyball-ball': '\uf45f',                      # 
-        'volume-down': '\uf027',                          # 
-        'volume-mute': '\uf6a9',                          # 
-        'volume-off': '\uf026',                           # 
-        'volume-up': '\uf028',                            # 
-        'vote-yea': '\uf772',                             # 
-        'vr-cardboard': '\uf729',                         # 
-        'vuejs': '\uf41f',                                # 
-        'walking': '\uf554',                              # 
-        'wallet': '\uf555',                               # 
-        'warehouse': '\uf494',                            # 
-        'water': '\uf773',                                # 
-        'wave-square': '\uf83e',                          # 
-        'waze': '\uf83f',                                 # 
-        'weebly': '\uf5cc',                               # 
-        'weibo': '\uf18a',                                # 
-        'weight': '\uf496',                               # 
-        'weight-hanging': '\uf5cd',                       # 
-        'weixin': '\uf1d7',                               # 
-        'whatsapp': '\uf232',                             # 
-        'whatsapp-square': '\uf40c',                      # 
-        'wheelchair': '\uf193',                           # 
-        'whmcs': '\uf40d',                                # 
-        'wifi': '\uf1eb',                                 # 
-        'wikipedia-w': '\uf266',                          # 
-        'wind': '\uf72e',                                 # 
-        'window-close': '\uf410',                         # 
-        'window-maximize': '\uf2d0',                      # 
-        'window-minimize': '\uf2d1',                      # 
-        'window-restore': '\uf2d2',                       # 
-        'windows': '\uf17a',                              # 
-        'wine-bottle': '\uf72f',                          # 
-        'wine-glass': '\uf4e3',                           # 
-        'wine-glass-alt': '\uf5ce',                       # 
-        'wix': '\uf5cf',                                  # 
-        'wizards-of-the-coast': '\uf730',                 # 
-        'wolf-pack-battalion': '\uf514',                  # 
-        'won-sign': '\uf159',                             # 
-        'wordpress': '\uf19a',                            # 
-        'wordpress-simple': '\uf411',                     # 
-        'wpbeginner': '\uf297',                           # 
-        'wpexplorer': '\uf2de',                           # 
-        'wpforms': '\uf298',                              # 
-        'wpressr': '\uf3e4',                              # 
-        'wrench': '\uf0ad',                               # 
-        'x-ray': '\uf497',                                # 
-        'xbox': '\uf412',                                 # 
-        'xing': '\uf168',                                 # 
-        'xing-square': '\uf169',                          # 
-        'y-combinator': '\uf23b',                         # 
-        'yahoo': '\uf19e',                                # 
-        'yammer': '\uf840',                               # 
-        'yandex': '\uf413',                               # 
-        'yandex-international': '\uf414',                 # 
-        'yarn': '\uf7e3',                                 # 
-        'yelp': '\uf1e9',                                 # 
-        'yen-sign': '\uf157',                             # 
-        'yin-yang': '\uf6ad',                             # 
-        'yoast': '\uf2b1',                                # 
-        'youtube': '\uf167',                              # 
-        'youtube-square': '\uf431',                       # 
-        'zhihu': '\uf63f',                                # 
-        'empire-alt': '\uf1cd',                           # 
-        'github-name': '\ue717',                          # 
-        'kubernetes': '\uf398',                           # 
-}
-
-class Logos:
-
-        def __init__(self, _logo):
-            self.logos = logos
-            self.logo = self.logos[_logo]
-
-        def __eq__(self):
-            return ' ' + self.logo + ' '
-
diff --git a/powerline_shell/color_compliment.py b/powerline_shell/color_compliment.py
deleted file mode 100644
index 118008a..0000000
--- a/powerline_shell/color_compliment.py
+++ /dev/null
@@ -1,25 +0,0 @@
-from colorsys import hls_to_rgb, rgb_to_hls
-# md5 deprecated since Python 2.5
-try:
-    from md5 import md5
-except ImportError:
-    from hashlib import md5
-import sys
-from .colortrans import *
-from .utils import py3
-
-
-def getOppositeColor(r,g,b):
-    """returns RGB components of complementary color"""
-    # colorsys functions expect values to be between 0 and 1
-    hls = rgb_to_hls(*[x/255.0 for x in [r, g, b]]) # r,g,b are now between 0 and 1
-    opp = hls_to_rgb(*[ (x+0.5)%1 for x in hls ])
-    return tuple([ int(x*255) for x in opp ]) # convert back to value range 0-255
-
-def stringToHashToColorAndOpposite(string):
-    if py3:
-        string = string.encode('utf-8')
-    string = md5(string).hexdigest()[:6] # get a random color
-    color1 = rgbstring2tuple(string)
-    color2 = getOppositeColor(*color1)
-    return color1, color2
diff --git a/powerline_shell/colortrans.py b/powerline_shell/colortrans.py
deleted file mode 100644
index 2d5b1ed..0000000
--- a/powerline_shell/colortrans.py
+++ /dev/null
@@ -1,319 +0,0 @@
-#! /usr/bin/env python
-
-"""
-Code is modified (fairly heavily) by hryanjones@gmail.com from
-https://gist.github.com/MicahElliott/719710
-
-Convert values between RGB tuples and xterm-256 color codes.
-
-Nice long listing of all 256 colors and their codes. Useful for
-developing console color themes, or even script output schemes.
-
-Resources:
-* http://en.wikipedia.org/wiki/8-bit_color
-* http://en.wikipedia.org/wiki/ANSI_escape_code
-* /usr/share/X11/rgb.txt
-
-I'm not sure where this script was inspired from. I think I must have
-written it from scratch, though it's been several years now.
-"""
-
-__author__    = 'Micah Elliott http://MicahElliott.com'
-__version__   = '0.1'
-__copyright__ = 'Copyright (C) 2011 Micah Elliott.  All rights reserved.'
-__license__   = 'WTFPL http://sam.zoy.org/wtfpl/'
-
-#---------------------------------------------------------------------
-
-
-def hexstr2num(hexstr):
-    return int(hexstr, 16)
-
-def rgbstring2tuple(s):
-    return tuple([hexstr2num(h) for h in (s[:2], s[2:4], s[4:])])
-
-RGB2SHORT_DICT = {
-    (0, 0, 0):     16,
-    (0, 0, 95):    17,
-    (0, 0, 128):   4,
-    (0, 0, 135):   18,
-    (0, 0, 175):   19,
-    (0, 0, 215):   20,
-    (0, 0, 255):   12,
-    (0, 95, 0):    22,
-    (0, 95, 95):   23,
-    (0, 95, 135):  24,
-    (0, 95, 175):  25,
-    (0, 95, 215):  26,
-    (0, 95, 255):  27,
-    (0, 128, 0):   2,
-    (0, 128, 128): 6,
-    (0, 135, 0):   28,
-    (0, 135, 95):  29,
-    (0, 135, 135): 30,
-    (0, 135, 175): 31,
-    (0, 135, 215): 32,
-    (0, 135, 255): 33,
-    (0, 175, 0):   34,
-    (0, 175, 95):  35,
-    (0, 175, 135): 36,
-    (0, 175, 175): 37,
-    (0, 175, 215): 38,
-    (0, 175, 255): 39,
-    (0, 215, 0):   40,
-    (0, 215, 95):  41,
-    (0, 215, 135): 42,
-    (0, 215, 175): 43,
-    (0, 215, 215): 44,
-    (0, 215, 255): 45,
-    (0, 255, 0):   46,
-    (0, 255, 95):  47,
-    (0, 255, 135): 48,
-    (0, 255, 175): 49,
-    (0, 255, 215): 50,
-    (0, 255, 255): 14,
-    (8, 8, 8):    232,
-    (18, 18, 18): 233,
-    (28, 28, 28): 234,
-    (38, 38, 38): 235,
-    (48, 48, 48): 236,
-    (58, 58, 58): 237,
-    (68, 68, 68): 238,
-    (78, 78, 78): 239,
-    (88, 88, 88): 240,
-    (95, 0, 0):   52,
-    (95, 0, 95):  53,
-    (95, 0, 135): 54,
-    (95, 0, 175): 55,
-    (95, 0, 215): 56,
-    (95, 0, 255): 57,
-    (95, 95, 0):  58,
-    (95, 95, 95):  59,
-    (95, 95, 135): 60,
-    (95, 95, 175): 61,
-    (95, 95, 215): 62,
-    (95, 95, 255): 63,
-    (95, 135, 0):  64,
-    (95, 135, 95): 65,
-    (95, 135, 135): 66,
-    (95, 135, 175): 67,
-    (95, 135, 215): 68,
-    (95, 135, 255): 69,
-    (95, 175, 0):   70,
-    (95, 175, 95) : 71,
-    (95, 175, 135): 72,
-    (95, 175, 175): 73,
-    (95, 175, 215): 74,
-    (95, 175, 255): 75,
-    (95, 215, 0):   76,
-    (95, 215, 95) : 77,
-    (95, 215, 135): 78,
-    (95, 215, 175): 79,
-    (95, 215, 215): 80,
-    (95, 215, 255): 81,
-    (95, 255, 0):   82,
-    (95, 255, 95) : 83,
-    (95, 255, 135): 84,
-    (95, 255, 175): 85,
-    (95, 255, 215): 86,
-    (95, 255, 255): 87,
-    (98, 98, 98):    241,
-    (108, 108, 108): 242,
-    (118, 118, 118): 243,
-    (128, 0, 0):      1,
-    (128, 0, 128):    5,
-    (128, 128, 0):    3,
-    (128, 128, 128): 244,
-    (135, 0, 0):      88,
-    (135, 0, 95):     89,
-    (135, 0, 135):    90,
-    (135, 0, 175):    91,
-    (135, 0, 215):    92,
-    (135, 0, 255):    93,
-    (135, 95, 0):     94,
-    (135, 95, 95):    95,
-    (135, 95, 135):   96,
-    (135, 95, 175):   97,
-    (135, 95, 215):   98,
-    (135, 95, 255):   99,
-    (135, 135, 0):   100,
-    (135, 135, 95):  101,
-    (135, 135, 135): 102,
-    (135, 135, 175): 103,
-    (135, 135, 215): 104,
-    (135, 135, 255): 105,
-    (135, 175, 0):   106,
-    (135, 175, 95):  107,
-    (135, 175, 135): 108,
-    (135, 175, 175): 109,
-    (135, 175, 215): 110,
-    (135, 175, 255): 111,
-    (135, 215, 0):   112,
-    (135, 215, 95):  113,
-    (135, 215, 135): 114,
-    (135, 215, 175): 115,
-    (135, 215, 215): 116,
-    (135, 215, 255): 117,
-    (135, 255, 0):   118,
-    (135, 255, 95):  119,
-    (135, 255, 135): 120,
-    (135, 255, 175): 121,
-    (135, 255, 215): 122,
-    (135, 255, 255): 123,
-    (138, 138, 138): 245,
-    (148, 148, 148): 246,
-    (158, 158, 158): 247,
-    (168, 168, 168): 248,
-    (175, 0, 0): 124,
-    (175, 0, 95): 125,
-    (175, 0, 135): 126,
-    (175, 0, 175): 127,
-    (175, 0, 215): 128,
-    (175, 0, 255): 129,
-    (175, 95, 0): 130,
-    (175, 95, 95): 131,
-    (175, 95, 135): 132,
-    (175, 95, 175): 133,
-    (175, 95, 215): 134,
-    (175, 95, 255): 135,
-    (175, 135, 0): 136,
-    (175, 135, 95): 137,
-    (175, 135, 135): 138,
-    (175, 135, 175): 139,
-    (175, 135, 215): 140,
-    (175, 135, 255): 141,
-    (175, 175, 0): 142,
-    (175, 175, 95): 143,
-    (175, 175, 135): 144,
-    (175, 175, 175): 145,
-    (175, 175, 215): 146,
-    (175, 175, 255): 147,
-    (175, 215, 0): 148,
-    (175, 215, 95): 149,
-    (175, 215, 135): 150,
-    (175, 215, 175): 151,
-    (175, 215, 215): 152,
-    (175, 215, 255): 153,
-    (175, 255, 0): 154,
-    (175, 255, 95): 155,
-    (175, 255, 135): 156,
-    (175, 255, 175): 157,
-    (175, 255, 215): 158,
-    (175, 255, 255): 159,
-    (178, 178, 178): 249,
-    (188, 188, 188): 250,
-    (192, 192, 192): 7,
-    (198, 198, 198): 251,
-    (208, 208, 208): 252,
-    (215, 0, 0): 160,
-    (215, 0, 95): 161,
-    (215, 0, 135): 162,
-    (215, 0, 175): 163,
-    (215, 0, 215): 164,
-    (215, 0, 255): 165,
-    (215, 95, 0): 166,
-    (215, 95, 95): 167,
-    (215, 95, 135): 168,
-    (215, 95, 175): 169,
-    (215, 95, 215): 170,
-    (215, 95, 255): 171,
-    (215, 135, 0): 172,
-    (215, 135, 95): 173,
-    (215, 135, 135): 174,
-    (215, 135, 175): 175,
-    (215, 135, 215): 176,
-    (215, 135, 255): 177,
-    (215, 175, 0): 178,
-    (215, 175, 95): 179,
-    (215, 175, 135): 180,
-    (215, 175, 175): 181,
-    (215, 175, 215): 182,
-    (215, 175, 255): 183,
-    (215, 215, 0): 184,
-    (215, 215, 95): 185,
-    (215, 215, 135): 186,
-    (215, 215, 175): 187,
-    (215, 215, 215): 188,
-    (215, 215, 255): 189,
-    (215, 255, 0): 190,
-    (215, 255, 95): 191,
-    (215, 255, 135): 192,
-    (215, 255, 175): 193,
-    (215, 255, 215): 194,
-    (215, 255, 255): 195,
-    (218, 218, 218): 253,
-    (228, 228, 228): 254,
-    (238, 238, 238): 255,
-    (255, 0, 0): 196,
-    (255, 0, 95): 197,
-    (255, 0, 135): 198,
-    (255, 0, 175): 199,
-    (255, 0, 215): 200,
-    (255, 0, 255): 13,
-    (255, 95, 0): 202,
-    (255, 95, 95): 203,
-    (255, 95, 135): 204,
-    (255, 95, 175): 205,
-    (255, 95, 215): 206,
-    (255, 95, 255): 207,
-    (255, 135, 0): 208,
-    (255, 135, 95): 209,
-    (255, 135, 135): 210,
-    (255, 135, 175): 211,
-    (255, 135, 215): 212,
-    (255, 135, 255): 213,
-    (255, 175, 0): 214,
-    (255, 175, 95): 215,
-    (255, 175, 135): 216,
-    (255, 175, 175): 217,
-    (255, 175, 215): 218,
-    (255, 175, 255): 219,
-    (255, 215, 0): 220,
-    (255, 215, 95): 221,
-    (255, 215, 135): 222,
-    (255, 215, 175): 223,
-    (255, 215, 215): 224,
-    (255, 215, 255): 225,
-    (255, 255, 0): 11,
-    (255, 255, 95): 227,
-    (255, 255, 135): 228,
-    (255, 255, 175): 229,
-    (255, 255, 215): 230,
-    (255, 255, 255): 231}
-
-def rgb2short(r, g, b):
-    """ Find the closest xterm-256 approximation to the given RGB value.
-    @param r,g,b: each is a number between 0-255 for the Red, Green, and Blue values
-    @returns: integer between 0 and 255, compatible with xterm.
-    >>> rgb2short(18, 52, 86)
-    23
-    >>> rgb2short(255, 255, 255)
-    231
-    >>> rgb2short(13, 173, 214) # vimeo logo
-    38
-    :param r:
-    """
-    incs = (0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff)
-    # Break 6-char RGB code into 3 integer vals.
-    parts = [ r, g, b] 
-    res = []
-    for part in parts:
-        i = 0
-        while i < len(incs)-1:
-            s, b = incs[i], incs[i+1]  # smaller, bigger
-            if s <= part <= b:
-                s1 = abs(s - part)
-                b1 = abs(b - part)
-                if s1 < b1: closest = s
-                else: closest = b
-                res.append(closest)
-                break
-            i += 1
-    #print '***', res
-    return RGB2SHORT_DICT[tuple(res)]
-
-#---------------------------------------------------------------------
-
-if __name__ == '__main__':
-    import doctest
-    doctest.testmod()
diff --git a/powerline_shell/encoding.py b/powerline_shell/encoding.py
deleted file mode 100644
index da0e212..0000000
--- a/powerline_shell/encoding.py
+++ /dev/null
@@ -1,398 +0,0 @@
-# vim:fileencoding=utf-8:noet
-
-'''Encodings support
-
-This is the only module from which functions obtaining encoding should be
-exported. Note: you should always care about errors= argument since it is not
-guaranteed that encoding returned by some function can encode/decode given
-string.
-
-All functions in this module must always return a valid encoding. Most of them
-are not thread-safe.
-'''
-
-from __future__ import (unicode_literals, division, absolute_import, print_function)
-
-import sys
-import codecs
-import locale
-
-from unicodedata import east_asian_width, combining
-
-try:
-	from __builtin__ import unicode
-except ImportError:
-	unicode = str
-
-try:
-	from __builtin__ import unichr
-except ImportError:
-	unichr = chr
-
-def get_preferred_file_name_encoding():
-	'''Get preferred file name encoding
-	'''
-	return (
-		sys.getfilesystemencoding()
-		or locale.getpreferredencoding()
-		or 'utf-8'
-	)
-
-
-def get_preferred_file_contents_encoding():
-	'''Get encoding preferred for file contents
-	'''
-	return (
-		locale.getpreferredencoding()
-		or 'utf-8'
-	)
-
-
-def get_preferred_output_encoding():
-	'''Get encoding that should be used for printing strings
-
-	.. warning::
-		Falls back to ASCII, so that output is most likely to be displayed
-		correctly.
-	'''
-	if hasattr(locale, 'LC_MESSAGES'):
-		return (
-			locale.getlocale(locale.LC_MESSAGES)[1]
-			or locale.getdefaultlocale()[1]
-			or 'ascii'
-		)
-
-	return (
-		locale.getdefaultlocale()[1]
-		or 'ascii'
-	)
-
-
-def get_preferred_input_encoding():
-	'''Get encoding that should be used for reading shell command output
-
-	.. warning::
-		Falls back to latin1 so that function is less likely to throw as decoded
-		output is primary searched for ASCII values.
-	'''
-	if hasattr(locale, 'LC_MESSAGES'):
-		return (
-			locale.getlocale(locale.LC_MESSAGES)[1]
-			or locale.getdefaultlocale()[1]
-			or 'latin1'
-		)
-
-	return (
-		locale.getdefaultlocale()[1]
-		or 'latin1'
-	)
-
-
-def get_preferred_arguments_encoding():
-	'''Get encoding that should be used for command-line arguments
-
-	.. warning::
-		Falls back to latin1 so that function is less likely to throw as
-		non-ASCII command-line arguments most likely contain non-ASCII
-		filenames and screwing them up due to unidentified locale is not much of
-		a problem.
-	'''
-	return (
-		locale.getdefaultlocale()[1]
-		or 'latin1'
-	)
-
-
-def get_preferred_environment_encoding():
-	'''Get encoding that should be used for decoding environment variables
-	'''
-	return (
-		locale.getpreferredencoding()
-		or 'utf-8'
-	)
-
-
-def get_unicode_writer(stream=sys.stdout, encoding=None, errors='replace'):
-	'''Get function which will write unicode string to the given stream
-
-	Writing is done using encoding returned by
-	:py:func:`get_preferred_output_encoding`.
-
-	:param file stream:
-		Stream to write to. Default value is :py:attr:`sys.stdout`.
-	:param str encoding:
-		Determines which encoding to use. If this argument is specified then
-		:py:func:`get_preferred_output_encoding` is not used.
-	:param str errors:
-		Determines what to do with characters which cannot be encoded. See
-		``errors`` argument of :py:func:`codecs.encode`.
-
-	:return: Callable which writes unicode string to the given stream using
-	         the preferred output encoding.
-	'''
-	encoding = encoding or get_preferred_output_encoding()
-	if sys.version_info < (3,) or not hasattr(stream, 'buffer'):
-		return lambda s: stream.write(s.encode(encoding, errors))
-	else:
-		return lambda s: stream.buffer.write(s.encode(encoding, errors))
-
-if sys.maxunicode < 0x10FFFF:
-	_unichr = unichr
-
-	def unichr(ch):
-		if ch <= sys.maxunicode:
-			return _unichr(ch)
-		else:
-			ch -= 0x10000
-			return _unichr((ch >> 10) + 0xD800) + _unichr((ch & ((1 << 10) - 1)) + 0xDC00)
-
-
-def u(s):
-	'''Return unicode instance assuming UTF-8 encoded string.
-	'''
-	if type(s) is unicode:
-		return s
-	else:
-		return unicode(s, 'utf-8')
-
-
-if sys.version_info < (3,):
-	def tointiter(s):
-		'''Convert a byte string to the sequence of integers
-		'''
-		return (ord(c) for c in s)
-else:
-	def tointiter(s):
-		'''Convert a byte string to the sequence of integers
-		'''
-		return iter(s)
-
-
-def powerline_decode_error(e):
-	if not isinstance(e, UnicodeDecodeError):
-		raise NotImplementedError
-	return (''.join((
-		'<{0:02X}>'.format(c)
-		for c in tointiter(e.object[e.start:e.end])
-	)), e.end)
-
-
-codecs.register_error('powerline_decode_error', powerline_decode_error)
-
-
-last_swe_idx = 0
-
-
-def register_strwidth_error(strwidth):
-	'''Create new encode errors handling method similar to ``replace``
-
-	Like ``replace`` this method uses question marks in place of the characters
-	that cannot be represented in the requested encoding. Unlike ``replace`` the
-	amount of question marks is identical to the amount of display cells
-	offending character occupies. Thus encoding ``…`` (U+2026, HORIZONTAL
-	ELLIPSIS) to ``latin1`` will emit one question mark, but encoding ``Ａ``
-	(U+FF21, FULLWIDTH LATIN CAPITAL LETTER A) will emit two question marks.
-
-	Since width of some characters depends on the terminal settings and
-	powerline knows how to respect them a single error handling method cannot be
-	used. Instead of it the generator function is used which takes ``strwidth``
-	function (function that knows how to compute string width respecting all
-	needed settings) and emits new error handling method name.
-
-	:param function strwidth:
-		Function that computs string width measured in display cells the string
-		occupies when displayed.
-
-	:return: New error handling method name.
-	'''
-	global last_swe_idx
-	last_swe_idx += 1
-
-	def powerline_encode_strwidth_error(e):
-		if not isinstance(e, UnicodeEncodeError):
-			raise NotImplementedError
-		return ('?' * strwidth(e.object[e.start:e.end]), e.end)
-
-	ename = 'powerline_encode_strwidth_error_{0}'.format(last_swe_idx)
-	codecs.register_error(ename, powerline_encode_strwidth_error)
-	return ename
-
-
-def out_u(s):
-	'''Return unicode string suitable for displaying
-
-	Unlike other functions assumes get_preferred_output_encoding() first. Unlike
-	u() does not throw exceptions for invalid unicode strings. Unlike
-	safe_unicode() does throw an exception if object is not a string.
-	'''
-	if isinstance(s, unicode):
-		return s
-	elif isinstance(s, bytes):
-		return unicode(s, get_preferred_output_encoding(), 'powerline_decode_error')
-	else:
-		raise TypeError('Expected unicode or bytes instance, got {0}'.format(repr(type(s))))
-
-
-def safe_unicode(s):
-	'''Return unicode instance without raising an exception.
-
-	Order of assumptions:
-	* ASCII string or unicode object
-	* UTF-8 string
-	* Object with __str__() or __repr__() method that returns UTF-8 string or
-	  unicode object (depending on python version)
-	* String in powerline.lib.encoding.get_preferred_output_encoding() encoding
-	* If everything failed use safe_unicode on last exception with which
-	  everything failed
-	'''
-	try:
-		try:
-			if type(s) is bytes:
-				return unicode(s, 'ascii')
-			else:
-				return unicode(s)
-		except UnicodeDecodeError:
-			try:
-				return unicode(s, 'utf-8')
-			except TypeError:
-				return unicode(str(s), 'utf-8')
-			except UnicodeDecodeError:
-				return unicode(s, get_preferred_output_encoding())
-	except Exception as e:
-		return safe_unicode(e)
-
-
-class FailedUnicode(unicode):
-	'''Builtin ``unicode`` subclass indicating fatal error
-
-	If your code for some reason wants to determine whether `.render()` method
-	failed it should check returned string for being a FailedUnicode instance.
-	Alternatively you could subclass Powerline and override `.render()` method
-	to do what you like in place of catching the exception and returning
-	FailedUnicode.
-	'''
-	pass
-
-
-if sys.version_info < (3,):
-	def string(s):
-		if type(s) is not str:
-			return s.encode('utf-8')
-		else:
-			return s
-else:
-	def string(s):
-		if type(s) is not str:
-			return s.decode('utf-8')
-		else:
-			return s
-
-
-string.__doc__ = (
-	'''Transform ``unicode`` or ``bytes`` object into ``str`` object
-
-	On Python-2 this encodes ``unicode`` to ``bytes`` (which is ``str``) using
-	UTF-8 encoding; on Python-3 this decodes ``bytes`` to ``unicode`` (which is
-	``str``) using UTF-8 encoding.
-
-	Useful for functions that expect an ``str`` object in both unicode versions,
-	not caring about the semantic differences between them in Python-2 and
-	Python-3.
-	'''
-)
-
-
-def surrogate_pair_to_character(high, low):
-	'''Transform a pair of surrogate codepoints to one codepoint
-	'''
-	return 0x10000 + ((high - 0xD800) << 10) + (low - 0xDC00)
-
-
-_strwidth_documentation = (
-	'''Compute string width in display cells
-
-	{0}
-
-	:param dict width_data:
-		Dictionary which maps east_asian_width property values to strings
-		lengths. It is expected to contain the following keys and values (from
-		`East Asian Width annex <http://www.unicode.org/reports/tr11/>`_):
-
-		===  ======  ===========================================================
-		Key  Value   Description
-		===  ======  ===========================================================
-		F    2       Fullwidth: all characters that are defined as Fullwidth in
-		             the Unicode Standard [Unicode] by having a compatibility
-		             decomposition of type <wide> to characters elsewhere in the
-		             Unicode Standard that are implicitly narrow but unmarked.
-		H    1       Halfwidth: all characters that are explicitly defined as
-		             Halfwidth in the Unicode Standard by having a compatibility
-		             decomposition of type <narrow> to characters elsewhere in
-		             the Unicode Standard that are implicitly wide but unmarked,
-		             plus U+20A9 ₩ WON SIGN.
-		W    2       Wide: all other characters that are always wide. These
-		             characters occur only in the context of East Asian
-		             typography where they are wide characters (such as the
-		             Unified Han Ideographs or Squared Katakana Symbols). This
-		             category includes characters that have explicit halfwidth
-		             counterparts.
-		Na   1       Narrow: characters that are always narrow and have explicit
-		             fullwidth or wide counterparts. These characters are
-		             implicitly narrow in East Asian typography and legacy
-		             character sets because they have explicit fullwidth or wide
-		             counterparts. All of ASCII is an example of East Asian
-		             Narrow characters.
-		A    1 or 2  Ambigious: characters that may sometimes be wide and
-		             sometimes narrow. Ambiguous characters require additional
-		             information not contained in the character code to further
-		             resolve their width. This information is usually defined in
-		             terminal setting that should in turn respect glyphs widths
-		             in used fonts. Also see :ref:`ambiwidth configuration
-		             option <config-common-ambiwidth>`.
-		N    1       Neutral characters: character that does not occur in legacy
-		             East Asian character sets.
-		===  ======  ===========================================================
-
-	:param unicode string:
-		String whose width will be calculated.
-
-	:return: unsigned integer.''')
-
-
-def strwidth_ucs_4(width_data, string):
-	return sum(((
-		(
-			0
-		) if combining(symbol) else (
-			width_data[east_asian_width(symbol)]
-		)
-	) for symbol in string))
-
-
-strwidth_ucs_4.__doc__ = _strwidth_documentation.format(
-	'''This version of function expects that characters above 0xFFFF are
-	represented using one symbol. This is only the case in UCS-4 Python builds.
-
-	.. note:
-		Even in UCS-4 Python builds it is possible to represent characters above
-		0xFFFF using surrogate pairs. Characters represented this way are not
-		supported.''')
-
-
-def strwidth_ucs_2(width_data, string):
-	return sum(((
-		(
-			width_data[east_asian_width(string[i - 1] + symbol)]
-		) if 0xDC00 <= ord(symbol) <= 0xDFFF else (
-			0
-		) if combining(symbol) or 0xD800 <= ord(symbol) <= 0xDBFF else (
-			width_data[east_asian_width(symbol)]
-		)
-	) for i, symbol in enumerate(string)))
-
-
-strwidth_ucs_2.__doc__ = _strwidth_documentation.format(
-	'''This version of function expects that characters above 0xFFFF are
-	represented using two symbols forming a surrogate pair, which is the only
-	option in UCS-2 Python builds. It still works correctly in UCS-4 Python
-	builds, but is slower then its UCS-4 counterpart.''')
diff --git a/powerline_shell/runcmd.py b/powerline_shell/runcmd.py
deleted file mode 100644
index 79bc1a2..0000000
--- a/powerline_shell/runcmd.py
+++ /dev/null
@@ -1,185 +0,0 @@
-#!/usr/bin/env python
-# -*- coding: utf-8 -*-
-import os
-import sys
-import traceback
-import subprocess
-import psutil
-import public
-from shutil import which
-
-class CommandNotFound(Exception):
-    ''' Raise when the command entered is not found '''
-    pass
-
-@public.add
-class Command(object):
-    """Command class"""
-    custom_popen_kwargs = None
-    __readme__ = ["exc", "args", "code", "out", "err", "pid", "kill", "ok", "running", "__bool__"]
-
-    def __init__(self, _command, cwd=None, env=None, background=False, **popen_kwargs):
-        if isinstance(_command, str):
-            self.command = _command.split()
-        elif isinstance(_command, list):
-            self.command = _command
-        self.code, self._out, self._err = None, "", ""
-        self.env = env
-        self.cwd = cwd
-        self.background = background
-        self.custom_popen_kwargs = dict(popen_kwargs)
-        self.kwargs = self.popen_kwargs
-        self.kwargs["cwd"] = cwd
-        if self.env:
-            self.kwargs["env"].update(env)
-        if self.background:
-            self.kwargs["stdout"] = open(os.devnull, 'wb')
-            self.kwargs["stderr"] = open(os.devnull, 'wb')
-        self.run
-        #self.process = subprocess.Popen(self.command, **self.kwargs)
-        #"""Popen.args python3 only"""
-        #self.process.args = _command
-        #if not self.background:
-        #    self._out, self._err = self.process.communicate()
-        #    self.code = self.process.returncode
-        #self._args = self.process.args
-        #self._out = self._out.rstrip()
-        #self._err = self._err.rstrip()
-        #self._code = self.code
-        #self._pid = self.process.pid
-
-    @property
-    def run(self):
-        self.code, self._out, self._err = None, "", ""
-        try:
-                self.valid = which(self.command[0])
-                if not self.valid:
-                    msg = "CommandNotFoundError: [Errno 2] Command not found: {}: {}".format(self.command[0], self.command)
-                    raise CommandNotFound(msg)
-        except CommandNotFound as e:
-            exc_type, exc_value, exc_traceback = sys.exc_info()
-            self._out = str(e).split()
-            self._err = exc_value
-            self.code = exc_value
-            return traceback.print_exception(exc_type, exc_value, e.__traceback__)
-        self.process = subprocess.Popen(self.command, **self.kwargs)
-        self.process.args = self.command
-        if not self.background:
-            self._out, self._err = self.process.communicate()
-            self.code = self.process.returncode
-        self._args = self.process.args
-        self._out = self._out.rstrip()
-        self._err = self._err.rstrip()
-        self._code = self.code
-        self._pid = self.process.pid
-        return self
-
-    def __bool__(self):
-        """return True if status code is 0"""
-        return self.ok
-
-    def __non_zero__(self):
-        """return True if status code is 0"""
-        return self.ok
-
-    def __str__(self):
-        return "<Process code=%s>" % self.code
-
-    def exc(self):
-        """raise OSError if status code is not 0. returns self"""
-        if self.pid and not self.ok:
-            output = self.err
-            if not self.err:
-                output = self.out
-            if output:
-                raise OSError("%s exited with code %s\n%s" % (self.args, self.code, output))
-            raise OSError("%s exited with code %s" % (self.args, self.code))
-        return self
-
-    def _raise(self):
-        """deprecated"""
-        return self.exc()
-
-    def kill(self, signal=None):
-        """kill process. return error string if error occured"""
-        if self.running:
-            args = list(map(str, filter(None, ["kill", signal, self.pid])))
-            process = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
-            out, err = process.communicate()
-            if "No such process" not in err.decode():
-                return err.decode().rstrip()
-
-    def rerun(self):
-        self.run
-
-    @property
-    def pid(self):
-        """return rocess pid"""
-        return self._pid
-
-    @property
-    def args(self):
-        """return arguments list"""
-        return self._args
-
-    @property
-    def exitcode(self):
-        """return status code"""
-        return self._code
-
-    @property
-    def err(self):
-        """return stderr string"""
-        return self._err
-
-    @property
-    def out(self):
-        """return stdout string"""
-        if isinstance(self._out, list):
-            return self._out
-        try:
-            if '\n' in self._out:
-                return self._out.split('\n')
-        except TypeError:
-            return self._out
-        return self._out.split()
-
-    @property
-    def text(self):
-        """return stdout+stderr string"""
-        return "\n".join(filter(None, self.out + [self.err])).replace('\n', ' ')
-
-    @property
-    def ok(self):
-        """return True if status code is 0, else False"""
-        return self.code == 0
-
-    @property
-    def running(self):
-        """return True if process is running, else False"""
-        try:
-            os.kill(self.pid, 0)
-            return psutil.Process(self.pid).status() != psutil.STATUS_ZOMBIE
-        except OSError:
-            return False
-        except psutil._exceptions.NoSuchProcess:
-            return False
-
-    @property
-    def popen_kwargs(self):
-        kwargs = self._default_popen_kwargs
-        kwargs.update(self.custom_popen_kwargs)
-        return kwargs
-
-    @property
-    def _default_popen_kwargs(self):
-        return {
-            'env': os.environ.copy(),
-            'stdin': subprocess.PIPE,
-            'stdout': subprocess.PIPE,
-            'stderr': subprocess.PIPE,
-            'shell': False,
-            'universal_newlines': True,
-            'bufsize': 0
-        }
-
diff --git a/powerline_shell/segments.py b/powerline_shell/segments.py
deleted file mode 100644
index e69de29..0000000
diff --git a/powerline_shell/segments/__init__.py b/powerline_shell/segments/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/powerline_shell/segments/asciinema.py b/powerline_shell/segments/asciinema.py
deleted file mode 100644
index 0d6cd7a..0000000
--- a/powerline_shell/segments/asciinema.py
+++ /dev/null
@@ -1,11 +0,0 @@
-import os
-from powerline_shell.utils import BasicSegment
-
-
-class Segment(BasicSegment):
-    def add_to_powerline(self):
-        if os.getenv('ASCIINEMA_REC'):
-            powerline = self.powerline
-            powerline.append('\33[5m' + u'\u26ab' + '\033[0m',
-                             powerline.theme.ASCIINEMA_FG,
-                             powerline.theme.ASCIINEMA_BG)
diff --git a/powerline_shell/segments/aws_profile.orig b/powerline_shell/segments/aws_profile.orig
deleted file mode 100644
index 9774598..0000000
--- a/powerline_shell/segments/aws_profile.orig
+++ /dev/null
@@ -1,12 +0,0 @@
-from powerline_shell.utils import BasicSegment
-import os
-
-
-class Segment(BasicSegment):
-    def add_to_powerline(self):
-        aws_profile = os.environ.get("AWS_PROFILE") or \
-            os.environ.get("AWS_DEFAULT_PROFILE")
-        if aws_profile:
-            self.powerline.append(" %s " % os.path.basename(aws_profile),
-                                  self.powerline.theme.AWS_PROFILE_FG,
-                                  self.powerline.theme.AWS_PROFILE_BG)
diff --git a/powerline_shell/segments/aws_profile.py b/powerline_shell/segments/aws_profile.py
deleted file mode 100644
index 99c2aef..0000000
--- a/powerline_shell/segments/aws_profile.py
+++ /dev/null
@@ -1,17 +0,0 @@
-import os
-from powerline_shell.symbols import *
-from powerline_shell.utils import BasicSegment
-from powerline_shell.encoding import u
-
-
-class Segment(BasicSegment):
-
-    def add_to_powerline(self):
-        self.logo = u(aws.dump(1))
-        self.aws_profile = os.environ.get("AWS_PROFILE") or os.environ.get("AWS_DEFAULT_PROFILE")
-        if self.aws_profile:
-            self.profile = os.path.basename(self.aws_profile)
-            self.line = "{0} {1}".format(self.logo, self.profile)
-            self.powerline.append(self.line,
-                                  self.powerline.theme.AWS_PROFILE_FG,
-                                  self.powerline.theme.AWS_PROFILE_BG)
diff --git a/powerline_shell/segments/aws_region.py b/powerline_shell/segments/aws_region.py
deleted file mode 100644
index a1b1aa8..0000000
--- a/powerline_shell/segments/aws_region.py
+++ /dev/null
@@ -1,17 +0,0 @@
-from powerline_shell.utils import BasicSegment
-from powerline_shell.encoding import u
-from powerline_shell.symbols import *
-import os
-
-
-class Segment(BasicSegment):
-
-    def add_to_powerline(self):
-        self.logo = u(aws.dump(1))
-        self.aws_region = os.environ.get("AWS_REGION") or os.environ.get("AWS_DEFAULT_REGION")
-        if self.aws_region:
-            self.region = os.path.basename(self.aws_region)
-            self.line = "{0} {1}".format(self.logo, self.region)
-            self.powerline.append(self.line,
-                                  self.powerline.theme.AWS_REGION_FG,
-                                  self.powerline.theme.AWS_REGION_BG)
diff --git a/powerline_shell/segments/battery.py b/powerline_shell/segments/battery.py
deleted file mode 100644
index 99b992a..0000000
--- a/powerline_shell/segments/battery.py
+++ /dev/null
@@ -1,118 +0,0 @@
-import os
-import re
-from powerline_shell.runcmd import Command
-from powerline_shell.utils import BasicSegment, warn
-from powerline_shell.symbols import *
-from powerline_shell.encoding import u
-
-try:
-    from shutil import wich  # Python-3.3 and later
-except ImportError:
-    which = lambda f: (lambda fp: os.path.exists(fp) and fp)(os.path.join('/usr/bin', f))
-
-
-class Segment(BasicSegment):
-    def run(self):
-        print(self.segment_def)
-
-    def add_to_powerline(self):
-        ''' See discussion in https://github.com/banga/powerline-shell/pull/204
-            regarding the directory where battery info is saved
-        '''
-        if os.path.exists("/sys/class/power_supply/BAT0"):
-            dir_ = "/sys/class/power_supply/BAT0"
-            with open(os.path.join(dir_, "capacity")) as f:
-                cap = int(f.read().strip())
-            with open(os.path.join(dir_, "status")) as f:
-                status = f.read().strip()
-        elif os.path.exists("/sys/class/power_supply/BAT1"):
-            dir_ = "/sys/class/power_supply/BAT1"
-            with open(os.path.join(dir_, "capacity")) as f:
-                cap = int(f.read().strip())
-            with open(os.path.join(dir_, "status")) as f:
-                status = f.read().strip()
-        elif which('pmset'):
-            BATTERY_PERCENT_RE = re.compile(r'(\d+)%')
-            cmd = Command(['pmset', '-g', 'batt'])
-            battery_summary = cmd.out
-            for raw in battery_summary:
-                line = raw.strip()
-                if "Now drawing from" in line:
-                    status = "Battery" if "'Battery Power'" in line else \
-                        ('AC' if "'AC Power'" in line else "")
-                elif "InternalBattery" in line:
-                    m = re.search('([0-9]{1,3})%;', battery_summary[1])
-                    if m is not None:
-                        raw_cap = int(m.group(1))
-                        cap = raw_cap if (0<=raw_cap and raw_cap <=100) else -1
-                    m = re.search('[0-9]{1,3}%; ([a-zA-Z ]+);', battery_summary[1])
-                    if m is not None:
-                        source = m.group(1).strip()
-                    break
-        else:
-            warn("battery directory or pmset could not be found")
-            return
-
-        if status == "Full" or status == "AC":
-            if self.powerline.segment_conf("battery", "always_show_percentage", False):
-                pwr_fmt = u" {cap:d}% \ufba3 "
-            else:
-                pwr_fmt = u" \ufba3 "
-        elif status == "Charging" or status == "Battery":
-            pwr_fmt = u" {cap:d}% \ufba4 "
-        else:
-            pwr_fmt = u" {cap:d}% "
-
-        low_threshold = self.powerline.segment_conf("battery", "low_threshold", 10)
-        warn_threshold =  self.powerline.segment_conf("battery", "warn_threshold", 20)
-        if source == 'discharging':
-            if cap <= low_threshold:
-                pwr_fmt = str(' ') + str(cap) + u(battery_ten.dump(1))
-                bg = self.powerline.theme.BATTERY_LOW_BG
-                fg = self.powerline.theme.BATTERY_LOW_FG
-            elif cap > low_threshold and cap <= warn_threshold:
-                pwr_fmt = str(' ') + str(cap) + u(battery_twenty.dump(1))
-                bg = self.powerline.theme.BATTERY_WARN_BG
-                fg = self.powerline.theme.BATTERY_WARN_FG
-            elif cap > warn_threshold and cap <= int(30):
-                pwr_fmt = str(' ') + str(cap) + u(battery_thirty.dump(1))
-                bg = self.powerline.theme.BATTERY_NORMAL_BG
-                fg = self.powerline.theme.BATTERY_NORMAL_FG
-            elif cap > int(30) and cap <= int(40):
-                pwr_fmt = str(' ') + str(cap) + u(battery_forty.dump(1))
-                bg = self.powerline.theme.BATTERY_NORMAL_BG
-                fg = self.powerline.theme.BATTERY_NORMAL_FG
-            elif cap > int(40) and cap <= int(50):
-                pwr_fmt = str(' ') + str(cap) + u(battery_fifty.dump(1))
-                bg = self.powerline.theme.BATTERY_NORMAL_BG
-                fg = self.powerline.theme.BATTERY_NORMAL_FG
-            elif cap > int(50) and cap <= int(60):
-                pwr_fmt = str(' ') + str(cap) + u(battery_sixty.dump(1))
-                bg = self.powerline.theme.BATTERY_NORMAL_BG
-                fg = self.powerline.theme.BATTERY_NORMAL_FG
-            elif cap > int(50) and cap <= int(70):
-                pwr_fmt = str(' ') + str(cap) + u(battery_seventy.dump(1))
-                bg = self.powerline.theme.BATTERY_NORMAL_BG
-                fg = self.powerline.theme.BATTERY_NORMAL_FG
-            elif cap > int(70) and cap <= int(80):
-                pwr_fmt = str(' ') + str(cap) + u(battery_seventy.dump(1))
-                bg = self.powerline.theme.BATTERY_NORMAL_BG
-                fg = self.powerline.theme.BATTERY_NORMAL_FG
-            elif cap > int(80) and cap <= int(90):
-                pwr_fmt = str(' ') + str(cap) + u(battery_ninety.dump(1))
-                bg = self.powerline.theme.BATTERY_NORMAL_BG
-                fg = self.powerline.theme.BATTERY_NORMAL_FG
-            elif cap > int(90) and cap <= int(100):
-                pwr_fmt = str(' ') + str(cap) + u(battery_hundred.dump(1))
-                bg = self.powerline.theme.BATTERY_NORMAL_BG
-                fg = self.powerline.theme.BATTERY_NORMAL_FG
-        elif source == "charging" or source == "charged":
-            pwr_fmt = u(plug.dump(1))
-            bg = self.powerline.theme.BATTERY_NORMAL_BG
-            fg = self.powerline.theme.BATTERY_NORMAL_FG
-        elif not isinstance(cap, int):
-            pwr_fmt = str(' ') + str(cap) + u(battery_error.dump(1))
-            bg = self.powerline.theme.BATTERY_LOW_BG
-            fg = self.powerline.theme.BATTERY_LOW_FG
-
-        self.powerline.append(pwr_fmt.format(cap=cap), fg, bg)
diff --git a/powerline_shell/segments/beat.py b/powerline_shell/segments/beat.py
deleted file mode 100644
index 0150e51..0000000
--- a/powerline_shell/segments/beat.py
+++ /dev/null
@@ -1,46 +0,0 @@
-import math
-import datetime
-from ..utils import BasicSegment
-
-class Segment(BasicSegment):
-    def add_to_powerline(self):
-        '''
-        Interface method called by Powerline
-        '''
-        pline = self.powerline
-        beat = self.current_beat()
-        format = "%05.1f" if self.show_decimal() else "%03.0f"
-        if self.show_at_sign():
-            format = " @%s " % format
-        pline.append(format % beat, pline.theme.TIME_FG, pline.theme.TIME_BG)
-    def show_decimal(self):
-        '''
-        @return boolean
-        '''
-        raw = self.powerline.segment_conf("beat", "show_decimal", "True")
-        return raw != "False"
-    def show_at_sign(self):
-        '''
-        @return boolean
-        '''
-        raw = self.powerline.segment_conf("beat", "show_at_sign", "True")
-        return raw != "False"
-    def current_datetime(self):
-        '''
-        Don't do anything in this function but get the current UTC time. This 
-        method will be monkey patched when tested.
-        @return current date and time
-        '''
-        return datetime.datetime.utcnow()
-    def current_beat(self):
-        '''
-        Handles the math of finding a beat
-        @return current beat as a float
-        '''
-        now = self.current_datetime()
-        midnight = now.replace(hour=0, minute=0, second=0, microsecond=0)
-        beat = ( (now - midnight).seconds + 3600) / 86.4
-        # 1000.000000 >= 1000.0 was not passing, so using rounded values
-        if round(beat) >= 1000:
-            beat = math.copysign(beat-1000.0, 0)
-        return beat
diff --git a/powerline_shell/segments/bzr.py b/powerline_shell/segments/bzr.py
deleted file mode 100644
index e93ae12..0000000
--- a/powerline_shell/segments/bzr.py
+++ /dev/null
@@ -1,70 +0,0 @@
-import subprocess
-from powerline_shell.utils import RepoStats, ThreadedSegment, get_subprocess_env
-from powerline_shell.encoding import get_preferred_output_encoding, get_preferred_input_encoding
-
-
-def _get_bzr_branch():
-    p = subprocess.Popen(['bzr', 'nick'],
-                         stdout=subprocess.PIPE, stderr=subprocess.PIPE,
-                         env=get_subprocess_env())
-    branch = p.communicate()[0].decode(get_preferred_output_encoding()).rstrip('\n')
-    return branch
-
-
-def parse_bzr_stats(status):
-    stats = RepoStats()
-    statustype = "changed"
-    for statusline in status:
-        if statusline[:2] == "  ":
-            setattr(stats, statustype, getattr(stats, statustype) + 1)
-        elif statusline == "added:":
-            statustype = "staged"
-        elif statusline == "unknown:":
-            statustype = "new"
-        else:  # removed, missing, renamed, modified or kind changed
-            statustype = "changed"
-    return stats
-
-
-def _get_bzr_status(output):
-    """This function exists to enable mocking the `bzr status` output in tests.
-    """
-    return output[0].decode(get_preferred_output_encoding()).splitlines()
-
-
-def build_stats():
-    try:
-        p = subprocess.Popen(['bzr', 'status'],
-                             stdout=subprocess.PIPE, stderr=subprocess.PIPE,
-                             env=get_subprocess_env())
-    except OSError:
-        # Popen will throw an OSError if bzr is not found
-        return None, None
-    pdata = p.communicate()
-    if p.returncode != 0:
-        return None, None
-    status = _get_bzr_status(pdata)
-    stats = parse_bzr_stats(status)
-    branch = _get_bzr_branch()
-    return stats, branch
-
-
-class Segment(ThreadedSegment):
-    def run(self):
-        self.stats, self.branch = build_stats()
-
-    def add_to_powerline(self):
-        self.join()
-        if not self.stats:
-            return
-        bg = self.powerline.theme.REPO_CLEAN_BG
-        fg = self.powerline.theme.REPO_CLEAN_FG
-        if self.stats.dirty:
-            bg = self.powerline.theme.REPO_DIRTY_BG
-            fg = self.powerline.theme.REPO_DIRTY_FG
-        if self.powerline.segment_conf("vcs", "show_symbol"):
-            symbol = RepoStats().symbols["bzr"] + " "
-        else:
-            symbol = ""
-        self.powerline.append(" " + symbol + self.branch + " ", fg, bg)
-        self.stats.add_to_powerline(self.powerline)
diff --git a/powerline_shell/segments/cwd.py b/powerline_shell/segments/cwd.py
deleted file mode 100644
index fae12a2..0000000
--- a/powerline_shell/segments/cwd.py
+++ /dev/null
@@ -1,107 +0,0 @@
-import os
-from powerline_shell.utils import warn, py3, BasicSegment
-from powerline_shell.encoding import get_preferred_output_encoding
-
-ELLIPSIS = u'\u2026'
-
-
-def replace_home_dir(cwd):
-    home = os.path.realpath(os.getenv('HOME'))
-    if cwd.startswith(home):
-        return '~' + cwd[len(home):]
-    return cwd
-
-
-def split_path_into_names(cwd):
-    names = cwd.split(os.sep)
-
-    if names[0] == '':
-        names = names[1:]
-
-    if not names[0]:
-        return ['/']
-
-    return names
-
-
-def requires_special_home_display(powerline, name):
-    """Returns true if the given directory name matches the home indicator and
-    the chosen theme should use a special home indicator display."""
-    return name == '~' and powerline.theme.HOME_SPECIAL_DISPLAY
-
-
-def maybe_shorten_name(powerline, name):
-    """If the user has asked for each directory name to be shortened, will
-    return the name up to their specified length. Otherwise returns the full
-    name."""
-    max_size = powerline.segment_conf("cwd", "max_dir_size")
-    if max_size:
-        return name[:max_size]
-    return name
-
-
-def get_fg_bg(powerline, name, is_last_dir):
-    """Returns the foreground and background color to use for the given name.
-    """
-    if requires_special_home_display(powerline, name):
-        return powerline.theme.HOME_FG, powerline.theme.HOME_BG,
-
-    if is_last_dir:
-        return powerline.theme.CWD_FG, powerline.theme.PATH_BG,
-    else:
-        return powerline.theme.PATH_FG, powerline.theme.PATH_BG,
-
-
-def add_cwd_segment(powerline):
-    cwd = powerline.cwd
-    if not py3:
-        cwd = cwd.decode(get_preferred_output_encoding())
-    cwd = replace_home_dir(cwd)
-
-    names = split_path_into_names(cwd)
-
-    full_cwd = powerline.segment_conf("cwd", "full_cwd", False)
-    max_depth = powerline.segment_conf("cwd", "max_depth", 5)
-    if max_depth <= 0:
-        warn("Ignoring cwd.max_depth option since it's not greater than 0")
-    elif len(names) > max_depth:
-        # https://github.com/milkbikis/powerline-shell/issues/148
-        # n_before is the number is the number of directories to put before the
-        # ellipsis. So if you are at ~/a/b/c/d/e and max depth is 4, it will
-        # show `~ a ... d e`.
-        #
-        # max_depth must be greater than n_before or else you end up repeating
-        # parts of the path with the way the splicing is written below.
-        n_before = 2 if max_depth > 2 else max_depth - 1
-        n_before = powerline.segment_conf("cwd", "n_before", n_before)
-        names = names[:n_before] + [ELLIPSIS] + names[n_before - max_depth:]
-
-    if powerline.segment_conf("cwd", "mode") == "dironly":
-        # The user has indicated they only want the current directory to be
-        # displayed, so chop everything else off
-        names = names[-1:]
-
-    elif powerline.segment_conf("cwd", "mode") == "plain":
-        joined = os.path.sep.join(names)
-        powerline.append(" %s " % (joined,), powerline.theme.CWD_FG,
-                         powerline.theme.PATH_BG)
-        return
-
-    for i, name in enumerate(names):
-        is_last_dir = (i == len(names) - 1)
-        fg, bg = get_fg_bg(powerline, name, is_last_dir)
-
-        separator = powerline.separator_thin
-        separator_fg = powerline.theme.SEPARATOR_FG
-        if requires_special_home_display(powerline, name) or is_last_dir:
-            separator = None
-            separator_fg = None
-
-        if not (is_last_dir and full_cwd):
-            name = maybe_shorten_name(powerline, name)
-        powerline.append(' %s ' % name, fg, bg, separator, separator_fg)
-
-
-class Segment(BasicSegment):
-    def add_to_powerline(self):
-        add_cwd_segment(self.powerline)
diff --git a/powerline_shell/segments/env.py b/powerline_shell/segments/env.py
deleted file mode 100644
index 6954578..0000000
--- a/powerline_shell/segments/env.py
+++ /dev/null
@@ -1,14 +0,0 @@
-import os
-from ..utils import BasicSegment
-
-
-class Segment(BasicSegment):
-    def add_to_powerline(self):
-        env = os.getenv(self.segment_def["var"])
-        if env is None and "default" in self.segment_def:
-            env = self.segment_def["default"]
-        if env is not None:
-            self.powerline.append(
-                " %s " % env,
-                self.segment_def.get("fg_color", self.powerline.theme.PATH_FG),
-                self.segment_def.get("bg_color", self.powerline.theme.PATH_BG))
diff --git a/powerline_shell/segments/exit_code.py b/powerline_shell/segments/exit_code.py
deleted file mode 100644
index 3eb7351..0000000
--- a/powerline_shell/segments/exit_code.py
+++ /dev/null
@@ -1,10 +0,0 @@
-from powerline_shell.utils import BasicSegment
-
-
-class Segment(BasicSegment):
-    def add_to_powerline(self):
-        if self.powerline.args.prev_error == 0:
-            return
-        fg = self.powerline.theme.CMD_FAILED_FG
-        bg = self.powerline.theme.CMD_FAILED_BG
-        self.powerline.append(' %s ' % str(self.powerline.args.prev_error), fg, bg)
diff --git a/powerline_shell/segments/fossil.py b/powerline_shell/segments/fossil.py
deleted file mode 100644
index 850c1a2..0000000
--- a/powerline_shell/segments/fossil.py
+++ /dev/null
@@ -1,72 +0,0 @@
-import os
-import subprocess
-from powerline_shell.utils import RepoStats, ThreadedSegment, get_subprocess_env
-
-
-def _get_fossil_branch():
-    branches = os.popen("fossil branch 2>/dev/null").read().strip().split("\n")
-    return ''.join([
-        i.replace('*', '').strip()
-        for i in branches
-        if i.startswith('*')
-    ])
-
-
-def parse_fossil_stats(status):
-    stats = RepoStats()
-    for line in status:
-        if line.startswith("ADDED"):
-            stats.staged += 1
-        elif line.startswith("EXTRA"):
-            stats.new += 1
-        elif line.startswith("CONFLICT"):
-            stats.conflicted += 1
-        else:
-            stats.changed += 1
-    return stats
-
-
-def _get_fossil_status():
-    changes = os.popen("fossil changes 2>/dev/null").read().strip().split("\n")
-    extra = os.popen("fossil extras 2>/dev/null").read().strip().split("\n")
-    extra = ["EXTRA      " + filename for filename in extra if filename != ""]
-    status = [line for line in changes + extra if line != '']
-    return status
-
-
-# noinspection PySimplifyBooleanCheck
-def build_stats():
-    try:
-        subprocess.Popen(['fossil'], stdout=subprocess.PIPE,
-                         stderr=subprocess.PIPE,
-                         env=get_subprocess_env()).communicate()
-    except OSError:
-        # Popen will throw an OSError if fossil is not found
-        return None, None
-    branch = _get_fossil_branch()
-    if branch == "":
-        return (None, None)
-    status = _get_fossil_status()
-    if status == []:
-        return (RepoStats(), branch)
-    stats = parse_fossil_stats(status)
-    return stats, branch
-
-
-class Segment(ThreadedSegment):
-
-    def add_to_powerline(self):
-        self.stats, self.branch = build_stats()
-        if not self.stats:
-            return
-        bg = self.powerline.theme.REPO_CLEAN_BG
-        fg = self.powerline.theme.REPO_CLEAN_FG
-        if self.stats.dirty:
-            bg = self.powerline.theme.REPO_DIRTY_BG
-            fg = self.powerline.theme.REPO_DIRTY_FG
-        if self.powerline.segment_conf("vcs", "show_symbol"):
-            symbol = RepoStats().symbols["fossil"] + " "
-        else:
-            symbol = ""
-        self.powerline.append(" " + symbol + self.branch + " ", fg, bg)
-        self.stats.add_to_powerline(self.powerline)
diff --git a/powerline_shell/segments/get_platform.py b/powerline_shell/segments/get_platform.py
deleted file mode 100644
index dbc7fd1..0000000
--- a/powerline_shell/segments/get_platform.py
+++ /dev/null
@@ -1,46 +0,0 @@
-import platform
-from powerline_shell.utils import BasicSegment
-from powerline_shell.color_compliment import stringToHashToColorAndOpposite
-from powerline_shell.colortrans import rgb2short
-
-
-def get_cursor(version=None, prompt='\U0001F4BB '):
-    if version == 'Darwin':
-        prompt = '\uf8ff'
-    elif version == 'Linux':
-        prompt = '\U0001F427'
-    elif version == 'Windows':
-        prompt = '\U0001F4A8'
-    elif not version:
-        prompt = prompt
-
-    return prompt
-
-
-class Segment(BasicSegment):
-    def add_to_powerline(self):
-        powerline = self.powerline
-        if powerline.segment_conf("platform", "colorize"):
-            system = platform.system()
-            FG, BG = stringToHashToColorAndOpposite(system)
-            FG, BG = (rgb2short(*color) for color in [FG, BG])
-            system_prompt = "%s " % get_cursor(system)
-            print(system_prompt)
-            powerline.append(system_prompt, FG, BG)
-        else:
-            if powerline.args.shell == "bash":
-                host_prompt = r" \h "
-            elif powerline.args.shell == "zsh":
-                host_prompt = " %m "
-            else:
-                host_prompt = " %s " % get_cursor(platform.system())
-            powerline.append(host_prompt,
-                             powerline.theme.PLATFORM_FG,
-                             powerline.theme.PLATFORM_BG)
-
-# system = platform.system()
-# FG, BG = stringToHashToColorAndOpposite(system)
-# FG, BG = (rgb2short(*color) for color in [FG, BG])
-# system_prompt = "%s " % get_cursor(system)
-
-# print(system_prompt, FG, BG)
diff --git a/powerline_shell/segments/git_cmd.py b/powerline_shell/segments/git_cmd.py
deleted file mode 100644
index 3e12a77..0000000
--- a/powerline_shell/segments/git_cmd.py
+++ /dev/null
@@ -1,105 +0,0 @@
-import re
-import os
-import subprocess
-from powerline_shell.utils import RepoStats, ThreadedSegment, get_git_subprocess_env
-from powerline_shell.encoding import get_preferred_output_encoding
-
-
-def parse_git_branch_info(status):
-    info = re.search(
-        '^## (?P<local>\S+?)''(\.{3}(?P<remote>\S+?)( \[(ahead (?P<ahead>\d+)(, )?)?(behind (?P<behind>\d+))?\])?)?$',
-        status[0])
-    return info.groupdict() if info else None
-
-
-def _get_git_detached_branch():
-    p = subprocess.Popen(['git', 'describe', '--tags', '--always'], stdout=subprocess.PIPE, stderr=subprocess.PIPE,
-                         env=get_git_subprocess_env())
-    # detached_ref = subprocess.check_output(['git', 'describe', '--tags', '--always'], env=get_git_subprocess_env()).decode(get_preferred_output_encoding()).rstrip('\n')
-    detached_ref = p.communicate()[0].decode(get_preferred_output_encoding()).rstrip('\n')
-    if p.returncode == 0:
-        branch = u'{} {}'.format(RepoStats.symbols['detached'], detached_ref)
-    else:
-        branch = 'Big Bang'
-    return branch
-
-
-def parse_git_stats(status):
-    stats = RepoStats()
-    for statusline in status[1:]:
-        code = statusline[:2]
-        if code == '??':
-            stats.new += 1
-        elif code in ('DD', 'AU', 'UD', 'UA', 'DU', 'AA', 'UU'):
-            stats.conflicted += 1
-        else:
-            if code[1] != ' ':
-                stats.changed += 1
-            if code[0] != ' ':
-                stats.staged += 1
-
-    return stats
-
-
-def build_stats():
-    # Check to see if we are in a git directory
-    path = '/'
-    path_list = list()
-    git_status = False
-    for p in os.getenv("PWD").split('/'):
-        path += p + '/'
-        path_list.append(path)
-    for i in path_list:
-        if os.path.isdir(i + ".git"):
-            git_status = True
-            break
-        else:
-            pass
-    # Run thru getting stats unless we aren't in a git repo
-    if git_status:
-        try:
-            p = subprocess.Popen(['git', 'status', '--porcelain', '-b'],
-                                 stdout=subprocess.PIPE, stderr=subprocess.PIPE,
-                                 env=get_git_subprocess_env())
-        except OSError:
-            # Popen will throw an OSError if git is not found
-            return None, None
-
-        pdata = p.communicate()
-        if p.returncode != 0:
-            return None, None
-
-        status = pdata[0].decode(get_preferred_output_encoding()).splitlines()
-        stats = parse_git_stats(status)
-        branch_info = parse_git_branch_info(status)
-
-        if branch_info:
-            stats.ahead = branch_info["ahead"]
-            stats.behind = branch_info["behind"]
-            branch = branch_info['local']
-        else:
-            branch = _get_git_detached_branch()
-        return stats, branch
-    else:
-        return None, None
-
-
-class Segment(ThreadedSegment):
-    def run(self):
-        self.stats, self.branch = build_stats()
-
-    def add_to_powerline(self):
-        self.join()
-        if not self.stats:
-            return
-        bg = self.powerline.theme.REPO_CLEAN_BG
-        fg = self.powerline.theme.REPO_CLEAN_FG
-        if self.stats.dirty:
-            bg = self.powerline.theme.REPO_DIRTY_BG
-            fg = self.powerline.theme.REPO_DIRTY_FG
-        if self.powerline.segment_conf("vcs", "show_symbol"):
-            symbol = RepoStats().symbols["git"] + " "
-        else:
-            symbol = ""
-        self.powerline.append(" " + symbol + self.branch + " ", fg, bg)
-        self.stats.add_to_powerline(self.powerline)
diff --git a/powerline_shell/segments/git_stash.py b/powerline_shell/segments/git_stash.py
deleted file mode 100644
index 5f7e4dd..0000000
--- a/powerline_shell/segments/git_stash.py
+++ /dev/null
@@ -1,34 +0,0 @@
-import subprocess
-from powerline_shell.utils import RepoStats, ThreadedSegment, get_git_subprocess_env
-
-
-def get_stash_count():
-    try:
-        p = subprocess.Popen(['git', 'stash', 'list'],
-                             stdout=subprocess.PIPE, stderr=subprocess.PIPE,
-                             env=get_git_subprocess_env())
-    except OSError:
-        return 0
-
-    pdata = p.communicate()
-    if p.returncode != 0:
-        return 0
-
-    return pdata[0].count(b'\n')
-
-
-class Segment(ThreadedSegment):
-    def run(self):
-        self.stash_count = get_stash_count()
-
-    def add_to_powerline(self):
-        self.join()
-        if not self.stash_count:
-            return
-
-        bg = self.powerline.theme.GIT_STASH_BG
-        fg = self.powerline.theme.GIT_STASH_FG
-
-        sc = self.stash_count if self.stash_count > 1 else ''
-        stash_str = u' {}{} '.format(sc, RepoStats.symbols['stash'])
-        self.powerline.append(stash_str, fg, bg)
diff --git a/powerline_shell/segments/git_status.py b/powerline_shell/segments/git_status.py
deleted file mode 100644
index 77a8222..0000000
--- a/powerline_shell/segments/git_status.py
+++ /dev/null
@@ -1,197 +0,0 @@
-# vim:fileencoding=utf-8:noet
-
-import os
-import re
-import string
-from subprocess import PIPE, Popen
-
-from powerline.segments import Segment, with_docstring
-from powerline.theme import requires_segment_info
-
-
-def build_segments(formats, branch, detached, tag, behind, ahead, staged, unmerged, changed, untracked, stashed):
-    if detached:
-        branch_group = 'gitstatus_branch_detached'
-    elif staged or unmerged or changed or untracked:
-        branch_group = 'gitstatus_branch_dirty'
-    else:
-        branch_group = 'gitstatus_branch_clean'
-
-    segments = [
-        {'contents': formats.get('branch', u'\ue0a0 {}').format(branch), 'highlight_groups': [branch_group, 'gitstatus_branch', 'gitstatus'], 'divider_highlight_group': 'gitstatus:divider'}
-    ]
-
-    if tag:
-        segments.append({'contents': formats.get('tag', u' \u2605 {}').format(tag), 'highlight_groups': ['gitstatus_tag', 'gitstatus'], 'divider_highlight_group': 'gitstatus:divider'})
-    if behind:
-        segments.append({'contents': formats.get('behind', ' ↓ {}').format(behind), 'highlight_groups': ['gitstatus_behind', 'gitstatus'], 'divider_highlight_group': 'gitstatus:divider'})
-    if ahead:
-        segments.append({'contents': formats.get('ahead', ' ↑ {}').format(ahead), 'highlight_groups': ['gitstatus_ahead', 'gitstatus'], 'divider_highlight_group': 'gitstatus:divider'})
-    if staged:
-        segments.append({'contents': formats.get('staged', ' ● {}').format(staged), 'highlight_groups': ['gitstatus_staged', 'gitstatus'], 'divider_highlight_group': 'gitstatus:divider'})
-    if unmerged:
-        segments.append({'contents': formats.get('unmerged', ' ✖ {}').format(unmerged), 'highlight_groups': ['gitstatus_unmerged', 'gitstatus'], 'divider_highlight_group': 'gitstatus:divider'})
-    if changed:
-        segments.append({'contents': formats.get('changed', ' ✚ {}').format(changed), 'highlight_groups': ['gitstatus_changed', 'gitstatus'], 'divider_highlight_group': 'gitstatus:divider'})
-    if untracked:
-        segments.append({'contents': formats.get('untracked', ' … {}').format(untracked), 'highlight_groups': ['gitstatus_untracked', 'gitstatus'], 'divider_highlight_group': 'gitstatus:divider'})
-    if stashed:
-        segments.append({'contents': formats.get('stashed', ' ⚑ {}').format(stashed), 'highlight_groups': ['gitstatus_stashed', 'gitstatus'], 'divider_highlight_group': 'gitstatus:divider'})
-
-    return segments
-
-
-def parse_status(lines):
-    staged    = len([True for l in lines if l[0] in 'MRC' or (l[0] == 'D' and l[1] != 'D') or (l[0] == 'A' and l[1] != 'A')])
-    unmerged  = len([True for l in lines if l[0] == 'U' or l[1] == 'U' or (l[0] == 'A' and l[1] == 'A') or (l[0] == 'D' and l[1] == 'D')])
-    changed   = len([True for l in lines if l[1] == 'M' or (l[1] == 'D' and l[0] != 'D')])
-    untracked = len([True for l in lines if l[0] == '?'])
-
-    return staged, unmerged, changed, untracked
-
-
-def parse_branch(line):
-    if not line:
-        return '', False, 0, 0
-
-    if line.startswith('## '):
-        line = line[3:]
-
-    match = re.search('^Initial commit on (.+)$', line)
-    if match is not None:
-        return match.group(1), False, 0, 0
-
-    match = re.search('^(.+) \(no branch\)$', line)
-    if match is not None:
-        return match.group(1), True, 0, 0
-
-    match = re.search('^(.+?)\.\.\.', line)
-    if match is not None:
-        branch = match.group(1)
-
-        match = re.search('\[ahead (\d+), behind (\d+)\]$', line)
-        if match is not None:
-            return branch, False, int(match.group(2)), int(match.group(1))
-        match = re.search('\[ahead (\d+)\]$', line)
-        if match is not None:
-            return branch, False, 0, int(match.group(1))
-        match = re.search('\[behind (\d+)\]$', line)
-        if match is not None:
-            return branch, False, int(match.group(1)), 0
-
-        return branch, False, 0, 0
-
-    return line, False, 0, 0
-
-
-def get_base_command(cwd, use_dash_c):
-    if use_dash_c:
-        return ['git', '-C', cwd]
-
-    while cwd and cwd != os.sep:
-        gitdir = os.path.join(cwd, '.git')
-
-        if os.path.isdir(gitdir):
-            return ['git', '--git-dir=%s' % gitdir, '--work-tree=%s' % cwd]
-
-        cwd = os.path.dirname(cwd)
-
-    return None
-
-
-@requires_segment_info
-class GitStatusSegment(Segment):
-
-    @staticmethod
-    def execute(pl, command):
-        pl.debug('Executing command: %s' % ' '.join(command))
-
-        git_env = os.environ.copy()
-        git_env['LC_ALL'] = 'C'
-
-        proc = Popen(command, stdout=PIPE, stderr=PIPE, env=git_env)
-        out, err = [item.decode('utf-8') for item in proc.communicate()]
-
-        if out:
-            pl.debug('Command output: %s' % out.strip(string.whitespace))
-        if err:
-            pl.debug('Command errors: %s' % err.strip(string.whitespace))
-
-        return out.splitlines(), err.splitlines()
-
-    def __call__(self, pl, segment_info, use_dash_c=True, show_tag=False, formats=None, detached_head_style='revision'):
-        if formats is None:
-            formats = {}
-        pl.debug('Running gitstatus %s -C' % ('with' if use_dash_c else 'without'))
-
-        cwd = segment_info['getcwd']()
-
-        if not cwd:
-            return
-
-        base = get_base_command(cwd, use_dash_c)
-
-        if not base:
-            return
-
-        status, err = self.execute(pl, base + ['status', '--branch', '--porcelain'])
-
-        if err and ('error' in err[0] or 'fatal' in err[0]):
-            return
-
-        branch, detached, behind, ahead = parse_branch(status.pop(0))
-
-        if not branch:
-            return
-
-        if branch == 'HEAD':
-            if detached_head_style == 'revision':
-                branch = self.execute(pl, base + ['rev-parse', '--short', 'HEAD'])[0][0]
-            elif detached_head_style == 'ref':
-                branch = self.execute(pl, base + ['describe', '--contains', '--all'])[0][0]
-
-        staged, unmerged, changed, untracked = parse_status(status)
-
-        stashed = len(self.execute(pl, base + ['stash', 'list', '--no-decorate'])[0])
-
-        if not show_tag:
-            tag, err = [''], False
-        elif show_tag == 'contains':
-            tag, err = self.execute(pl, base + ['describe', '--contains'])
-        elif show_tag == 'last':
-            tag, err = self.execute(pl, base + ['describe', '--tags'])
-        elif show_tag == 'annotated':
-            tag, err = self.execute(pl, base + ['describe'])
-        else:
-            tag, err = self.execute(pl, base + ['describe', '--tags', '--exact-match', '--abbrev=0'])
-
-        if err and ('error' in err[0] or 'fatal' in err[0] or 'Could not get sha1 for HEAD' in err[0]):
-            tag = ''
-        else:
-            tag = tag[0]
-
-        return build_segments(formats, branch, detached, tag, behind, ahead, staged, unmerged, changed, untracked, stashed)
-
-
-gitstatus = with_docstring(GitStatusSegment(),
-'''Return the status of a Git working copy.
-It will show the branch-name, or the commit hash if in detached head state.
-It will also show the number of commits behind, commits ahead, staged files,
-unmerged files (conflicts), changed files, untracked files and stashed files
-if that number is greater than zero.
-:param bool use_dash_c:
-    Call git with ``-C``, which is more performant and accurate, but requires git 1.8.5 or higher.
-    Otherwise it will traverse the current working directory up towards the root until it finds a ``.git`` directory, then use ``--git-dir`` and ``--work-tree``.
-    True by default.
-:param bool show_tag:
-    Show tag description. Valid options are``contains``, ``last``, ``annotated`` and ``exact``. A value of True behaves the same as ``exact``, which only displays a tag when it's assigned to the currently checked-out revision.
-    False by default, because it needs to execute git an additional time.
-:param dict formats:
-    A string-to-string dictionary for customizing Git status formats. Valid keys include ``branch``, ``tag``, ``ahead``, ``behind``, ``staged``, ``unmerged``, ``changes``, ``untracked``, and ``stashed``.
-    Empty dictionary by default, which means the default formats are used.
-:param detached_head_style:
-    Display style when in detached HEAD state. Valid values are ``revision``, which shows the current revision id, and ``ref``, which shows the closest reachable ref object.
-    The default is ``revision``.
-Divider highlight group used: ``gitstatus:divider``.
-Highlight groups used: ``gitstatus_branch_detached``, ``gitstatus_branch_dirty``, ``gitstatus_branch_clean``, ``gitstatus_branch``, ``gitstatus_tag``, ``gitstatus_behind``, ``gitstatus_ahead``, ``gitstatus_staged``, ``gitstatus_unmerged``, ``gitstatus_changed``, ``gitstatus_untracked``, ``gitstatus_stashed``, ``gitstatus``.
-''')
diff --git a/powerline_shell/segments/git_test.py b/powerline_shell/segments/git_test.py
deleted file mode 100644
index a754cd7..0000000
--- a/powerline_shell/segments/git_test.py
+++ /dev/null
@@ -1,216 +0,0 @@
-# vim:fileencoding=utf-8:noet
-
-from powerline.segments import Segment, with_docstring
-from powerline.theme import requires_segment_info
-from subprocess import PIPE, Popen
-import os, re, string
-
-
-def build_segments(formats, branch, detached, tag, behind, ahead, staged, unmerged, changed, untracked,
-                   stashed):
-    if detached:
-        branch_group = 'gitstatus_branch_detached'
-    elif staged or unmerged or changed or untracked:
-        branch_group = 'gitstatus_branch_dirty'
-    else:
-        branch_group = 'gitstatus_branch_clean'
-
-    segments = [
-        {'contents': formats.get('branch', u'\ue0a0 {}').format(branch),
-         'highlight_groups': [branch_group, 'gitstatus_branch', 'gitstatus'],
-         'divider_highlight_group': 'gitstatus:divider'}
-    ]
-
-    if tag:
-        segments.append({'contents': formats.get('tag', u' \u2605 {}').format(tag),
-                         'highlight_groups': ['gitstatus_tag', 'gitstatus'],
-                         'divider_highlight_group': 'gitstatus:divider'})
-    if behind:
-        segments.append({'contents': formats.get('behind', ' ↓ {}').format(behind),
-                         'highlight_groups': ['gitstatus_behind', 'gitstatus'],
-                         'divider_highlight_group': 'gitstatus:divider'})
-    if ahead:
-        segments.append({'contents': formats.get('ahead', ' ↑ {}').format(ahead),
-                         'highlight_groups': ['gitstatus_ahead', 'gitstatus'],
-                         'divider_highlight_group': 'gitstatus:divider'})
-    if staged:
-        segments.append({'contents': formats.get('staged', ' ● {}').format(staged),
-                         'highlight_groups': ['gitstatus_staged', 'gitstatus'],
-                         'divider_highlight_group': 'gitstatus:divider'})
-    if unmerged:
-        segments.append({'contents': formats.get('unmerged', ' ✖ {}').format(unmerged),
-                         'highlight_groups': ['gitstatus_unmerged', 'gitstatus'],
-                         'divider_highlight_group': 'gitstatus:divider'})
-    if changed:
-        segments.append({'contents': formats.get('changed', ' ✚ {}').format(changed),
-                         'highlight_groups': ['gitstatus_changed', 'gitstatus'],
-                         'divider_highlight_group': 'gitstatus:divider'})
-    if untracked:
-        segments.append({'contents': formats.get('untracked', ' … {}').format(untracked),
-                         'highlight_groups': ['gitstatus_untracked', 'gitstatus'],
-                         'divider_highlight_group': 'gitstatus:divider'})
-    if stashed:
-        segments.append({'contents': formats.get('stashed', ' ⚑ {}').format(stashed),
-                         'highlight_groups': ['gitstatus_stashed', 'gitstatus'],
-                         'divider_highlight_group': 'gitstatus:divider'})
-
-    return segments
-
-
-def parse_status(lines):
-    staged = len(
-        [True for l in lines if l[0] in 'MRC' or (l[0] == 'D' and l[1] != 'D') or (l[0] == 'A' and l[1] != 'A')])
-    unmerged = len([True for l in lines if
-                    l[0] == 'U' or l[1] == 'U' or (l[0] == 'A' and l[1] == 'A') or (l[0] == 'D' and l[1] == 'D')])
-    changed = len([True for l in lines if l[1] == 'M' or (l[1] == 'D' and l[0] != 'D')])
-    untracked = len([True for l in lines if l[0] == '?'])
-
-    return staged, unmerged, changed, untracked
-
-
-def parse_branch(line):
-    if not line:
-        return '', False, 0, 0
-
-    if line.startswith('## '):
-        line = line[3:]
-
-    match = re.search('^Initial commit on (.+)$', line)
-    if match is not None:
-        return match.group(1), False, 0, 0
-
-    match = re.search('^(.+) \(no branch\)$', line)
-    if match is not None:
-        return match.group(1), True, 0, 0
-
-    match = re.search('^(.+?)\.\.\.', line)
-    if match is not None:
-        branch = match.group(1)
-
-        match = re.search('\[ahead (\d+), behind (\d+)\]$', line)
-        if match is not None:
-            return branch, False, int(match.group(2)), int(match.group(1))
-        match = re.search('\[ahead (\d+)\]$', line)
-        if match is not None:
-            return branch, False, 0, int(match.group(1))
-        match = re.search('\[behind (\d+)\]$', line)
-        if match is not None:
-            return branch, False, int(match.group(1)), 0
-
-        return branch, False, 0, 0
-
-    return line, False, 0, 0
-
-
-def get_base_command(cwd, use_dash_c):
-    if use_dash_c:
-        return ['git', '-C', cwd]
-
-    while cwd and cwd != os.sep:
-        gitdir = os.path.join(cwd, '.git')
-
-        if os.path.isdir(gitdir):
-            return ['git', '--git-dir=%s' % gitdir, '--work-tree=%s' % cwd]
-
-        cwd = os.path.dirname(cwd)
-
-    return None
-
-
-@requires_segment_info
-class GitStatusSegment(Segment):
-
-    @staticmethod
-    def execute(pl, command):
-        pl.debug('Executing command: %s' % ' '.join(command))
-
-        git_env = os.environ.copy()
-        git_env['LC_ALL'] = 'C'
-
-        proc = Popen(command, stdout=PIPE, stderr=PIPE, env=git_env)
-        out, err = [item.decode('utf-8') for item in proc.communicate()]
-
-        if out:
-            pl.debug('Command output: %s' % out.strip(string.whitespace))
-        if err:
-            pl.debug('Command errors: %s' % err.strip(string.whitespace))
-
-        return out.splitlines(), err.splitlines()
-
-    def __call__(self, pl, segment_info, use_dash_c=True, show_tag=False, formats=None, detached_head_style='revision'):
-        if formats is None:
-            formats = {}
-        pl.debug('Running gitstatus %s -C' % ('with' if use_dash_c else 'without'))
-
-        cwd = segment_info['getcwd']()
-
-        if not cwd:
-            return
-
-        base = get_base_command(cwd, use_dash_c)
-
-        if not base:
-            return
-
-        status, err = self.execute(pl, base + ['status', '--branch', '--porcelain'])
-
-        if err and ('error' in err[0] or 'fatal' in err[0]):
-            return
-
-        branch, detached, behind, ahead = parse_branch(status.pop(0))
-
-        if not branch:
-            return
-
-        if branch == 'HEAD':
-            if detached_head_style == 'revision':
-                branch = self.execute(pl, base + ['rev-parse', '--short', 'HEAD'])[0][0]
-            elif detached_head_style == 'ref':
-                branch = self.execute(pl, base + ['describe', '--contains', '--all'])[0][0]
-
-        staged, unmerged, changed, untracked = parse_status(status)
-
-        stashed = len(self.execute(pl, base + ['stash', 'list', '--no-decorate'])[0])
-
-        if not show_tag:
-            tag, err = [''], False
-        elif show_tag == 'contains':
-            tag, err = self.execute(pl, base + ['describe', '--contains'])
-        elif show_tag == 'last':
-            tag, err = self.execute(pl, base + ['describe', '--tags'])
-        elif show_tag == 'annotated':
-            tag, err = self.execute(pl, base + ['describe'])
-        else:
-            tag, err = self.execute(pl, base + ['describe', '--tags', '--exact-match', '--abbrev=0'])
-
-        if err and ('error' in err[0] or 'fatal' in err[0] or 'Could not get sha1 for HEAD' in err[0]):
-            tag = ''
-        else:
-            tag = tag[0]
-
-        return build_segments(formats, branch, detached, tag, behind, ahead, staged, unmerged, changed, untracked,
-                                   stashed)
-
-
-gitstatus = with_docstring(GitStatusSegment(),
-                           '''Return the status of a Git working copy.
-It will show the branch-name, or the commit hash if in detached head state.
-It will also show the number of commits behind, commits ahead, staged files,
-unmerged files (conflicts), changed files, untracked files and stashed files
-if that number is greater than zero.
-:param bool use_dash_c:
-    Call git with ``-C``, which is more performant and accurate, but requires git 1.8.5 or higher.
-    Otherwise it will traverse the current working directory up towards the root until it finds a ``.git`` directory, then use ``--git-dir`` and ``--work-tree``.
-    True by default.
-:param bool show_tag:
-    Show tag description. Valid options are``contains``, ``last``, ``annotated`` and ``exact``. A value of True behaves the same as ``exact``, which only displays a tag when it's assigned to the currently checked-out revision.
-    False by default, because it needs to execute git an additional time.
-:param dict formats:
-    A string-to-string dictionary for customizing Git status formats. Valid keys include ``branch``, ``tag``, ``ahead``, ``behind``, ``staged``, ``unmerged``, ``changes``, ``untracked``, and ``stashed``.
-    Empty dictionary by default, which means the default formats are used.
-:param detached_head_style:
-    Display style when in detached HEAD state. Valid values are ``revision``, which shows the current revision id, and ``ref``, which shows the closest reachable ref object.
-    The default is ``revision``.
-Divider highlight group used: ``gitstatus:divider``.
-Highlight groups used: ``gitstatus_branch_detached``, ``gitstatus_branch_dirty``, ``gitstatus_branch_clean``, ``gitstatus_branch``, ``gitstatus_tag``, ``gitstatus_behind``, ``gitstatus_ahead``, ``gitstatus_staged``, ``gitstatus_unmerged``, ``gitstatus_changed``, ``gitstatus_untracked``, ``gitstatus_stashed``, ``gitstatus``.
-''')
diff --git a/powerline_shell/segments/git_url.py b/powerline_shell/segments/git_url.py
deleted file mode 100644
index c79510a..0000000
--- a/powerline_shell/segments/git_url.py
+++ /dev/null
@@ -1,50 +0,0 @@
-import os
-import subprocess
-from powerline_shell.symbols import *
-from powerline_shell.utils import RepoStats, ThreadedSegment, get_git_subprocess_env
-from powerline_shell.encoding import get_preferred_output_encoding, get_preferred_input_encoding, u
-
-try:
-    from shutil import wich  # Python-3.3 and later
-except ImportError:
-    which = lambda f: (lambda fp: os.path.exists(fp) and fp)(os.path.join('/usr/bin', f))
-
-
-def get_git_url():
-    if which('git'):
-        try:
-            p = subprocess.Popen(['git', 'config', '--get', 'remote.origin.url'],
-                                 stdout=subprocess.PIPE, stderr=subprocess.PIPE,
-                                 env=get_git_subprocess_env())
-        except OSError:
-            # Popen will throw an OSError if git is not found
-            return 0
-        pdata = p.communicate()
-        if p.returncode != 0:
-            return None
-        return pdata[0].decode(get_preferred_output_encoding()).rstrip('\n')
-    else:
-        eventlog.info('git command not found: cannot use this segment')
-        return 'None'
-
-
-class Segment(ThreadedSegment):
-    def run(self):
-        self.git_url = get_git_url()
-        self.logo = u(git.dump())
-        if 'bitbucket' in str(self.git_url):
-            self.logo = u(bitbucket.dump())
-        elif 'github' in str(self.git_url):
-            self.logo = u(github.dump())
-
-    def add_to_powerline(self):
-        self.join()
-        if not self.git_url:
-            return
-
-        bg = self.powerline.theme.GIT_URL_BG
-        fg = self.powerline.theme.GIT_URL_FG
-
-        sc = self.git_url if self.git_url != 'None' else ''
-        url_str = u'{0} {1} {2}'.format(self.logo, sc, RepoStats.symbols['url'])
-        self.powerline.append(url_str, fg, bg)
diff --git a/powerline_shell/segments/hg.py b/powerline_shell/segments/hg.py
deleted file mode 100644
index 2e99873..0000000
--- a/powerline_shell/segments/hg.py
+++ /dev/null
@@ -1,78 +0,0 @@
-import os
-import subprocess
-from powerline_shell.utils import RepoStats, ThreadedSegment, get_subprocess_env
-from powerline_shell.encoding import get_preferred_output_encoding, get_preferred_input_encoding
-
-
-def _get_hg_branch():
-    p = subprocess.Popen(["hg", "branch"],
-                         stdout=subprocess.PIPE,
-                         stderr=subprocess.PIPE,
-                         env=get_subprocess_env())
-    branch = p.communicate()[0].decode(get_preferred_output_encoding()).rstrip('\n')
-    return branch
-
-
-def parse_hg_stats(status):
-    stats = RepoStats()
-    for statusline in status:
-        if statusline[0] == "A":
-            stats.staged += 1
-        elif statusline[0] == "?":
-            stats.new += 1
-        else:  # [M]odified, [R]emoved, (!)missing
-            stats.changed += 1
-    return stats
-
-
-def _get_hg_status(output):
-    """This function exists to enable mocking the `hg status` output in tests.
-    """
-    return output[0].decode(get_preferred_output_encoding()).splitlines()
-
-
-def build_stats():
-    # Check to see if we are in a git directory
-    path = '/'
-    for p in os.getenv("PWD").split('/'):
-        path += p + '/'
-        if os.path.isdir(path+'.git'):
-            break
-        else:
-            return None, None
-    try:
-        p = subprocess.Popen(["hg", "status"],
-                             stdout=subprocess.PIPE,
-                             stderr=subprocess.PIPE,
-                             env=get_subprocess_env())
-    except OSError:
-        # Will be thrown if hg cannot be found
-        return None, None
-    pdata = p.communicate()
-    if p.returncode != 0:
-        return None, None
-    status = _get_hg_status(pdata)
-    stats = parse_hg_stats(status)
-    branch = _get_hg_branch()
-    return stats, branch
-
-
-class Segment(ThreadedSegment):
-    def run(self):
-        self.stats, self.branch = build_stats()
-
-    def add_to_powerline(self):
-        self.join()
-        if not self.stats:
-            return
-        bg = self.powerline.theme.REPO_CLEAN_BG
-        fg = self.powerline.theme.REPO_CLEAN_FG
-        if self.stats.dirty:
-            bg = self.powerline.theme.REPO_DIRTY_BG
-            fg = self.powerline.theme.REPO_DIRTY_FG
-        if self.powerline.segment_conf("vcs", "show_symbol"):
-            symbol = RepoStats().symbols["hg"] + " "
-        else:
-            symbol = ""
-        self.powerline.append(" " + symbol + self.branch + " ", fg, bg)
-        self.stats.add_to_powerline(self.powerline)
diff --git a/powerline_shell/segments/hostname.py b/powerline_shell/segments/hostname.py
deleted file mode 100644
index a7cbe9b..0000000
--- a/powerline_shell/segments/hostname.py
+++ /dev/null
@@ -1,30 +0,0 @@
-from powerline_shell.utils import BasicSegment
-from powerline_shell.color_compliment import stringToHashToColorAndOpposite
-from powerline_shell.colortrans import rgb2short
-from socket import gethostname
-
-
-class Segment(BasicSegment):
-    def add_to_powerline(self):
-        powerline = self.powerline
-        if powerline.segment_conf("hostname", "colorize"):
-            hostname = gethostname()
-            FG, BG = stringToHashToColorAndOpposite(hostname)
-            # if we operate on a dark background then
-            # we want the brighter color to always be the
-            # background color
-            if powerline.segment_conf("hostname", "dark") and sum(FG) > sum(BG):
-                FG,BG = BG,FG
-            FG, BG = (rgb2short(*color) for color in [FG, BG])
-            host_prompt = " %s " % hostname.split(".")[0]
-            powerline.append(host_prompt, FG, BG)
-        else:
-            if powerline.args.shell == "bash":
-                host_prompt = r" \h "
-            elif powerline.args.shell == "zsh":
-                host_prompt = " %m "
-            else:
-                host_prompt = " %s " % gethostname().split(".")[0]
-            powerline.append(host_prompt,
-                             powerline.theme.HOSTNAME_FG,
-                             powerline.theme.HOSTNAME_BG)
diff --git a/powerline_shell/segments/java_version.py b/powerline_shell/segments/java_version.py
deleted file mode 100644
index dca42a3..0000000
--- a/powerline_shell/segments/java_version.py
+++ /dev/null
@@ -1,21 +0,0 @@
-import subprocess
-from powerline_shell.utils import ThreadedSegment, decode
-
-
-class Segment(ThreadedSegment):
-    def run(self):
-        self.version = None
-        try:
-            output = decode(
-                subprocess.check_output(['java', '--version'],
-                                        stderr=subprocess.STDOUT))
-            self.version = output.split(' ')[0] if '-' in output else output
-        except OSError:
-            self.version = None
-
-    def add_to_powerline(self):
-        self.join()
-        if not self.version:
-            return
-        # FIXME no hard-coded colors
-        self.powerline.append(" " + self.version + " ", 15, 4)
diff --git a/powerline_shell/segments/jobs.py b/powerline_shell/segments/jobs.py
deleted file mode 100644
index 16fbf2b..0000000
--- a/powerline_shell/segments/jobs.py
+++ /dev/null
@@ -1,30 +0,0 @@
-import os
-import re
-import platform
-from powerline_shell.runcmd import Command
-from powerline_shell.utils import ThreadedSegment
-from powerline_shell.encoding import get_preferred_output_encoding, get_preferred_input_encoding
-
-
-class Segment(ThreadedSegment):
-    def run(self):
-        self.num_jobs = 0
-        if platform.system().startswith('CYGWIN'):
-            # cygwin ps is a special snowflake...
-            output_proc = Command(['ps', '-af'])
-            output = list(map(lambda l: int(l.split()[2].strip()),
-                              output_proc.text.splitlines()[1:]))
-            self.num_jobs = output.count(os.getppid()) - 1
-        else:
-            pppid_proc = Command(['ps', '-p', str(os.getppid()), '-oppid='])
-            pppid = pppid_proc.out
-            output_proc = Command(['ps', '-a', '-o', 'ppid'])
-            output = output_proc.text
-            self.num_jobs = len(re.findall(str(pppid), output)) - 1
-
-    def add_to_powerline(self):
-        self.join()
-        if self.num_jobs > 0:
-            self.powerline.append(' %d ' % self.num_jobs,
-                                  self.powerline.theme.JOBS_FG,
-                                  self.powerline.theme.JOBS_BG)
diff --git a/powerline_shell/segments/k8s.py b/powerline_shell/segments/k8s.py
deleted file mode 100644
index ba26603..0000000
--- a/powerline_shell/segments/k8s.py
+++ /dev/null
@@ -1,23 +0,0 @@
-from powerline_shell.runcmd import Command
-from powerline_shell.symbols import *
-from powerline_shell.utils import ThreadedSegment, decode
-from powerline_shell.encoding import get_preferred_output_encoding, get_preferred_input_encoding, u
-from shutil import which
-
-class Segment(ThreadedSegment):
-    def add_to_powerline(self):
-        self.logo = u(kubernetes.symbol)
-        self.kube_env = None
-        if which('kubectl'):
-            try:
-                self.cmd = Command(['kubectl', 'config', 'current-context'])
-                self.kube_env = self.cmd.text.rstrip()
-            except:
-                raise Exception('k8s: Not set')
-
-        if not self.kube_env:
-            return
-        self.line = "{0} {1}".format(self.logo, self.kube_env)
-        self.powerline.append( self.line,
-                         self.powerline.theme.KUBECONFIG_PATH_FG,
-                         self.powerline.theme.KUBECONFIG_PATH_BG)
diff --git a/powerline_shell/segments/newline.py b/powerline_shell/segments/newline.py
deleted file mode 100644
index 3445cd0..0000000
--- a/powerline_shell/segments/newline.py
+++ /dev/null
@@ -1,12 +0,0 @@
-from powerline_shell.utils import BasicSegment, warn
-
-
-class Segment(BasicSegment):
-    def add_to_powerline(self):
-        if self.powerline.args.shell == "tcsh":
-            warn("newline segment not supported for tcsh (yet?)")
-            return
-        self.powerline.append("\n",
-                              self.powerline.theme.RESET,
-                              self.powerline.theme.RESET,
-                              separator="")
diff --git a/powerline_shell/segments/node_version.py b/powerline_shell/segments/node_version.py
deleted file mode 100644
index 20e1ce4..0000000
--- a/powerline_shell/segments/node_version.py
+++ /dev/null
@@ -1,18 +0,0 @@
-import subprocess
-from powerline_shell.utils import ThreadedSegment
-from powerline_shell.encoding import get_preferred_output_encoding, get_preferred_input_encoding
-
-
-class Segment(ThreadedSegment):
-    def run(self):
-        try:
-            self.version = subprocess.check_output(['node', '--version']).decode(get_preferred_output_encoding()).rstrip()
-        except OSError:
-            self.version = None
-
-    def add_to_powerline(self):
-        self.join()
-        if not self.version:
-            return
-        # FIXME no hard-coded colors
-        self.powerline.append("node " + self.version, 15, 18)
diff --git a/powerline_shell/segments/npm_version.py b/powerline_shell/segments/npm_version.py
deleted file mode 100644
index dc99e8a..0000000
--- a/powerline_shell/segments/npm_version.py
+++ /dev/null
@@ -1,16 +0,0 @@
-import subprocess
-from powerline_shell.utils import ThreadedSegment
-from powerline_shell.encoding import get_preferred_output_encoding, get_preferred_input_encoding
-
-
-class Segment(ThreadedSegment):
-    def add_to_powerline(self):
-        try:
-            self.version = subprocess.check_output(["npm", "--version"],).decode(get_preferred_output_encoding()).rstrip()
-            #self.version = p1.communicate()[0].decode(get_preferred_output_encoding()).rstrip()
-        except OSError:
-            self.version = None
-
-        if self.version:
-            # FIXME no hard-coded colors
-            self.powerline.append("npm " + self.version, 15, 18)
diff --git a/powerline_shell/segments/osx_battery.py b/powerline_shell/segments/osx_battery.py
deleted file mode 100644
index b1a3a3d..0000000
--- a/powerline_shell/segments/osx_battery.py
+++ /dev/null
@@ -1,158 +0,0 @@
-from ..utils import BasicSegment, warn
-import os, subprocess, re
-
-LOW_BATTERY_THRESHOLD = 20
-
-class ChargeState:
-    def __init__(self, parent, name, glyph):
-        self.name = name
-        self.glyph = parent.powerline.segment_conf("battery", name, glyph)
-
-GLYPH_FULL = u"\U0001F50C "
-GLYPH_CHARGING = u"\u26A1"
-GLYPH_DISCHARGING = u"\u2301"
-
-GLYPH_BATT = u"\u2393"
-GLYPH_WALL = u"\u23E6"
-
-class Segment(BasicSegment):
-    def __init__(self, powerline, segment_def):
-        BasicSegment.__init__(self, powerline, segment_def)
-        self.sys_paths = ("/sys/class/power_supply/BAT0","/sys/class/power_supply/BAT1")
-        self.charge_state = {
-            "":                 ChargeState(self, "", ""),
-            None:               ChargeState(self, "None", "?"),
-            "charged":          ChargeState(self, "charged", GLYPH_FULL),
-            "discharging":      ChargeState(self, "discharging", GLYPH_DISCHARGING),
-            "charging":         ChargeState(self, "charging", GLYPH_CHARGING),
-            "finishing charge": ChargeState(self, "finishing charge", GLYPH_CHARGING)
-        }
-        self.charge_state["full"] = self.charge_state["charged"]
-        self.battery_state = {"":"", "battery":GLYPH_BATT, "ac":GLYPH_WALL}
-    
-    def add_to_powerline(self):
-        # See discussion in https://github.com/banga/powerline-shell/pull/204
-        # regarding the directory where battery info is saved
-        for dir_ in self.sys_paths:
-            if os.path.exists(dir_):
-                self.handle_sys_class(dir_)
-                return
-        if os.path.exists("/usr/bin/pmset"):
-            self.handle_pmset()
-            return
-        else:
-            #add support for other operating systems here
-            warn("battery directory could not be found")
-            return
-    
-    def low_battery_threshold(self):
-        '''
-        gets the user configured threshold for low battery mode
-        @return value between 0 and 100
-        '''
-        raw = self.powerline.segment_conf("battery","low",LOW_BATTERY_THRESHOLD)
-        lbt = raw if 0<raw and raw<100 else LOW_BATTERY_THRESHOLD
-        return lbt
-    
-    def handle_sys_class(self, dir_):
-        '''
-        Pull the batter info from the supplied proc file and send to powerline
-        @param dir_ path to a sys class battery file
-        '''
-        cap = -1
-        with open(os.path.join(dir_, "capacity")) as f:
-            cap = int(f.read().strip())
-        with open(os.path.join(dir_, "status")) as f:
-            status = f.read().strip()
-            test = db[status] if status in charge_state else status
-        self.display(status, cap)
-    
-    def handle_pmset(self):
-        '''
-        mac os x has pmset, but don't assume mac since all of Darwin could be 
-        using this tool.
-        '''
-        status = ""         # [charged|discharging|charging|finishing charge]
-        cap = -1            # capacity 0-100 as a string, -1 on error
-        source = "unknown"  # one of [battery|power]
-        
-        cmd = ["/usr/bin/pmset", "-g", "batt"]
-        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
-        lines = proc.communicate()[0].decode("utf-8").split("\n")
-        
-        for raw in lines:
-            line = raw.strip()
-            if "Now drawing from" in line:
-                source = "battery" if "'Battery Power'" in line else \
-                    ("ac" if "'AC Power'" in line else "")
-            elif "InternalBattery" in line:
-                m = re.search('([0-9]{1,3})%;', lines[1])
-                if m is not None:
-                    raw_cap = int(m.group(1))
-                    cap = raw_cap if (0<=raw_cap and raw_cap<=100) else -1
-                m = re.search('[0-9]{1,3}%; ([a-zA-Z ]+);', lines[1])
-                if m is not None:
-                    status = m.group(1).strip()
-                break
-        self.display(status, cap, source)
-    
-    def display(self, raw_status, raw_cap, raw_source="unknown"):
-        '''
-        sends formated text to powerline, displays lots of things when needed
-        The primary output is in the format of "source capacity state". Source
-        is battery or ac, capacity is battery charge, and state is the charge
-        state (charging, discharging, full).
-        * source: battery/ac, glyph, always displays
-        * charge: percent charge, number, may be hidden if 100%
-        * state: charge direction, glyph, always displays
-        Style changes if state is very low
-        @return status charging status is one of [charged|discharging|charging|finishing charge]
-        @cap capacity 0-100 as a string
-        '''
-        status = raw_status.strip().lower()
-        source = raw_source.strip().lower()
-        cap = int(raw_cap)
-        if cap<0 or 100<cap:
-            warn ("'%d' is not a valid battery capacity" % cap)
-        format = "{src:s} {cap:d}% {pow:s}"
-        ################
-        # set display options based on source
-        #print (source)
-        src = self.battery_state[source] if source in self.battery_state else "?"
-        ################
-        # set display options based on capacity
-        if cap < self.low_battery_threshold() and source!="ac":
-            # need human to take note of this state
-            bg = self.powerline.theme.BATTERY_LOW_BG
-            fg = self.powerline.theme.BATTERY_LOW_FG
-        else:
-            bg = self.powerline.theme.BATTERY_NORMAL_BG
-            fg = self.powerline.theme.BATTERY_NORMAL_FG
-        
-        '''
-        if status == "Full":
-            if self.powerline.segment_conf("battery", "always_show_percentage", False):
-                pwr_fmt = u" {cap:d}% \U0001F50C "
-            else:
-                pwr_fmt = u" \U0001F50C "
-        elif status == "Charging":
-            pwr_fmt = u" {cap:d}% \u26A1 "
-        else:
-            pwr_fmt = " {cap:d}% "
-
-        if cap < self.powerline.segment_conf("battery", "low_threshold", 20):
-        '''
-        ################
-        # set display options based on status
-        if len(status)==0:
-            pwr = u""   # no status giving, display nothing
-        elif status in self.charge_state:
-            pwr = self.charge_state[status].glyph
-            #handle exceptions to the default behavior
-            if status == "charged":
-                if not self.powerline.segment_conf("battery", "always_show_percentage", False):
-                    format = "{src:s} {pow:s}"
-        else:
-            pwr = u"?"  #unknown state
-        
-        self.powerline.append(format.format(src=src, cap=cap, pow=pwr), fg, bg)
\ No newline at end of file
diff --git a/powerline_shell/segments/php_version.py b/powerline_shell/segments/php_version.py
deleted file mode 100644
index 2b36812..0000000
--- a/powerline_shell/segments/php_version.py
+++ /dev/null
@@ -1,22 +0,0 @@
-from powerline_shell.runcmd import Command
-from powerline_shell.symbols import *
-from powerline_shell.utils import ThreadedSegment, decode
-from powerline_shell.encoding import u
-
-
-class Segment(ThreadedSegment):
-    def run(self):
-        self.version = None
-        try:
-            output = Command(['php', '-r', 'echo PHP_VERSION;'])
-            self.version = output.text.split('-')[0] if '-' in output.text else output.text
-            self.logo = u(php.symbol)
-        except OSError:
-            self.version = None
-
-    def add_to_powerline(self):
-        self.join()
-        if not self.version:
-            return
-        # FIXME no hard-coded colors
-        self.powerline.append(self.logo + self.version + " ", 15, 4)
diff --git a/powerline_shell/segments/private_ip.py b/powerline_shell/segments/private_ip.py
deleted file mode 100644
index 74c8722..0000000
--- a/powerline_shell/segments/private_ip.py
+++ /dev/null
@@ -1,79 +0,0 @@
-import re
-from powerline_shell.runcmd import Command
-from ..utils import ThreadedSegment
-
-
-class Defaults:
-    INTERFACE = "en0"
-    SHOW_OFFLINE = True
-
-
-def ifconfig_parser(output):
-    pattern = "inet (addr:)?(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"
-    matches = re.findall(pattern, output)
-    if len(matches) == 0:
-        return None
-    else:
-        _, value = matches[0]
-        ip = value
-    return ip
-
-
-class PrivateIp:
-    def get(self, interface):
-        ip = self.strategy_ifconfig(interface, ifconfig_parser)
-        return ip if ip else self.strategy_hostname()
-
-    @staticmethod
-    def strategy_ifconfig(interface, parser):
-        try:
-            proc = Command(["ifconfig", interface])
-
-            res = proc.out
-            err = proc.err
-
-            return None if err else parser(res)
-
-        except OSError:
-            return None
-
-    @staticmethod
-    def strategy_hostname():
-        try:
-            proc = Command(["hostname", "-i"])
-            res, err = proc.text
-            res = res.decode("utf-8").rstrip()
-
-            return None if err else res
-
-        except OSError:
-            return None
-
-
-class Segment(ThreadedSegment):
-    def run(self):
-        try:
-            interface = self.powerline.segment_conf(
-                "private_ip", "interface", Defaults.INTERFACE)
-
-            private_ip = PrivateIp()
-            ip = private_ip.get(interface)
-            self.ip = ip
-            # self.info("this is a message")
-        except OSError:
-            self.ip = None
-
-    def add_to_powerline(self):
-        self.join()
-        powerline = self.powerline
-        theme = powerline.theme
-        show_offline = powerline.segment_conf(
-            "private_ip", "show_offline", Defaults.SHOW_OFFLINE)
-
-        if self.ip:
-            return powerline.append(" " + self.ip + " ",
-                                    theme.PRIVATE_IP_FG, theme.PRIVATE_IP_BG)
-
-        if show_offline:
-            powerline.append(
-                " Offline ", theme.PRIVATE_IP_FG, theme.PRIVATE_IP_OFFLINE)
diff --git a/powerline_shell/segments/python_version.py b/powerline_shell/segments/python_version.py
deleted file mode 100644
index 75d13af..0000000
--- a/powerline_shell/segments/python_version.py
+++ /dev/null
@@ -1,34 +0,0 @@
-import os
-from powerline_shell.runcmd import Command
-from powerline_shell.symbols import *
-from powerline_shell.utils import ThreadedSegment, decode
-from powerline_shell.color_compliment import stringToHashToColorAndOpposite, rgb2short
-from powerline_shell.encoding import u
-
-try:
-    from shutil import wich  # Python-3.3 and later
-except ImportError:
-    which = lambda f: (lambda fp: os.path.exists(fp) and fp)(os.path.join('/usr/bin', f))
-
-
-class Segment(ThreadedSegment):
-    def run(self):
-        self.logo = u(python.symbol)
-        self.version = None
-        try:
-            if which('python'):
-                self.cmd = Command(["python", "--version"])
-                self.version = self.cmd.out[1]
-                FG, nil = stringToHashToColorAndOpposite(self.version)
-                self.FG, self.nil = (rgb2short(*color) for color in [FG, nil])
-                self.FG += 32
-                self.BG = self.powerline.theme.PYTHON_VERSION_BG
-        except OSError:
-            self.version = None
-        self.line = "{0} {1}".format(self.logo, self.version)
-
-    def add_to_powerline(self):
-        self.join()
-        if not self.version:
-            return
-        self.powerline.append(self.line, self.FG, self.BG)
diff --git a/powerline_shell/segments/rbenv.py b/powerline_shell/segments/rbenv.py
deleted file mode 100644
index f88d2e7..0000000
--- a/powerline_shell/segments/rbenv.py
+++ /dev/null
@@ -1,18 +0,0 @@
-import subprocess
-from powerline_shell.utils import BasicSegment
-from powerline_shell.encoding import get_preferred_output_encoding
-
-
-class Segment(BasicSegment):
-    def add_to_powerline(self):
-        powerline = self.powerline
-        try:
-            version = subprocess.check_output(["rbenv", "local"]).decode(get_preferred_output_encoding()).rstrip()
-            # version = p1.communicate()[0].decode(get_preferred_output_encoding()).rstrip()
-            if len(version) <= 0:
-                return
-            powerline.append(' %s ' % version,
-                             powerline.theme.VIRTUAL_ENV_FG,
-                             powerline.theme.VIRTUAL_ENV_BG)
-        except OSError:
-            return
diff --git a/powerline_shell/segments/read_only.py b/powerline_shell/segments/read_only.py
deleted file mode 100644
index 341cf16..0000000
--- a/powerline_shell/segments/read_only.py
+++ /dev/null
@@ -1,11 +0,0 @@
-import os
-from powerline_shell.utils import BasicSegment
-
-
-class Segment(BasicSegment):
-    def add_to_powerline(self):
-        powerline = self.powerline
-        if not os.access(powerline.cwd, os.W_OK):
-            powerline.append(' %s ' % powerline.lock,
-                             powerline.theme.READONLY_FG,
-                             powerline.theme.READONLY_BG)
diff --git a/powerline_shell/segments/root.py b/powerline_shell/segments/root.py
deleted file mode 100644
index 02d7ffc..0000000
--- a/powerline_shell/segments/root.py
+++ /dev/null
@@ -1,18 +0,0 @@
-from powerline_shell.utils import BasicSegment
-
-
-class Segment(BasicSegment):
-    def add_to_powerline(self):
-        powerline = self.powerline
-        root_indicators = {
-            'bash': '\\$',
-            'tcsh': '%#',
-            'zsh': '%#',
-            'bare': '$',
-        }
-        bg = powerline.theme.CMD_PASSED_BG
-        fg = powerline.theme.CMD_PASSED_FG
-        if powerline.args.prev_error != 0:
-            fg = powerline.theme.CMD_FAILED_FG
-            bg = powerline.theme.CMD_FAILED_BG
-        powerline.append(root_indicators[powerline.args.shell], fg, bg, sanitize=False)
diff --git a/powerline_shell/segments/ruby_version.py b/powerline_shell/segments/ruby_version.py
deleted file mode 100644
index cd29137..0000000
--- a/powerline_shell/segments/ruby_version.py
+++ /dev/null
@@ -1,34 +0,0 @@
-import os
-from powerline_shell.symbols import *
-from powerline_shell.runcmd import Command
-from powerline_shell.utils import ThreadedSegment, decode
-from powerline_shell.color_compliment import stringToHashToColorAndOpposite, rgb2short
-from powerline_shell.encoding import u
-
-try:
-    from shutil import wich  # Python-3.3 and later
-except ImportError:
-    which = lambda f: (lambda fp: os.path.exists(fp) and fp)(os.path.join('/usr/bin', f))
-
-
-class Segment(ThreadedSegment):
-    def run(self):
-        self.logo = u(ruby.symbol)
-        try:
-            if which('ruby'):
-                self.version = Command(["ruby", "-v"])).out[1]
-                try:
-                    self.FG, self.BG = self.powerline.theme.RUBY_VERSION_FG, self.powerline.theme.RUBY_VERSION_BG
-                except:
-                    FG, BG = stringToHashToColorAndOpposite(self.version)
-                    self.FG, self.BG = (rgb2short(*color) for color in [FG, BG])
-                    self.FG += 32
-        except OSError:
-            self.version = None
-        self.line = "{0} {1}".format(self.logo, self.version)
-
-    def add_to_powerline(self):
-        self.join()
-        if not self.version:
-            return
-        self.powerline.append(self.line, self.FG, self.BG)
diff --git a/powerline_shell/segments/set_term_title.py b/powerline_shell/segments/set_term_title.py
deleted file mode 100644
index f2de228..0000000
--- a/powerline_shell/segments/set_term_title.py
+++ /dev/null
@@ -1,22 +0,0 @@
-import os
-import socket
-from powerline_shell.utils import BasicSegment
-
-
-class Segment(BasicSegment):
-    def add_to_powerline(self):
-        powerline = self.powerline
-        term = os.getenv('TERM')
-        if not (('xterm' in term) or ('rxvt' in term)):
-            return
-        if powerline.args.shell == 'bash':
-            set_title = '\\[\\e]0;\\u@\\h: \\w\\a\\]'
-        elif powerline.args.shell == 'zsh':
-            set_title = '%{\033]0;%n@%m: %~\007%}'
-        else:
-            set_title = '\033]0;%s@%s: %s\007' % (
-                os.getenv('USER'),
-                socket.gethostname().split('.')[0],
-                powerline.cwd,
-            )
-        powerline.append(set_title, None, None, '')
diff --git a/powerline_shell/segments/ssh.py b/powerline_shell/segments/ssh.py
deleted file mode 100644
index dce3639..0000000
--- a/powerline_shell/segments/ssh.py
+++ /dev/null
@@ -1,11 +0,0 @@
-import os
-from powerline_shell.utils import BasicSegment
-
-
-class Segment(BasicSegment):
-    def add_to_powerline(self):
-        if os.getenv('SSH_CLIENT'):
-            powerline = self.powerline
-            powerline.append(' %s ' % powerline.network,
-                             powerline.theme.SSH_FG,
-                             powerline.theme.SSH_BG)
diff --git a/powerline_shell/segments/stdout.py b/powerline_shell/segments/stdout.py
deleted file mode 100644
index 271495c..0000000
--- a/powerline_shell/segments/stdout.py
+++ /dev/null
@@ -1,18 +0,0 @@
-from powerline_shell.runcmd import Command
-from powerline_shell.utils import ThreadedSegment
-from powerline_shell.encoding import get_preferred_output_encoding, get_preferred_input_encoding
-
-
-class Segment(ThreadedSegment):
-    def run(self):
-        cmd = Command(self.segment_def["command"])
-        self.output = cmd.out
-        # TODO handle OSError
-        # TODO handle no command defined or malformed
-
-    def add_to_powerline(self):
-        self.join()
-        self.powerline.append(
-            " %s " % self.output,
-            self.segment_def.get("fg_color", self.powerline.theme.PATH_FG),
-            self.segment_def.get("bg_color", self.powerline.theme.PATH_BG))
diff --git a/powerline_shell/segments/svn.py b/powerline_shell/segments/svn.py
deleted file mode 100644
index dc80a25..0000000
--- a/powerline_shell/segments/svn.py
+++ /dev/null
@@ -1,71 +0,0 @@
-import subprocess
-from powerline_shell.utils import ThreadedSegment, RepoStats, get_subprocess_env
-from powerline_shell.encoding import get_preferred_output_encoding, get_preferred_input_encoding
-
-
-def _get_svn_revision():
-    p = subprocess.Popen(["svn", "info", "--xml"],
-                         stdout=subprocess.PIPE,
-                         stderr=subprocess.PIPE,
-                         env=get_subprocess_env())
-    for line in p.communicate()[0].decode(get_preferred_output_encoding()).splitlines():
-        if "revision" in line:
-            revision = line.split("=")[1].split('"')[1]
-            break
-    return revision
-
-
-def parse_svn_stats(status):
-    stats = RepoStats()
-    for line in status:
-        if line[0] == "?":
-            stats.new += 1
-        elif line[0] == "C":
-            stats.conflicted += 1
-        elif line[0] in ["A", "D", "I", "M", "R", "!", "~"]:
-            stats.changed += 1
-    return stats
-
-
-def _get_svn_status(output):
-    """This function exists to enable mocking the `svn status` output in tests.
-    """
-    return output[0].decode(get_preferred_output_encoding()).splitlines()
-
-
-def build_stats():
-    try:
-        p = subprocess.Popen(['svn', 'status'],
-                             stdout=subprocess.PIPE, stderr=subprocess.PIPE,
-                             env=get_subprocess_env())
-    except OSError:
-        # Popen will throw an OSError if svn is not found
-        return None, None
-    pdata = p.communicate()
-    if p.returncode != 0 or pdata[1][:22] == b'svn: warning: W155007:':
-        return None, None
-    status = _get_svn_status(pdata)
-    stats = parse_svn_stats(status)
-    revision = _get_svn_revision()
-    return stats, revision
-
-
-class Segment(ThreadedSegment):
-    def run(self):
-        self.stats, self.revision = build_stats()
-
-    def add_to_powerline(self):
-        self.join()
-        if not self.stats:
-            return
-        bg = self.powerline.theme.REPO_CLEAN_BG
-        fg = self.powerline.theme.REPO_CLEAN_FG
-        if self.stats.dirty:
-            bg = self.powerline.theme.REPO_DIRTY_BG
-            fg = self.powerline.theme.REPO_DIRTY_FG
-        if self.powerline.segment_conf("vcs", "show_symbol"):
-            symbol = " " + RepoStats().symbols["svn"]
-        else:
-            symbol = ""
-        self.powerline.append(symbol + " rev " + self.revision + " ", fg, bg)
-        self.stats.add_to_powerline(self.powerline)
diff --git a/powerline_shell/segments/system_platform.py b/powerline_shell/segments/system_platform.py
deleted file mode 100644
index 7d541c9..0000000
--- a/powerline_shell/segments/system_platform.py
+++ /dev/null
@@ -1,31 +0,0 @@
-import platform
-from powerline_shell.utils import BasicSegment
-from powerline_shell.color_compliment import stringToHashToColorAndOpposite
-from powerline_shell.colortrans import rgb2short
-
-
-def get_cursor(version=None, prompt='\U0001F4BB '):
-    if version == 'Darwin':
-        prompt = ' \uf179'
-    elif version == 'Linux':
-        prompt = '\uf31a'
-    elif version == 'Windows':
-        prompt = '\ufab2'
-    else:
-        prompt = None
-    return prompt
-
-
-class Segment(BasicSegment):
-    def add_to_powerline(self):
-        powerline = self.powerline
-        system = platform.system()
-        try:
-            FG, BG = powerline.theme.PLATFORM_FG, powerline.theme.PLATFORM_BG
-        except:
-            FG, BG = stringToHashToColorAndOpposite(system)
-            FG, BG = (rgb2short(*color) for color in [FG, BG])
-        system_prompt = "{} ".format(get_cursor(system))
-        if not system_prompt:
-            return
-        powerline.append(system_prompt, FG, BG)
diff --git a/powerline_shell/segments/test.py b/powerline_shell/segments/test.py
deleted file mode 100644
index 2813834..0000000
--- a/powerline_shell/segments/test.py
+++ /dev/null
@@ -1,35 +0,0 @@
-import os
-import subprocess
-from powerline_shell.utils import BasicSegment
-from powerline_shell.color_compliment import stringToHashToColorAndOpposite, rgb2short
-from powerline_shell.encoding import get_preferred_output_encoding, get_preferred_input_encoding
-try:
-    from shutil import wich  # Python-3.3 and later
-except ImportError:
-    which = lambda f: (lambda fp: os.path.exists(fp) and fp)(os.path.join('/usr/bin', f))
-
-
-class Segment(BasicSegment):
-    def run(self):
-        self.logo = '\ue791 '
-        self.prompt = None
-        if which('ruby'):
-            try:
-                output = subprocess.check_output(['ruby', '-v'], stderr=subprocess.STDOUT).decode(get_preferred_output_encoding())
-                self.version = output.split(' ')[1]
-                self.prompt = " {}{} ".format(self.logo, self.version)
-            except OSError:
-                self.prompt = None
-
-    def add_to_powerline(self):
-        self.join()
-        powerline = self.powerline
-        if not self.prompt:
-            return None
-        try:
-            FG, BG = self.powerline.theme.RUBY_VERSION_BG, self.powerline.theme.RUBY_VERSION_FG
-        except:
-            FG, BG = stringToHashToColorAndOpposite(self.version)
-            FG, BG = (rgb2short(*color) for color in [FG, BG])
-        print(self.prompt)
-        powerline.append(self.prompt, FG, BG)
diff --git a/powerline_shell/segments/time.py b/powerline_shell/segments/time.py
deleted file mode 100644
index d5d8b73..0000000
--- a/powerline_shell/segments/time.py
+++ /dev/null
@@ -1,20 +0,0 @@
-from __future__ import absolute_import
-from powerline_shell.utils import BasicSegment
-import time
-
-
-class Segment(BasicSegment):
-    def add_to_powerline(self):
-        powerline = self.powerline
-        format = powerline.segment_conf('time', 'format')
-        if format:
-            time_ = ' %s ' % time.strftime(format)
-        elif powerline.args.shell == 'bash':
-            time_ = ' \\t '
-        elif powerline.args.shell == 'zsh':
-            time_ = ' %* '
-        else:
-            time_ = ' %s ' % time.strftime('%H:%M:%S')
-        powerline.append(time_,
-                         powerline.theme.TIME_FG,
-                         powerline.theme.TIME_BG)
diff --git a/powerline_shell/segments/uptime.py b/powerline_shell/segments/uptime.py
deleted file mode 100644
index 11745da..0000000
--- a/powerline_shell/segments/uptime.py
+++ /dev/null
@@ -1,21 +0,0 @@
-import re
-from powerline_chell import Command
-from powerline_shell.utils import BasicSegment
-from powerline_shell.encoding import get_preferred_output_encoding, get_preferred_input_encoding
-
-
-class Segment(BasicSegment):
-    def add_to_powerline(self):
-        powerline = self.powerline
-        try:
-            output = Command(['uptime'])
-            raw_uptime = re.search(r'(?<=up).+(?=,\s+\d+\s+user)', output.text).group(0)
-            day_search = re.search(r'\d+(?=\s+day)', output.text)
-            days = '' if not day_search else '%sd ' % day_search.group(0)
-            hour_search = re.search(r'\d{1,2}(?=:)', raw_uptime)
-            hours = '' if not hour_search else '%sh ' % hour_search.group(0)
-            minutes = re.search(r'(?<=:)\d{1,2}|\d{1,2}(?=\s+min)', raw_uptime).group(0)
-            uptime = u' %s%s%sm \u2191 ' % (days, hours, minutes)
-            powerline.append(uptime, powerline.theme.CWD_FG, powerline.theme.PATH_BG)
-        except OSError:
-            return
diff --git a/powerline_shell/segments/username.py b/powerline_shell/segments/username.py
deleted file mode 100644
index 4d61ea2..0000000
--- a/powerline_shell/segments/username.py
+++ /dev/null
@@ -1,21 +0,0 @@
-from powerline_shell.utils import BasicSegment
-import os
-import getpass
-
-
-class Segment(BasicSegment):
-    def add_to_powerline(self):
-        powerline = self.powerline
-        if powerline.args.shell == "bash":
-            user_prompt = r" \u "
-        elif powerline.args.shell == "zsh":
-            user_prompt = " %n "
-        else:
-            user_prompt = " %s " % os.getenv("USER")
-
-        if getpass.getuser() == "root":
-            bgcolor = powerline.theme.USERNAME_ROOT_BG
-        else:
-            bgcolor = powerline.theme.USERNAME_BG
-
-        powerline.append(user_prompt, powerline.theme.USERNAME_FG, bgcolor)
diff --git a/powerline_shell/segments/vcs_newline.py b/powerline_shell/segments/vcs_newline.py
deleted file mode 100644
index 6188795..0000000
--- a/powerline_shell/segments/vcs_newline.py
+++ /dev/null
@@ -1,30 +0,0 @@
-from powerline_shell.runcmd import Command
-from git import Git
-from ..utils import ThreadedSegment, warn
-
-
-def get_vcs_dir():
-    git = Git().is_git_dir()
-    hg_return_code = Command(['hg', 'status'])
-    svn_return_code = Command(['svn', 'info'])
-    if git or hg_return_code.exitcode == 0 or svn_return_code.exitcode == 0:
-        return True
-    else:
-        return False
-
-
-class Segment(ThreadedSegment):
-    def run(self):
-        self.in_vcs_dir = get_vcs_dir()
-
-    def add_to_powerline(self):
-        self.join()
-        if not self.in_vcs_dir:
-            return
-        if self.powerline.args.shell == "tcsh":
-            warn("newline segment not supported for tcsh (yet?)")
-            return
-        self.powerline.append("\n",
-                              self.powerline.theme.RESET,
-                              self.powerline.theme.RESET,
-                              separator=" ")
diff --git a/powerline_shell/segments/virtual_env.py b/powerline_shell/segments/virtual_env.py
deleted file mode 100644
index d6b3ecb..0000000
--- a/powerline_shell/segments/virtual_env.py
+++ /dev/null
@@ -1,18 +0,0 @@
-import os
-from powerline_shell.utils import BasicSegment
-
-
-class Segment(BasicSegment):
-    def add_to_powerline(self):
-        env = os.getenv('VIRTUAL_ENV') \
-              or os.getenv('CONDA_ENV_PATH') \
-              or os.getenv('CONDA_DEFAULT_ENV')
-        if os.getenv('VIRTUAL_ENV') \
-                and os.path.basename(env) == '.venv':
-            env = os.path.basename(os.path.dirname(env))
-        if not env:
-            return
-        env_name = os.path.basename(env)
-        bg = self.powerline.theme.VIRTUAL_ENV_BG
-        fg = self.powerline.theme.VIRTUAL_ENV_FG
-        self.powerline.append(" " + env_name + " ", fg, bg)
diff --git a/powerline_shell/segments/virtual_env_new.py b/powerline_shell/segments/virtual_env_new.py
deleted file mode 100644
index 59b4bb5..0000000
--- a/powerline_shell/segments/virtual_env_new.py
+++ /dev/null
@@ -1,21 +0,0 @@
-import os
-from powerline_shell.utils import BasicSegment
-
-
-class Segment(BasicSegment):
-    def add_to_powerline(self):
-        env = os.getenv('VIRTUAL_ENV') \
-              or os.getenv('CONDA_ENV_PATH') \
-              or os.getenv('CONDA_DEFAULT_ENV' \
-                           or os.getenv('POWERLINE_ENV_NAME'))
-        if os.getenv('VIRTUAL_ENV') \
-                and os.path.basename(env) == '.venv' and not os.getenv('POWERLINE_ENV_NAME'):
-            env = os.path.basename(os.path.dirname(env))
-        elif os.getenv('POWERLINE_ENV_NAME'):
-            env = os.getenv('POWERLINE_ENV_NAME')
-        if not env:
-            return
-        env_name = os.path.basename(env)
-        bg = self.powerline.theme.VIRTUAL_ENV_BG
-        fg = self.powerline.theme.VIRTUAL_ENV_FG
-        self.powerline.append(" " + env_name + " ", fg, bg)
diff --git a/powerline_shell/segments/wthr.py b/powerline_shell/segments/wthr.py
deleted file mode 100644
index d9d6307..0000000
--- a/powerline_shell/segments/wthr.py
+++ /dev/null
@@ -1,236 +0,0 @@
-# vim:fileencoding=utf-8:noet
-from __future__ import (unicode_literals, division, absolute_import, print_function)
-
-import json
-
-from powerline.lib.url import urllib_read, urllib_urlencode
-from powerline.lib.threaded import KwThreadedSegment
-from powerline.segments import with_docstring
-
-# XXX Warning: module name must not be equal to the segment name as long as this
-# segment is imported into powerline.segments.common module.
-
-
-# Weather condition code descriptions available at
-# http://developer.yahoo.com/weather/#codes
-weather_conditions_codes = (
-    ('tornado', 'stormy'),  # 0
-    ('tropical_storm', 'stormy'),  # 1
-    ('hurricane', 'stormy'),  # 2
-    ('severe_thunderstorms', 'stormy'),  # 3
-    ('thunderstorms', 'stormy'),  # 4
-    ('mixed_rain_and_snow', 'rainy'),  # 5
-    ('mixed_rain_and_sleet', 'rainy'),  # 6
-    ('mixed_snow_and_sleet', 'snowy'),  # 7
-    ('freezing_drizzle', 'rainy'),  # 8
-    ('drizzle', 'rainy'),  # 9
-    ('freezing_rain', 'rainy'),  # 10
-    ('showers', 'rainy'),  # 11
-    ('showers', 'rainy'),  # 12
-    ('snow_flurries', 'snowy'),  # 13
-    ('light_snow_showers', 'snowy'),  # 14
-    ('blowing_snow', 'snowy'),  # 15
-    ('snow', 'snowy'),  # 16
-    ('hail', 'snowy'),  # 17
-    ('sleet', 'snowy'),  # 18
-    ('dust', 'foggy'),  # 19
-    ('fog', 'foggy'),  # 20
-    ('haze', 'foggy'),  # 21
-    ('smoky', 'foggy'),  # 22
-    ('blustery', 'windy'),  # 23
-    ('windy',),  # 24
-    ('cold', 'day'),  # 25
-    ('clouds', 'cloudy'),  # 26
-    ('mostly_cloudy_night', 'cloudy'),  # 27
-    ('mostly_cloudy_day', 'cloudy'),  # 28
-    ('partly_cloudy_night', 'cloudy'),  # 29
-    ('partly_cloudy_day', 'cloudy'),  # 30
-    ('clear_night', 'night'),  # 31
-    ('sun', 'sunny'),  # 32
-    ('fair_night', 'night'),  # 33
-    ('fair_day', 'day'),  # 34
-    ('mixed_rain_and_hail', 'rainy'),  # 35
-    ('hot', 'sunny'),  # 36
-    ('isolated_thunderstorms', 'stormy'),  # 37
-    ('scattered_thunderstorms', 'stormy'),  # 38
-    ('scattered_thunderstorms', 'stormy'),  # 39
-    ('scattered_showers', 'rainy'),  # 40
-    ('heavy_snow', 'snowy'),  # 41
-    ('scattered_snow_showers', 'snowy'),  # 42
-    ('heavy_snow', 'snowy'),  # 43
-    ('partly_cloudy', 'cloudy'),  # 44
-    ('thundershowers', 'rainy'),  # 45
-    ('snow_showers', 'snowy'),  # 46
-    ('isolated_thundershowers', 'rainy'),  # 47
-)
-# ('day',    (25, 34)),
-# ('rainy',  (5, 6, 8, 9, 10, 11, 12, 35, 40, 45, 47)),
-# ('cloudy', (26, 27, 28, 29, 30, 44)),
-# ('snowy',  (7, 13, 14, 15, 16, 17, 18, 41, 42, 43, 46)),
-# ('stormy', (0, 1, 2, 3, 4, 37, 38, 39)),
-# ('foggy',  (19, 20, 21, 22, 23)),
-# ('sunny',  (32, 36)),
-# ('night',  (31, 33))):
-weather_conditions_icons = {
-    'day': 'DAY',
-    'blustery': 'WIND',
-    'rainy': 'RAIN',
-    'cloudy': 'CLOUDS',
-    'snowy': 'SNOW',
-    'stormy': 'STORM',
-    'foggy': 'FOG',
-    'sunny': 'SUN',
-    'night': 'NIGHT',
-    'windy': 'WINDY',
-    'not_available': 'NA',
-    'unknown': 'UKN',
-}
-
-temp_conversions = {
-    'C': lambda temp: temp,
-    'F': lambda temp: (temp * 9 / 5) + 32,
-    'K': lambda temp: temp + 273.15,
-}
-
-# Note: there are also unicode characters for units: ℃, ℉ and  K
-temp_units = {
-    'C': '°C',
-    'F': '°F',
-    'K': 'K',
-}
-
-
-class WeatherSegment(KwThreadedSegment):
-    interval = 600
-    default_location = None
-    location_urls = {}
-
-    @staticmethod
-    def key(location_query=None, **kwargs):
-        return location_query
-
-    def get_request_url(self, location_query):
-        try:
-            return self.location_urls[location_query]
-        except KeyError:
-            if location_query is None:
-                location_data = json.loads(urllib_read('http://geoip.nekudo.com/api/'))
-                location = ','.join((
-                    location_data['city'],
-                    location_data['country']['name'],
-                    location_data['country']['code']
-                ))
-                self.info('Location returned by nekudo is {0}', location)
-            else:
-                location = location_query
-            query_data = {
-                'q':
-                    'use "https://raw.githubusercontent.com/yql/yql-tables/master/weather/weather.bylocation.xml" as we;'
-                    'select * from weather.forecast where woeid in'
-                    ' (select woeid from geo.places(1) where text="{0}") and u="c"'.format(location).encode('utf-8'),
-                'format': 'json',
-            }
-            self.location_urls[location_query] = url = (
-                    'http://query.yahooapis.com/v1/public/yql?' + urllib_urlencode(query_data))
-            return url
-
-    def compute_state(self, location_query):
-        url = self.get_request_url(location_query)
-        raw_response = urllib_read(url)
-        if not raw_response:
-            self.error('Failed to get response')
-            return None
-
-        response = json.loads(raw_response)
-        try:
-            condition = response['query']['results']['channel']['item']['condition']
-            condition_code = int(condition['code'])
-            temp = float(condition['temp'])
-        except (KeyError, ValueError):
-            self.exception('Yahoo returned malformed or unexpected response: {0}', repr(raw_response))
-            return None
-
-        try:
-            icon_names = weather_conditions_codes[condition_code]
-        except IndexError:
-            if condition_code == 3200:
-                icon_names = ('not_available',)
-                self.warn('Weather is not available for location {0}', self.location)
-            else:
-                icon_names = ('unknown',)
-                self.error('Unknown condition code: {0}', condition_code)
-
-        return temp, icon_names
-
-    def render_one(self, weather, icons=None, unit='C', temp_format=None, temp_coldest=-30, temp_hottest=40, **kwargs):
-        if not weather:
-            return None
-
-        temp, icon_names = weather
-
-        for icon_name in icon_names:
-            if icons:
-                if icon_name in icons:
-                    icon = icons[icon_name]
-                    break
-        else:
-            icon = weather_conditions_icons[icon_names[-1]]
-
-        temp_format = temp_format or ('{temp:.0f}' + temp_units[unit])
-        converted_temp = temp_conversions[unit](temp)
-        if temp <= temp_coldest:
-            gradient_level = 0
-        elif temp >= temp_hottest:
-            gradient_level = 100
-        else:
-            gradient_level = (temp - temp_coldest) * 100.0 / (temp_hottest - temp_coldest)
-        groups = ['weather_condition_' + icon_name for icon_name in icon_names] + ['weather_conditions', 'weather']
-        return [
-            {
-                'contents': icon + ' ',
-                'highlight_groups': groups,
-                'divider_highlight_group': 'background:divider',
-            },
-            {
-                'contents': temp_format.format(temp=converted_temp),
-                'highlight_groups': ['weather_temp_gradient', 'weather_temp', 'weather'],
-                'divider_highlight_group': 'background:divider',
-                'gradient_level': gradient_level,
-            },
-        ]
-
-
-weather = with_docstring(WeatherSegment(),
-                         '''Return weather from Yahoo! Weather.
-
-Uses GeoIP lookup from http://geoip.nekudo.com to automatically determine
-your current location. This should be changed if you’re in a VPN or if your
-IP address is registered at another location.
-
-Returns a list of colorized icon and temperature segments depending on
-weather conditions.
-
-:param str unit:
-	temperature unit, can be one of ``F``, ``C`` or ``K``
-:param str location_query:
-	location query for your current location, e.g. ``oslo, norway``
-:param dict icons:
-	dict for overriding default icons, e.g. ``{'heavy_snow' : u'❆'}``
-:param str temp_format:
-	format string, receives ``temp`` as an argument. Should also hold unit.
-:param float temp_coldest:
-	coldest temperature. Any temperature below it will have gradient level equal
-	to zero.
-:param float temp_hottest:
-	hottest temperature. Any temperature above it will have gradient level equal
-	to 100. Temperatures between ``temp_coldest`` and ``temp_hottest`` receive
-	gradient level that indicates relative position in this interval
-	(``100 * (cur-coldest) / (hottest-coldest)``).
-
-Divider highlight group used: ``background:divider``.
-
-Highlight groups used: ``weather_conditions`` or ``weather``, ``weather_temp_gradient`` (gradient) or ``weather``.
-Also uses ``weather_conditions_{condition}`` for all weather conditions supported by Yahoo.
-''')
-
-print(weather.render_one())
diff --git a/powerline_shell/symbols.py b/powerline_shell/symbols.py
deleted file mode 100644
index 24a3df7..0000000
--- a/powerline_shell/symbols.py
+++ /dev/null
@@ -1,1494 +0,0 @@
-
-from peewee import *
-
-VERSION ='3.5.1'
-
-db = SqliteDatabase(':memory:')
-
-class BaseModel(Model):
-    class Meta:
-        database = db # The symbols.db
-
-class Symbols(BaseModel):
-    name = TextField()
-    symbol = CharField()
-
-    def __str__(self):
-        return (self.name)
-
-    def dump(self, _padding=False):
-        padding = ""
-        if _padding:
-            if isinstance(_padding, int):
-                padding = " " * _padding
-        return (padding + self.symbol + padding)
-
-
-accessible_icon = Symbols(name='accessible_icon', symbol='\uf368')
-accusoft = Symbols(name='accusoft', symbol='\uf369')
-acquisitions_incorporated = Symbols(name='acquisitions_incorporated', symbol='\uf6af')
-ad = Symbols(name='ad', symbol='\uf641')
-address_book = Symbols(name='address_book', symbol='\uf2b9')
-address_card = Symbols(name='address_card', symbol='\uf2bb')
-adjust = Symbols(name='adjust', symbol='\uf042')
-adn = Symbols(name='adn', symbol='\uf170')
-adobe = Symbols(name='adobe', symbol='\uf778')
-adversal = Symbols(name='adversal', symbol='\uf36a')
-affiliatetheme = Symbols(name='affiliatetheme', symbol='\uf36b')
-air_freshener = Symbols(name='air_freshener', symbol='\uf5d0')
-airbnb = Symbols(name='airbnb', symbol='\uf834')
-algolia = Symbols(name='algolia', symbol='\uf36c')
-align_center = Symbols(name='align_center', symbol='\uf037')
-align_justify = Symbols(name='align_justify', symbol='\uf039')
-align_left = Symbols(name='align_left', symbol='\uf036')
-align_right = Symbols(name='align_right', symbol='\uf038')
-alipay = Symbols(name='alipay', symbol='\uf642')
-allergies = Symbols(name='allergies', symbol='\uf461')
-amazon = Symbols(name='amazon', symbol='\uf270')
-amazon_pay = Symbols(name='amazon_pay', symbol='\uf42c')
-ambulance = Symbols(name='ambulance', symbol='\uf0f9')
-american_sign_language_interpreting = Symbols(name='american_sign_language_interpreting', symbol='\uf2a3')
-amilia = Symbols(name='amilia', symbol='\uf36d')
-anchor = Symbols(name='anchor', symbol='\uf13d')
-android = Symbols(name='android', symbol='\uf17b')
-angellist = Symbols(name='angellist', symbol='\uf209')
-angle_double_down = Symbols(name='angle_double_down', symbol='\uf103')
-angle_double_left = Symbols(name='angle_double_left', symbol='\uf100')
-angle_double_right = Symbols(name='angle_double_right', symbol='\uf101')
-angle_double_up = Symbols(name='angle_double_up', symbol='\uf102')
-angle_down = Symbols(name='angle_down', symbol='\uf107')
-angle_left = Symbols(name='angle_left', symbol='\uf104')
-angle_right = Symbols(name='angle_right', symbol='\uf105')
-angle_up = Symbols(name='angle_up', symbol='\uf106')
-angry = Symbols(name='angry', symbol='\uf556')
-angrycreative = Symbols(name='angrycreative', symbol='\uf36e')
-angular = Symbols(name='angular', symbol='\uf420')
-ankh = Symbols(name='ankh', symbol='\uf644')
-appcelerator = Symbols(name='appcelerator', symbol='\uf014')
-app_store = Symbols(name='app_store', symbol='\uf36f')
-app_store_ios = Symbols(name='app_store_ios', symbol='\uf370')
-apper = Symbols(name='apper', symbol='\uf371')
-apple = Symbols(name='apple', symbol='\uf179')
-apple_alt = Symbols(name='apple_alt', symbol='\uf5d1')
-apple_pay = Symbols(name='apple_pay', symbol='\uf415')
-aptana = Symbols(name='aptana', symbol='\uf016')
-archive = Symbols(name='archive', symbol='\uf187')
-archway = Symbols(name='archway', symbol='\uf557')
-arrow_alt_circle_down = Symbols(name='arrow_alt_circle_down', symbol='\uf358')
-arrow_alt_circle_left = Symbols(name='arrow_alt_circle_left', symbol='\uf359')
-arrow_alt_circle_right = Symbols(name='arrow_alt_circle_right', symbol='\uf35a')
-arrow_alt_circle_up = Symbols(name='arrow_alt_circle_up', symbol='\uf35b')
-arrow_circle_down = Symbols(name='arrow_circle_down', symbol='\uf0ab')
-arrow_circle_left = Symbols(name='arrow_circle_left', symbol='\uf0a8')
-arrow_circle_right = Symbols(name='arrow_circle_right', symbol='\uf0a9')
-arrow_circle_up = Symbols(name='arrow_circle_up', symbol='\uf0aa')
-arrow_down = Symbols(name='arrow_down', symbol='\uf063')
-arrow_left = Symbols(name='arrow_left', symbol='\uf060')
-arrow_right = Symbols(name='arrow_right', symbol='\uf061')
-arrow_up = Symbols(name='arrow_up', symbol='\uf062')
-arrows_alt = Symbols(name='arrows_alt', symbol='\uf0b2')
-arrows_alt_h = Symbols(name='arrows_alt_h', symbol='\uf337')
-arrows_alt_v = Symbols(name='arrows_alt_v', symbol='\uf338')
-artstation = Symbols(name='artstation', symbol='\uf77a')
-assistive_listening_systems = Symbols(name='assistive_listening_systems', symbol='\uf2a2')
-asterisk = Symbols(name='asterisk', symbol='\uf01a')
-asterisk_symbol = Symbols(name='asterisk_symbol', symbol='\uf069')
-asymmetrik = Symbols(name='asymmetrik', symbol='\uf372')
-at = Symbols(name='at', symbol='\uf1fa')
-atlas = Symbols(name='atlas', symbol='\uf558')
-atlassian = Symbols(name='atlassian', symbol='\uf77b')
-atom = Symbols(name='atom', symbol='\uf5d3')
-atom_alt = Symbols(name='atom_alt', symbol='\uf5d2')
-audible = Symbols(name='audible', symbol='\uf373')
-audio_description = Symbols(name='audio_description', symbol='\uf29e')
-autoprefixer = Symbols(name='autoprefixer', symbol='\uf41c')
-avianex = Symbols(name='avianex', symbol='\uf374')
-aviato = Symbols(name='aviato', symbol='\uf421')
-award = Symbols(name='award', symbol='\uf559')
-aws = Symbols(name='aws', symbol='\uf375')
-baby = Symbols(name='baby', symbol='\uf77c')
-baby_carriage = Symbols(name='baby_carriage', symbol='\uf77d')
-backbone = Symbols(name='backbone', symbol='\uf5d4')
-backspace = Symbols(name='backspace', symbol='\uf55a')
-backward = Symbols(name='backward', symbol='\uf04a')
-bacon = Symbols(name='bacon', symbol='\uf7e5')
-balance_scale = Symbols(name='balance_scale', symbol='\uf24e')
-ban = Symbols(name='ban', symbol='\uf05e')
-band_aid = Symbols(name='band_aid', symbol='\uf462')
-bandcamp = Symbols(name='bandcamp', symbol='\uf2d5')
-barcode = Symbols(name='barcode', symbol='\uf02a')
-bars = Symbols(name='bars', symbol='\uf0c9')
-baseball_ball = Symbols(name='baseball_ball', symbol='\uf433')
-basketball_ball = Symbols(name='basketball_ball', symbol='\uf434')
-bath = Symbols(name='bath', symbol='\uf2cd')
-battery_charged = Symbols(name='battery_twenty', symbol='\uf34b')
-battery_eighty= Symbols(name='battery_twenty', symbol='\uf348')
-battery_empty = Symbols(name='battery_empty', symbol=' \uf244 ')
-battery_error = Symbols(name='battery_twenty', symbol='\uf34a')
-battery_fifty= Symbols(name='battery_twenty', symbol='\uf345')
-battery_forty= Symbols(name='battery_twenty', symbol='\uf344')
-battery_full = Symbols(name='battery_full', symbol=' \uf240 ')
-battery_half = Symbols(name='battery_half', symbol=' \uf242 ')
-battery_hundred = Symbols(name='battery_twenty', symbol='\uf340')
-battery_negative = Symbols(name='battery_twenty', symbol='\uf354')
-battery_ninety= Symbols(name='battery_twenty', symbol='\uf349')
-battery_positive = Symbols(name='battery_twenty', symbol='\uf357')
-battery_quarter = Symbols(name='battery_quarter', symbol=' \uf243 ')
-battery_question = Symbols(name='battery_ten', symbol='\uf33f')
-battery_seventy= Symbols(name='battery_twenty', symbol='\uf347')
-battery_sixty= Symbols(name='battery_twenty', symbol='\uf346')
-battery_ten = Symbols(name='battery_ten', symbol='\uf341')
-battery_thirty= Symbols(name='battery_twenty', symbol='\uf343')
-battery_three_quarters = Symbols(name='battery_three_quarters', symbol=' \uf241 ')
-battery_twenty= Symbols(name='battery_twenty', symbol='\uf342')
-battery_zero = Symbols(name='battery_twenty', symbol='\uf355')
-battle_net = Symbols(name='battle_net', symbol='\uf835')
-bed = Symbols(name='bed', symbol='\uf236')
-beer = Symbols(name='beer', symbol='\uf0fc')
-behance = Symbols(name='behance', symbol='\uf1b4')
-behance_square = Symbols(name='behance_square', symbol='\uf1b5')
-bell = Symbols(name='bell', symbol='\uf0f3')
-bell_slash = Symbols(name='bell_slash', symbol='\uf1f6')
-bezier_curve = Symbols(name='bezier_curve', symbol='\uf55b')
-bible = Symbols(name='bible', symbol='\uf647')
-bicycle = Symbols(name='bicycle', symbol='\uf206')
-bimobject = Symbols(name='bimobject', symbol='\uf378')
-bing_small = Symbols(name='bing_small', symbol='')
-binoculars = Symbols(name='binoculars', symbol='\uf1e5')
-bintray = Symbols(name='bintray', symbol='\uf5db')
-biohazard = Symbols(name='biohazard', symbol='\uf780')
-birthday_cake = Symbols(name='birthday_cake', symbol='\uf1fd')
-bitbucket = Symbols(name='bitbucket', symbol='\uf172')
-bitbucket_logo = Symbols(name='bitbucket_logo', symbol='\uf171')
-bitcoin = Symbols(name='bitcoin', symbol='\uf379')
-bity = Symbols(name='bity', symbol='\uf37a')
-black_tie = Symbols(name='black_tie', symbol='\uf27e')
-blackberry = Symbols(name='blackberry', symbol='\uf37b')
-blender = Symbols(name='blender', symbol='\uf517')
-blender_phone = Symbols(name='blender_phone', symbol='\uf6b6')
-blind = Symbols(name='blind', symbol='\uf29d')
-blog = Symbols(name='blog', symbol='\uf781')
-blogger = Symbols(name='blogger', symbol='\uf37c')
-blogger_b = Symbols(name='blogger_b', symbol='\uf37d')
-bluetooth = Symbols(name='bluetooth', symbol='\uf293')
-bluetooth_b = Symbols(name='bluetooth_b', symbol='\uf294')
-bold = Symbols(name='bold', symbol='\uf032')
-bolt = Symbols(name='bolt', symbol='\uf0e7')
-bomb = Symbols(name='bomb', symbol='\uf1e2')
-bone = Symbols(name='bone', symbol='\uf5d7')
-bong = Symbols(name='bong', symbol='\uf55c')
-book = Symbols(name='book', symbol='\uf02d')
-book_dead = Symbols(name='book_dead', symbol='\uf6b7')
-book_medical = Symbols(name='book_medical', symbol='\uf7e6')
-book_open = Symbols(name='book_open', symbol='\uf518')
-book_reader = Symbols(name='book_reader', symbol='\uf5da')
-bookmark = Symbols(name='bookmark', symbol='\uf02e')
-bootstrap = Symbols(name='bootstrap', symbol='\uf836')
-bowling_ball = Symbols(name='bowling_ball', symbol='\uf436')
-bower = Symbols(name='bower', symbol='\uf5d5')
-box = Symbols(name='box', symbol='\uf466')
-box_open = Symbols(name='box_open', symbol='\uf49e')
-boxes = Symbols(name='boxes', symbol='\uf468')
-brackets = Symbols(name='brackets', symbol='\uf5d6')
-braille = Symbols(name='braille', symbol='\uf2a1')
-brain = Symbols(name='brain', symbol='\uf5dc')
-bread_slice = Symbols(name='bread_slice', symbol='\uf7ec')
-briefcase = Symbols(name='briefcase', symbol='\uf0b1')
-briefcase_medical = Symbols(name='briefcase_medical', symbol='\uf469')
-broadcast_tower = Symbols(name='broadcast_tower', symbol='\uf519')
-broom = Symbols(name='broom', symbol='\uf51a')
-brush = Symbols(name='brush', symbol='\uf55d')
-btc = Symbols(name='btc', symbol='\uf15a')
-buffer = Symbols(name='buffer', symbol='\uf837')
-bug = Symbols(name='bug', symbol='\uf188')
-building = Symbols(name='building', symbol='\uf1ad')
-bullhorn = Symbols(name='bullhorn', symbol='\uf0a1')
-bullseye = Symbols(name='bullseye', symbol='\uf140')
-burn = Symbols(name='burn', symbol='\uf46a')
-buromobelexperte = Symbols(name='buromobelexperte', symbol='\uf37f')
-bus = Symbols(name='bus', symbol='\uf207')
-bus_alt = Symbols(name='bus_alt', symbol='\uf55e')
-business_time = Symbols(name='business_time', symbol='\uf64a')
-buysellads = Symbols(name='buysellads', symbol='\uf20d')
-calculator = Symbols(name='calculator', symbol='\uf1ec')
-calendar = Symbols(name='calendar', symbol='\uf133')
-calendar_alt = Symbols(name='calendar_alt', symbol='\uf073')
-calendar_check = Symbols(name='calendar_check', symbol='\uf274')
-calendar_day = Symbols(name='calendar_day', symbol='\uf783')
-calendar_minus = Symbols(name='calendar_minus', symbol='\uf272')
-calendar_plus = Symbols(name='calendar_plus', symbol='\uf271')
-calendar_times = Symbols(name='calendar_times', symbol='\uf273')
-calendar_week = Symbols(name='calendar_week', symbol='\uf784')
-camera = Symbols(name='camera', symbol='\uf030')
-camera_retro = Symbols(name='camera_retro', symbol='\uf083')
-campground = Symbols(name='campground', symbol='\uf6bb')
-canadian_maple_leaf = Symbols(name='canadian_maple_leaf', symbol='\uf785')
-candy_cane = Symbols(name='candy_cane', symbol='\uf786')
-cannabis = Symbols(name='cannabis', symbol='\uf55f')
-capsules = Symbols(name='capsules', symbol='\uf46b')
-car = Symbols(name='car', symbol='\uf1b9')
-car_alt = Symbols(name='car_alt', symbol='\uf5de')
-car_battery = Symbols(name='car_battery', symbol='\uf5df')
-car_crash = Symbols(name='car_crash', symbol='\uf5e1')
-car_side = Symbols(name='car_side', symbol='\uf5e4')
-caret_down = Symbols(name='caret_down', symbol='\uf0d7')
-caret_left = Symbols(name='caret_left', symbol='\uf0d9')
-caret_right = Symbols(name='caret_right', symbol='\uf0da')
-caret_square_down = Symbols(name='caret_square_down', symbol='\uf150')
-caret_square_left = Symbols(name='caret_square_left', symbol='\uf191')
-caret_square_right = Symbols(name='caret_square_right', symbol='\uf152')
-caret_square_up = Symbols(name='caret_square_up', symbol='\uf151')
-caret_up = Symbols(name='caret_up', symbol='\uf0d8')
-carrot = Symbols(name='carrot', symbol='\uf787')
-cart_arrow_down = Symbols(name='cart_arrow_down', symbol='\uf218')
-cart_plus = Symbols(name='cart_plus', symbol='\uf217')
-cash_register = Symbols(name='cash_register', symbol='\uf788')
-cat = Symbols(name='cat', symbol='\uf6be')
-cc_amazon_pay = Symbols(name='cc_amazon_pay', symbol='\uf42d')
-cc_amex = Symbols(name='cc_amex', symbol='\uf1f3')
-cc_apple_pay = Symbols(name='cc_apple_pay', symbol='\uf416')
-cc_diners_club = Symbols(name='cc_diners_club', symbol='\uf24c')
-cc_discover = Symbols(name='cc_discover', symbol='\uf1f2')
-cc_jcb = Symbols(name='cc_jcb', symbol='\uf24b')
-cc_mastercard = Symbols(name='cc_mastercard', symbol='\uf1f1')
-cc_paypal = Symbols(name='cc_paypal', symbol='\uf1f4')
-cc_stripe = Symbols(name='cc_stripe', symbol='\uf1f5')
-cc_visa = Symbols(name='cc_visa', symbol='\uf1f0')
-celluloid = Symbols(name='celluloid', symbol='\uf640')
-centercode = Symbols(name='centercode', symbol='\uf380')
-centos = Symbols(name='centos', symbol='\uf789')
-certificate = Symbols(name='certificate', symbol='\uf0a3')
-chair = Symbols(name='chair', symbol='\uf6c0')
-chalkboard = Symbols(name='chalkboard', symbol='\uf51b')
-chalkboard_teacher = Symbols(name='chalkboard_teacher', symbol='\uf51c')
-charging_station = Symbols(name='charging_station', symbol='\uf5e7')
-chart_area = Symbols(name='chart_area', symbol='\uf1fe')
-chart_bar = Symbols(name='chart_bar', symbol='\uf080')
-chart_line = Symbols(name='chart_line', symbol='\uf201')
-chart_pie = Symbols(name='chart_pie', symbol='\uf200')
-check = Symbols(name='check', symbol='\uf00c')
-check_circle = Symbols(name='check_circle', symbol='\uf058')
-check_double = Symbols(name='check_double', symbol='\uf560')
-check_square = Symbols(name='check_square', symbol='\uf14a')
-cheese = Symbols(name='cheese', symbol='\uf7ef')
-chess = Symbols(name='chess', symbol='\uf439')
-chess_bishop = Symbols(name='chess_bishop', symbol='\uf43a')
-chess_board = Symbols(name='chess_board', symbol='\uf43c')
-chess_king = Symbols(name='chess_king', symbol='\uf43f')
-chess_knight = Symbols(name='chess_knight', symbol='\uf441')
-chess_pawn = Symbols(name='chess_pawn', symbol='\uf443')
-chess_queen = Symbols(name='chess_queen', symbol='\uf445')
-chess_rook = Symbols(name='chess_rook', symbol='\uf447')
-chevron_circle_down = Symbols(name='chevron_circle_down', symbol='\uf13a')
-chevron_circle_left = Symbols(name='chevron_circle_left', symbol='\uf137')
-chevron_circle_right = Symbols(name='chevron_circle_right', symbol='\uf138')
-chevron_circle_up = Symbols(name='chevron_circle_up', symbol='\uf139')
-chevron_down = Symbols(name='chevron_down', symbol='\uf078')
-chevron_left = Symbols(name='chevron_left', symbol='\uf053')
-chevron_right = Symbols(name='chevron_right', symbol='\uf054')
-chevron_up = Symbols(name='chevron_up', symbol='\uf077')
-child = Symbols(name='child', symbol='\uf1ae')
-chrome = Symbols(name='chrome', symbol='\uf268')
-chromecast = Symbols(name='chromecast', symbol='\uf838')
-church = Symbols(name='church', symbol='\uf51d')
-circle = Symbols(name='circle', symbol='\uf111')
-circle_notch = Symbols(name='circle_notch', symbol='\uf1ce')
-cisco = Symbols(name='cisco', symbol='\uf643')
-city = Symbols(name='city', symbol='\uf64f')
-clinic_medical = Symbols(name='clinic_medical', symbol='\uf7f2')
-clipboard = Symbols(name='clipboard', symbol='\uf328')
-clipboard_check = Symbols(name='clipboard_check', symbol='\uf46c')
-clipboard_list = Symbols(name='clipboard_list', symbol='\uf46d')
-clock = Symbols(name='clock', symbol='\uf017')
-clojure = Symbols(name='clojure', symbol='\uf645')
-clojure_alt = Symbols(name='clojure_alt', symbol='\uf645')
-clone = Symbols(name='clone', symbol='\uf24d')
-closed_captioning = Symbols(name='closed_captioning', symbol='\uf20a')
-cloud = Symbols(name='cloud', symbol='\uf0c2')
-cloud9 = Symbols(name='cloud9', symbol='\uf648')
-cloud_download_alt = Symbols(name='cloud_download_alt', symbol='\uf381')
-cloud_meatball = Symbols(name='cloud_meatball', symbol='\uf73b')
-cloud_moon = Symbols(name='cloud_moon', symbol='\uf6c3')
-cloud_moon_rain = Symbols(name='cloud_moon_rain', symbol='\uf73c')
-cloud_rain = Symbols(name='cloud_rain', symbol='\uf73d')
-cloud_showers_heavy = Symbols(name='cloud_showers_heavy', symbol='\uf740')
-cloud_sun = Symbols(name='cloud_sun', symbol='\uf6c4')
-cloud_sun_rain = Symbols(name='cloud_sun_rain', symbol='\uf743')
-cloud_upload_alt = Symbols(name='cloud_upload_alt', symbol='\uf382')
-cloudscale = Symbols(name='cloudscale', symbol='\uf383')
-cloudsmith = Symbols(name='cloudsmith', symbol='\uf384')
-cloudversify = Symbols(name='cloudversify', symbol='\uf385')
-cocktail = Symbols(name='cocktail', symbol='\uf561')
-coda = Symbols(name='coda', symbol='\uf656')
-code = Symbols(name='code', symbol='\uf121')
-code_branch = Symbols(name='code_branch', symbol='\uf126')
-codebadge = Symbols(name='codebadge', symbol='\uf123')
-codeigniter = Symbols(name='codeigniter', symbol='\uf11f')
-codepen = Symbols(name='codepen', symbol='\uf1cb')
-codrops = Symbols(name='codrops', symbol='\uf1cf')
-codiepie = Symbols(name='codiepie', symbol='\uf284')
-coffee = Symbols(name='coffee', symbol='\uf0f4')
-coffeescript = Symbols(name='coffeescript', symbol='\uf18f')
-cog = Symbols(name='cog', symbol='\uf013')
-cogs = Symbols(name='cogs', symbol='\uf085')
-coins = Symbols(name='coins', symbol='\uf51e')
-columns = Symbols(name='columns', symbol='\uf0db')
-comment = Symbols(name='comment', symbol='\uf075')
-comment_alt = Symbols(name='comment_alt', symbol='\uf27a')
-comment_dollar = Symbols(name='comment_dollar', symbol='\uf651')
-comment_dots = Symbols(name='comment_dots', symbol='\uf4ad')
-comment_medical = Symbols(name='comment_medical', symbol='\uf7f5')
-comment_slash = Symbols(name='comment_slash', symbol='\uf4b3')
-comments = Symbols(name='comments', symbol='\uf086')
-comments_dollar = Symbols(name='comments_dollar', symbol='\uf653')
-compact_disc = Symbols(name='compact_disc', symbol='\uf51f')
-compass = Symbols(name='compass', symbol='\uf14e')
-compass_logo = Symbols(name='compass_logo', symbol='\uf06f')
-composer = Symbols(name='composer', symbol='\uf6f3')
-compress = Symbols(name='compress', symbol='\uf066')
-compress_arrows_alt = Symbols(name='compress_arrows_alt', symbol='\uf78c')
-concierge_bell = Symbols(name='concierge_bell', symbol='\uf562')
-confluence = Symbols(name='confluence', symbol='\uf78d')
-connectdevelop = Symbols(name='connectdevelop', symbol='\uf20e')
-contao = Symbols(name='contao', symbol='\uf26d')
-cookie = Symbols(name='cookie', symbol='\uf563')
-cookie_bite = Symbols(name='cookie_bite', symbol='\uf564')
-copy = Symbols(name='copy', symbol='\uf0c5')
-copyright = Symbols(name='copyright', symbol='\uf1f9')
-couch = Symbols(name='couch', symbol='\uf4b8')
-cpanel = Symbols(name='cpanel', symbol='\uf388')
-creative_commons = Symbols(name='creative_commons', symbol='\uf25e')
-creative_commons_badge = Symbols(name='creative_commons_badge', symbol='\uf732')
-creative_commons_by = Symbols(name='creative_commons_by', symbol='\uf4e7')
-creative_commons_nc = Symbols(name='creative_commons_nc', symbol='\uf4e8')
-creative_commons_nc_eu = Symbols(name='creative_commons_nc_esymbol=', symbol='\uf4e9')
-creative_commons_nc_jp = Symbols(name='creative_commons_nc_jp', symbol='\uf4ea')
-creative_commons_nd = Symbols(name='creative_commons_nd', symbol='\uf4eb')
-creative_commons_pd = Symbols(name='creative_commons_pd', symbol='\uf4ec')
-creative_commons_pd_alt = Symbols(name='creative_commons_pd_alt', symbol='\uf4ed')
-creative_commons_remix = Symbols(name='creative_commons_remix', symbol='\uf4ee')
-creative_commons_sa = Symbols(name='creative_commons_sa', symbol='\uf4ef')
-creative_commons_sampling = Symbols(name='creative_commons_sampling', symbol='\uf4f0')
-creative_commons_sampling_plus = Symbols(name='creative_commons_sampling_plus', symbol='\uf4f1')
-creative_commons_share = Symbols(name='creative_commons_share', symbol='\uf4f2')
-creative_commons_zero = Symbols(name='creative_commons_zero', symbol='\uf4f3')
-credit_card = Symbols(name='credit_card', symbol='\uf09d')
-critical_role = Symbols(name='critical_role', symbol='\uf6c9')
-crop = Symbols(name='crop', symbol='\uf125')
-crop_alt = Symbols(name='crop_alt', symbol='\uf565')
-cross = Symbols(name='cross', symbol='\uf654')
-crosshairs = Symbols(name='crosshairs', symbol='\uf05b')
-crow = Symbols(name='crow', symbol='\uf520')
-crown = Symbols(name='crown', symbol='\uf521')
-crutch = Symbols(name='crutch', symbol='\uf7f7')
-css3 = Symbols(name='css3', symbol='\uf13c')
-css3_alt = Symbols(name='css3_alt', symbol='\uf38b')
-css_tricks = Symbols(name='css_tricks', symbol='\uf5a9')
-cssdeck = Symbols(name='cssdeck', symbol='\uf5dd')
-cube = Symbols(name='cube', symbol='\uf1b2')
-cubes = Symbols(name='cubes', symbol='\uf1b3')
-cut = Symbols(name='cut', symbol='\uf0c4')
-cuttlefish = Symbols(name='cuttlefish', symbol='\uf38c')
-dand_d = Symbols(name='d_and_d', symbol='\uf38d')
-dand_d_beyond = Symbols(name='d_and_d_beyond', symbol='\uf6ca')
-dashcube = Symbols(name='dashcube', symbol='\uf210')
-dart = Symbols(name='dart', symbol='\uf5e0')
-database = Symbols(name='database', symbol='\uf1c0')
-deaf = Symbols(name='deaf', symbol='\uf2a4')
-debian = Symbols(name='debian', symbol='\uf5e2')
-delicious = Symbols(name='delicious', symbol='\uf1a5')
-democrat = Symbols(name='democrat', symbol='\uf747')
-deploydog = Symbols(name='deploydog', symbol='\uf38e')
-deskpro = Symbols(name='deskpro', symbol='\uf38f')
-desktop = Symbols(name='desktop', symbol='\uf108')
-dev = Symbols(name='dev', symbol='\uf6cc')
-deviantart = Symbols(name='deviantart', symbol='\uf1bd')
-dharmachakra = Symbols(name='dharmachakra', symbol='\uf655')
-dhl = Symbols(name='dhl', symbol='\uf790')
-diagnoses = Symbols(name='diagnoses', symbol='\uf470')
-diaspora = Symbols(name='diaspora', symbol='\uf791')
-dice = Symbols(name='dice', symbol='\uf522')
-dice_d20 = Symbols(name='dice_d20', symbol='\uf6cf')
-dice_d6 = Symbols(name='dice_d6', symbol='\uf6d1')
-dice_five = Symbols(name='dice_five', symbol='\uf523')
-dice_four = Symbols(name='dice_four', symbol='\uf524')
-dice_one = Symbols(name='dice_one', symbol='\uf525')
-dice_six = Symbols(name='dice_six', symbol='\uf526')
-dice_three = Symbols(name='dice_three', symbol='\uf527')
-dice_two = Symbols(name='dice_two', symbol='\uf528')
-digg = Symbols(name='digg', symbol='\uf1a6')
-digital_ocean = Symbols(name='digital_ocean', symbol='\uf391')
-digital_tachograph = Symbols(name='digital_tachograph', symbol='\uf566')
-directions = Symbols(name='directions', symbol='\uf5eb')
-discord = Symbols(name='discord', symbol='\uf392')
-discourse = Symbols(name='discourse', symbol='\uf393')
-divide = Symbols(name='divide', symbol='\uf529')
-dizzy = Symbols(name='dizzy', symbol='\uf567')
-django = Symbols(name='django', symbol='\uf638')
-dlang = Symbols(name='dlang', symbol='\uf639')
-dna = Symbols(name='dna', symbol='\uf471')
-dochub = Symbols(name='dochub', symbol='\uf394')
-docker = Symbols(name='docker', symbol='\uf395')
-docker_alt = Symbols(name='docker_alt', symbol='\uf376')
-doctrine = Symbols(name='doctrine', symbol='\uf636')
-dog = Symbols(name='dog', symbol='\uf6d3')
-dojo = Symbols(name='dojo', symbol='\uf63a')
-dollar_sign = Symbols(name='dollar_sign', symbol='\uf155')
-dolly = Symbols(name='dolly', symbol='\uf472')
-dolly_flatbed = Symbols(name='dolly_flatbed', symbol='\uf474')
-donate = Symbols(name='donate', symbol='\uf4b9')
-door_closed = Symbols(name='door_closed', symbol='\uf52a')
-door_open = Symbols(name='door_open', symbol='\uf52b')
-dot_circle = Symbols(name='dot_circle', symbol='\uf192')
-dotnet = Symbols(name='dotnet', symbol='\uf635')
-dove = Symbols(name='dove', symbol='\uf4ba')
-download = Symbols(name='download', symbol='\uf019')
-draft2digital = Symbols(name='draft2digital', symbol='\uf396')
-drafting_compass = Symbols(name='drafting_compass', symbol='\uf568')
-dragon = Symbols(name='dragon', symbol='\uf6d5')
-draw_polygon = Symbols(name='draw_polygon', symbol='\uf5ee')
-dribbble = Symbols(name='dribbble', symbol='\uf17d')
-dribbble_square = Symbols(name='dribbble_square', symbol='\uf397')
-dropbox = Symbols(name='dropbox', symbol='\uf16b')
-drum = Symbols(name='drum', symbol='\uf569')
-drum_steelpan = Symbols(name='drum_steelpan', symbol='\uf56a')
-drumstick_bite = Symbols(name='drumstick_bite', symbol='\uf6d7')
-drupal = Symbols(name='drupal', symbol='\uf1a9')
-dumbbell = Symbols(name='dumbbell', symbol='\uf44b')
-dumpster = Symbols(name='dumpster', symbol='\uf793')
-dumpster_fire = Symbols(name='dumpster_fire', symbol='\uf794')
-dungeon = Symbols(name='dungeon', symbol='\uf6d9')
-dyalog = Symbols(name='dyalog', symbol='\uf399')
-earlybirds = Symbols(name='earlybirds', symbol='\uf39a')
-ebay = Symbols(name='ebay', symbol='\uf4f4')
-eclipse = Symbols(name='eclipse', symbol='\uf634')
-edge = Symbols(name='edge', symbol='\uf282')
-edit = Symbols(name='edit', symbol='\uf044')
-egg = Symbols(name='egg', symbol='\uf7fb')
-eject = Symbols(name='eject', symbol='\uf052')
-elementor = Symbols(name='elementor', symbol='\uf430')
-ellipsis_h = Symbols(name='ellipsis_h', symbol='\uf141')
-ellipsis_v = Symbols(name='ellipsis_v', symbol='\uf142')
-ello = Symbols(name='ello', symbol='\uf5f1')
-ember = Symbols(name='ember', symbol='\uf423')
-empire = Symbols(name='empire', symbol='\uf1d1')
-empire_alt = Symbols(name='empire_alt', symbol='\uf1cd')
-envato = Symbols(name='envato', symbol='\uf424')
-envelope = Symbols(name='envelope', symbol='\uf0e0')
-envelope_open = Symbols(name='envelope_open', symbol='\uf2b6')
-envelope_open_text = Symbols(name='envelope_open_text', symbol='\uf658')
-envelope_square = Symbols(name='envelope_square', symbol='\uf199')
-envira = Symbols(name='envira', symbol='\uf299')
-equals = Symbols(name='equals', symbol='\uf52c')
-eraser = Symbols(name='eraser', symbol='\uf12d')
-erlang = Symbols(name='erlang', symbol='\uf39d')
-ethereum = Symbols(name='ethereum', symbol='\uf42e')
-ethernet = Symbols(name='ethernet', symbol='\uf796')
-etsy = Symbols(name='etsy', symbol='\uf2d7')
-euro_sign = Symbols(name='euro_sign', symbol='\uf153')
-evernote = Symbols(name='evernote', symbol='\uf839')
-exchange_alt = Symbols(name='exchange_alt', symbol='\uf362')
-exclamation = Symbols(name='exclamation', symbol='\uf12a')
-exclamation_circle = Symbols(name='exclamation_circle', symbol='\uf06a')
-exclamation_triangle = Symbols(name='exclamation_triangle', symbol='\uf071')
-expand = Symbols(name='expand', symbol='\uf065')
-expand_arrows_alt = Symbols(name='expand_arrows_alt', symbol='\uf31e')
-expeditedssl = Symbols(name='expeditedssl', symbol='\uf23e')
-external_link_alt = Symbols(name='external_link_alt', symbol='\uf35d')
-external_link_square_alt = Symbols(name='external_link_square_alt', symbol='\uf360')
-extjs = Symbols(name='extjs', symbol='\uf389')
-eye = Symbols(name='eye', symbol='\uf06e')
-eye_dropper = Symbols(name='eye_dropper', symbol='\uf1fb')
-eye_slash = Symbols(name='eye_slash', symbol='\uf070')
-facebook = Symbols(name='facebook', symbol='\uf09a')
-facebook_f = Symbols(name='facebook_f', symbol='\uf39e')
-facebook_messenger = Symbols(name='facebook_messenger', symbol='\uf39f')
-facebook_square = Symbols(name='facebook_square', symbol='\uf082')
-fantasy_flight_games = Symbols(name='fantasy_flight_games', symbol='\uf6dc')
-fast_backward = Symbols(name='fast_backward', symbol='\uf049')
-fast_forward = Symbols(name='fast_forward', symbol='\uf050')
-fax = Symbols(name='fax', symbol='\uf1ac')
-feather = Symbols(name='feather', symbol='\uf52d')
-feather_alt = Symbols(name='feather_alt', symbol='\uf56b')
-fedex = Symbols(name='fedex', symbol='\uf797')
-fedora = Symbols(name='fedora', symbol='\uf798')
-female = Symbols(name='female', symbol='\uf182')
-fighter_jet = Symbols(name='fighter_jet', symbol='\uf0fb')
-figma = Symbols(name='figma', symbol='\uf799')
-file = Symbols(name='file', symbol='\uf15b')
-file_alt = Symbols(name='file_alt', symbol='\uf15c')
-file_archive = Symbols(name='file_archive', symbol='\uf1c6')
-file_audio = Symbols(name='file_audio', symbol='\uf1c7')
-file_code = Symbols(name='file_code', symbol='\uf1c9')
-file_contract = Symbols(name='file_contract', symbol='\uf56c')
-file_csv = Symbols(name='file_csv', symbol='\uf6dd')
-file_download = Symbols(name='file_download', symbol='\uf56d')
-file_excel = Symbols(name='file_excel', symbol='\uf1c3')
-file_export = Symbols(name='file_export', symbol='\uf56e')
-file_image = Symbols(name='file_image', symbol='\uf1c5')
-fileimport = Symbols(name='file_import', symbol='\uf56f')
-file_invoice = Symbols(name='file_invoice', symbol='\uf570')
-file_invoice_dollar = Symbols(name='file_invoice_dollar', symbol='\uf571')
-file_medical = Symbols(name='file_medical', symbol='\uf477')
-file_medical_alt = Symbols(name='file_medical_alt', symbol='\uf478')
-file_pdf = Symbols(name='file_pdf', symbol='\uf1c1')
-file_powerpoint = Symbols(name='file_powerpoint', symbol='\uf1c4')
-file_prescription = Symbols(name='file_prescription', symbol='\uf572')
-file_signature = Symbols(name='file_signature', symbol='\uf573')
-file_upload = Symbols(name='file_upload', symbol='\uf574')
-file_video = Symbols(name='file_video', symbol='\uf1c8')
-file_word = Symbols(name='file_word', symbol='\uf1c2')
-fill = Symbols(name='fill', symbol='\uf575')
-fill_drip = Symbols(name='fill_drip', symbol='\uf576')
-film = Symbols(name='film', symbol='\uf008')
-filter = Symbols(name='filter', symbol='\uf0b0')
-fingerprint = Symbols(name='fingerprint', symbol='\uf577')
-fire = Symbols(name='fire', symbol='\uf06d')
-fire_alt = Symbols(name='fire_alt', symbol='\uf7e4')
-fire_extinguisher = Symbols(name='fire_extinguisher', symbol='\uf134')
-firefox = Symbols(name='firefox', symbol='\uf269')
-first_aid = Symbols(name='first_aid', symbol='\uf479')
-first_order = Symbols(name='first_order', symbol='\uf2b0')
-first_order_alt = Symbols(name='first_order_alt', symbol='\uf50a')
-firstdraft = Symbols(name='firstdraft', symbol='\uf3a1')
-fish = Symbols(name='fish', symbol='\uf578')
-fist_raised = Symbols(name='fist_raised', symbol='\uf6de')
-fivehundred_px = Symbols(name='500px', symbol='\uf26e')
-flag = Symbols(name='flag', symbol='\uf024')
-flag_checkered = Symbols(name='flag_checkered', symbol='\uf11e')
-flag_usa = Symbols(name='flag_usa', symbol='\uf74d')
-flask = Symbols(name='flask', symbol='\uf0c3')
-flickr = Symbols(name='flickr', symbol='\uf16e')
-flipboard = Symbols(name='flipboard', symbol='\uf44d')
-flushed = Symbols(name='flushed', symbol='\uf579')
-fly = Symbols(name='fly', symbol='\uf417')
-folder = Symbols(name='folder', symbol='\uf07b')
-folder_minus = Symbols(name='folder_minus', symbol='\uf65d')
-folder_open = Symbols(name='folder_open', symbol='\uf07c')
-folder_plus = Symbols(name='folder_plus', symbol='\uf65e')
-font = Symbols(name='font', symbol='\uf031')
-font_awesome = Symbols(name='font_awesome', symbol='\uf2b4')
-font_awesome_alt = Symbols(name='font_awesome_alt', symbol='\uf35c')
-font_awesome_flag = Symbols(name='font_awesome_flag', symbol='\uf425')
-font_awesome_logo_full = Symbols(name='font_awesome_logo_full', symbol='\uf4e6')
-fonticons = Symbols(name='fonticons', symbol='\uf280')
-fonticons_fi = Symbols(name='fonticons_fi', symbol='\uf3a2')
-football_ball = Symbols(name='football_ball', symbol='\uf44e')
-fort_awesome = Symbols(name='fort_awesome', symbol='\uf286')
-fort_awesome_alt = Symbols(name='fort_awesome_alt', symbol='\uf3a3')
-forumbee = Symbols(name='forumbee', symbol='\uf211')
-forward = Symbols(name='forward', symbol='\uf04e')
-foursquare = Symbols(name='foursquare', symbol='\uf180')
-free_code_camp = Symbols(name='free_code_camp', symbol='\uf2c5')
-freebsd = Symbols(name='freebsd', symbol='\uf3a4')
-freebsd_alt = Symbols(name='freebsd_alt', symbol='\uf3a4')
-frog = Symbols(name='frog', symbol='\uf52e')
-frown = Symbols(name='frown', symbol='\uf119')
-frown_open = Symbols(name='frown_open', symbol='\uf57a')
-fulcrum = Symbols(name='fulcrum', symbol='\uf50b')
-funnel_dollar = Symbols(name='funnel_dollar', symbol='\uf662')
-futbol = Symbols(name='futbol', symbol='\uf1e3')
-galactic_republic = Symbols(name='galactic_republic', symbol='\uf50c')
-galactic_senate = Symbols(name='galactic_senate', symbol='\uf50d')
-gamepad = Symbols(name='gamepad', symbol='\uf11b')
-gas_pump = Symbols(name='gas_pump', symbol='\uf52f')
-gavel = Symbols(name='gavel', symbol='\uf0e3')
-gem = Symbols(name='gem', symbol='\uf3a5')
-genderless = Symbols(name='genderless', symbol='\uf22d')
-get_pocket = Symbols(name='get_pocket', symbol='\uf265')
-gg = Symbols(name='gg', symbol='\uf260')
-gg_circle = Symbols(name='gg_circle', symbol='\uf261')
-ghost_logo = Symbols(name='ghost_logo', symbol='\uf3ce')
-ghost_name = Symbols(name='ghost_name', symbol='\uf3cf')
-ghost = Symbols(name='ghost', symbol='\uf6e2')
-gift = Symbols(name='gift', symbol='\uf06b')
-gifts = Symbols(name='gifts', symbol='\uf79c')
-git = Symbols(name='git', symbol='\uf1d3')
-git_add = Symbols(name='git_add', symbol='\uf1d3')
-git_branch = Symbols(name='git_branch', symbol='\uf0b3')
-git_commit = Symbols(name='git_commit', symbol='\uf0b4')
-git_compare = Symbols(name='git_compare', symbol='\uf0b5')
-git_merge = Symbols(name='git_merge', symbol='\uf0b6')
-git_pull_reguest = Symbols(name='git_pull_reguest', symbol='\uf0b7')
-git_square = Symbols(name='git_square', symbol='\uf1d2')
-github = Symbols(name='github', symbol='\uf113')
-github_logo = Symbols(name='github_logo', symbol='\uf09b')
-github_badge = Symbols(name='github_badge', symbol='\uf092')
-github_name = Symbols(name='github_name', symbol='\uf0b8')
-gitkraken = Symbols(name='gitkraken', symbol='\uf3a6')
-gitlab = Symbols(name='gitlab', symbol='\uf296')
-gitter = Symbols(name='gitter', symbol='\uf426')
-glass_cheers = Symbols(name='glass_cheers', symbol='\uf79f')
-glass_martini = Symbols(name='glass_martini', symbol='\uf000')
-glass_martini_alt = Symbols(name='glass_martini_alt', symbol='\uf57b')
-glass_whiskey = Symbols(name='glass_whiskey', symbol='\uf7a0')
-glasses = Symbols(name='glasses', symbol='\uf530')
-glide = Symbols(name='glide', symbol='\uf2a5')
-glide_g = Symbols(name='glide_g', symbol='\uf2a6')
-globe = Symbols(name='globe', symbol='\uf0ac')
-globe_africa = Symbols(name='globe_africa', symbol='\uf57c')
-globe_americas = Symbols(name='globe_americas', symbol='\uf57d')
-globe_asia = Symbols(name='globe_asia', symbol='\uf57e')
-globe_europe = Symbols(name='globe_europe', symbol='\uf7a2')
-gnu = Symbols(name='gnsymbol=', symbol='\uf449')
-gofore = Symbols(name='gofore', symbol='\uf3a7')
-golang = Symbols(name='golang', symbol='\uf390')
-golf_ball = Symbols(name='golf_ball', symbol='\uf450')
-goodreads = Symbols(name='goodreads', symbol='\uf3a8')
-goodreads_g = Symbols(name='goodreads_g', symbol='\uf3a9')
-google = Symbols(name='google', symbol='\uf1a0')
-google_analytics = Symbols(name='google_analytics', symbol='\uf3a0')
-google_cloud = Symbols(name='google_cloud', symbol='\uf39c')
-google_drive = Symbols(name='google_drive', symbol='\uf3aa')
-google_play = Symbols(name='google_play', symbol='\uf3ab')
-google_plus = Symbols(name='google_plus', symbol='\uf2b3')
-google_plus_g = Symbols(name='google_plus_g', symbol='\uf0d5')
-google_plus_square = Symbols(name='google_plus_square', symbol='\uf0d4')
-google_wallet = Symbols(name='google_wallet', symbol='\uf1ee')
-gopuram = Symbols(name='gopuram', symbol='\uf664')
-graduation_cap = Symbols(name='graduation_cap', symbol='\uf19d')
-gratipay = Symbols(name='gratipay', symbol='\uf184')
-grav = Symbols(name='grav', symbol='\uf2d6')
-greater_than = Symbols(name='greater_than', symbol='\uf531')
-greater_than_equal = Symbols(name='greater_than_equal', symbol='\uf532')
-grimace = Symbols(name='grimace', symbol='\uf57f')
-grin = Symbols(name='grin', symbol='\uf580')
-grin_alt = Symbols(name='grin_alt', symbol='\uf581')
-grin_beam = Symbols(name='grin_beam', symbol='\uf582')
-grin_beam_sweat = Symbols(name='grin_beam_sweat', symbol='\uf583')
-grin_hearts = Symbols(name='grin_hearts', symbol='\uf584')
-grin_squint = Symbols(name='grin_squint', symbol='\uf585')
-grin_squint_tears = Symbols(name='grin_squint_tears', symbol='\uf586')
-grin_stars = Symbols(name='grin_stars', symbol='\uf587')
-grin_tears = Symbols(name='grin_tears', symbol='\uf588')
-grin_tongue = Symbols(name='grin_tongue', symbol='\uf589')
-grin_tongue_squint = Symbols(name='grin_tongue_squint', symbol='\uf58a')
-grin_tongue_wink = Symbols(name='grin_tongue_wink', symbol='\uf58b')
-grin_wink = Symbols(name='grin_wink', symbol='\uf58c')
-grip_horizontal = Symbols(name='grip_horizontal', symbol='\uf58d')
-grip_lines = Symbols(name='grip_lines', symbol='\uf7a4')
-grip_lines_vertical = Symbols(name='grip_lines_vertical', symbol='\uf7a5')
-grip_vertical = Symbols(name='grip_vertical', symbol='\uf58e')
-gripfire = Symbols(name='gripfire', symbol='\uf3ac')
-grunt = Symbols(name='grunt', symbol='\uf3ad')
-guitar = Symbols(name='guitar', symbol='\uf7a6')
-gulp = Symbols(name='gulp', symbol='\uf3ae')
-h_square = Symbols(name='h_square', symbol='\uf0fd')
-hacker_news = Symbols(name='hacker_news', symbol='\uf1d4')
-hacker_news_square = Symbols(name='hacker_news_square', symbol='\uf3af')
-hackerrank = Symbols(name='hackerrank', symbol='\uf5f7')
-hamburger = Symbols(name='hamburger', symbol='\uf805')
-hammer = Symbols(name='hammer', symbol='\uf6e3')
-hamsa = Symbols(name='hamsa', symbol='\uf665')
-hand_holding = Symbols(name='hand_holding', symbol='\uf4bd')
-hand_holding_heart = Symbols(name='hand_holding_heart', symbol='\uf4be')
-hand_holding_usd = Symbols(name='hand_holding_usd', symbol='\uf4c0')
-hand_lizard = Symbols(name='hand_lizard', symbol='\uf258')
-hand_middle_finger = Symbols(name='hand_middle_finger', symbol='\uf806')
-hand_paper = Symbols(name='hand_paper', symbol='\uf256')
-hand_peace = Symbols(name='hand_peace', symbol='\uf25b')
-hand_point_down = Symbols(name='hand_point_down', symbol='\uf0a7')
-hand_point_left = Symbols(name='hand_point_left', symbol='\uf0a5')
-hand_point_right = Symbols(name='hand_point_right', symbol='\uf0a4')
-hand_point_up = Symbols(name='hand_point_up', symbol='\uf0a6')
-hand_pointer = Symbols(name='hand_pointer', symbol='\uf25a')
-hand_rock = Symbols(name='hand_rock', symbol='\uf255')
-hand_scissors = Symbols(name='hand_scissors', symbol='\uf257')
-hand_spock = Symbols(name='hand_spock', symbol='\uf259')
-hands = Symbols(name='hands', symbol='\uf4c2')
-hands_helping = Symbols(name='hands_helping', symbol='\uf4c4')
-handshake = Symbols(name='handshake', symbol='\uf2b5')
-hanukiah = Symbols(name='hanukiah', symbol='\uf6e6')
-hard_hat = Symbols(name='hard_hat', symbol='\uf807')
-hashtag = Symbols(name='hashtag', symbol='\uf292')
-haskell = Symbols(name='haskell', symbol='\uf350')
-hat_wizard = Symbols(name='hat_wizard', symbol='\uf6e8')
-haykal = Symbols(name='haykal', symbol='\uf666')
-hdd = Symbols(name='hdd', symbol='\uf0a0')
-heading = Symbols(name='heading', symbol='\uf1dc')
-headphones = Symbols(name='headphones', symbol='\uf025')
-headphones_alt = Symbols(name='headphones_alt', symbol='\uf58f')
-headset = Symbols(name='headset', symbol='\uf590')
-heart = Symbols(name='heart', symbol='\uf004')
-heart_broken = Symbols(name='heart_broken', symbol='\uf7a9')
-heartbeat = Symbols(name='heartbeat', symbol='\uf21e')
-helicopter = Symbols(name='helicopter', symbol='\uf533')
-heroku = Symbols(name='heroksymbol=', symbol='\uf3b3')
-highlighter = Symbols(name='highlighter', symbol='\uf591')
-hiking = Symbols(name='hiking', symbol='\uf6ec')
-hippo = Symbols(name='hippo', symbol='\uf6ed')
-hips = Symbols(name='hips', symbol='\uf452')
-hire_a_helper = Symbols(name='hire_a_helper', symbol='\uf3b0')
-history = Symbols(name='history', symbol='\uf1da')
-hockey_puck = Symbols(name='hockey_puck', symbol='\uf453')
-holly_berry = Symbols(name='holly_berry', symbol='\uf7aa')
-home = Symbols(name='home', symbol='\uf015')
-hooli = Symbols(name='hooli', symbol='\uf427')
-hornbill = Symbols(name='hornbill', symbol='\uf592')
-horse = Symbols(name='horse', symbol='\uf6f0')
-horse_head = Symbols(name='horse_head', symbol='\uf7ab')
-hospital = Symbols(name='hospital', symbol='\uf0f8')
-hospital_alt = Symbols(name='hospital_alt', symbol='\uf47d')
-hospital_symbol = Symbols(name='hospital_symbol', symbol='\uf47e')
-hot_tub = Symbols(name='hot_tub', symbol='\uf593')
-hotdog = Symbols(name='hotdog', symbol='\uf80f')
-hotel = Symbols(name='hotel', symbol='\uf594')
-hotjar = Symbols(name='hotjar', symbol='\uf3b1')
-hourglass = Symbols(name='hourglass', symbol='\uf254')
-hourglass_end = Symbols(name='hourglass_end', symbol='\uf253')
-hourglass_half = Symbols(name='hourglass_half', symbol='\uf252')
-hourglass_start = Symbols(name='hourglass_start', symbol='\uf251')
-house_damage = Symbols(name='house_damage', symbol='\uf6f1')
-houzz = Symbols(name='houzz', symbol='\uf27c')
-hryvnia = Symbols(name='hryvnia', symbol='\uf6f2')
-html5 = Symbols(name='html5', symbol='\uf13b')
-hubspot = Symbols(name='hubspot', symbol='\uf3b2')
-i_cursor = Symbols(name='i_cursor', symbol='\uf246')
-ice_cream = Symbols(name='ice_cream', symbol='\uf810')
-icicles = Symbols(name='icicles', symbol='\uf7ad')
-id_badge = Symbols(name='id_badge', symbol='\uf2c1')
-id_card = Symbols(name='id_card', symbol='\uf2c2')
-id_card_alt = Symbols(name='id_card_alt', symbol='\uf47f')
-igloo = Symbols(name='igloo', symbol='\uf7ae')
-image = Symbols(name='image', symbol='\uf03e')
-images = Symbols(name='images', symbol='\uf302')
-imdb = Symbols(name='imdb', symbol='\uf2d8')
-inbox = Symbols(name='inbox', symbol='\uf01c')
-indent = Symbols(name='indent', symbol='\uf03c')
-industry = Symbols(name='industry', symbol='\uf275')
-infinity = Symbols(name='infinity', symbol='\uf534')
-info = Symbols(name='info', symbol='\uf129')
-info_circle = Symbols(name='info_circle', symbol='\uf05a')
-instagram = Symbols(name='instagram', symbol='\uf16d')
-intellij = Symbols(name='intellij', symbol='\uf387')
-intercom = Symbols(name='intercom', symbol='\uf7af')
-internet_explorer = Symbols(name='internet_explorer', symbol='\uf26b')
-invision = Symbols(name='invision', symbol='\uf7b0')
-ioxhost = Symbols(name='ioxhost', symbol='\uf208')
-italic = Symbols(name='italic', symbol='\uf033')
-itch_io = Symbols(name='itch_io', symbol='\uf83a')
-itunes = Symbols(name='itunes', symbol='\uf3b4')
-itunes_note = Symbols(name='itunes_note', symbol='\uf3b5')
-jabber = Symbols(name='jabber', symbol='\uf145')
-java = Symbols(name='java', symbol='\uf4e4')
-jedi = Symbols(name='jedi', symbol='\uf669')
-jekyll = Symbols(name='jekyll', symbol='\uf38a')
-jedi_order = Symbols(name='jedi_order', symbol='\uf50e')
-jenkins = Symbols(name='jenkins', symbol='\uf3b6')
-jira = Symbols(name='jira', symbol='\uf7b1')
-joget = Symbols(name='joget', symbol='\uf3b7')
-joint = Symbols(name='joint', symbol='\uf595')
-joomla = Symbols(name='joomla', symbol='\uf1aa')
-journal_whills = Symbols(name='journal_whills', symbol='\uf66a')
-js = Symbols(name='js', symbol='\uf3b8')
-js_name = Symbols(name='js_name', symbol='\uf39b')
-js_square = Symbols(name='js_square', symbol='\uf3b9')
-jsfiddle = Symbols(name='jsfiddle', symbol='\uf1cc')
-kaaba = Symbols(name='kaaba', symbol='\uf66b')
-kaggle = Symbols(name='kaggle', symbol='\uf5fa')
-key = Symbols(name='key', symbol='\uf084')
-keybase = Symbols(name='keybase', symbol='\uf4f5')
-keyboard = Symbols(name='keyboard', symbol='\uf11c')
-keycdn = Symbols(name='keycdn', symbol='\uf3ba')
-khanda = Symbols(name='khanda', symbol='\uf66d')
-kickstarter = Symbols(name='kickstarter', symbol='\uf3bb')
-kickstarter_k = Symbols(name='kickstarter_k', symbol='\uf3bc')
-kiss = Symbols(name='kiss', symbol='\uf596')
-kiss_beam = Symbols(name='kiss_beam', symbol='\uf597')
-kiss_wink_heart = Symbols(name='kiss_wink_heart', symbol='\uf598')
-kiwi_bird = Symbols(name='kiwi_bird', symbol='\uf535')
-komodo = Symbols(name='komodo', symbol='\uf398#')
-korvue = Symbols(name='korvue', symbol='\uf42f')
-kubernetes = Symbols(name='kubernetes', symbol='\uf398')
-landmark = Symbols(name='landmark', symbol='\uf66f')
-language = Symbols(name='language', symbol='\uf1ab')
-laptop = Symbols(name='laptop', symbol='\uf109')
-laptop_code = Symbols(name='laptop_code', symbol='\uf5fc')
-laptop_medical = Symbols(name='laptop_medical', symbol='\uf812')
-laravel = Symbols(name='laravel', symbol='\uf3bd')
-lastfm = Symbols(name='lastfm', symbol='\uf202')
-lastfm_square = Symbols(name='lastfm_square', symbol='\uf203')
-laugh = Symbols(name='laugh', symbol='\uf599')
-laugh_beam = Symbols(name='laugh_beam', symbol='\uf59a')
-laugh_squint = Symbols(name='laugh_squint', symbol='\uf59b')
-laugh_wink = Symbols(name='laugh_wink', symbol='\uf59c')
-layer_group = Symbols(name='layer_group', symbol='\uf5fd')
-leaf = Symbols(name='leaf', symbol='\uf06c')
-leanpub = Symbols(name='leanpub', symbol='\uf212')
-lemon = Symbols(name='lemon', symbol='\uf094')
-less = Symbols(name='less', symbol='\uf41d')
-less_than = Symbols(name='less_than', symbol='\uf536')
-less_than_equal = Symbols(name='less_than_equal', symbol='\uf537')
-level_down_alt = Symbols(name='level_down_alt', symbol='\uf3be')
-level_up_alt = Symbols(name='level_up_alt', symbol='\uf3bf')
-life_ring = Symbols(name='life_ring', symbol='\uf1cd')
-lightbulb = Symbols(name='lightbulb', symbol='\uf0eb')
-line = Symbols(name='line', symbol='\uf3c0')
-link = Symbols(name='link', symbol='\uf0c1')
-linkedin = Symbols(name='linkedin', symbol='\uf08c')
-linkedin_alt = Symbols(name='linkedin_in', symbol='\uf0e1')
-linode = Symbols(name='linode', symbol='\uf2b8')
-linux = Symbols(name='linux', symbol='\uf17c')
-lira_sign = Symbols(name='lira_sign', symbol='\uf195')
-list = Symbols(name='list', symbol='\uf03a')
-list_alt = Symbols(name='list_alt', symbol='\uf022')
-list_ol = Symbols(name='list_ol', symbol='\uf0cb')
-list_ul = Symbols(name='list_ul', symbol='\uf0ca')
-location_arrow = Symbols(name='location_arrow', symbol='\uf124')
-lock = Symbols(name='lock', symbol='\uf023')
-lock_open = Symbols(name='lock_open', symbol='\uf3c1')
-long_arrow_alt_down = Symbols(name='long_arrow_alt_down', symbol='\uf309')
-long_arrow_alt_left = Symbols(name='long_arrow_alt_left', symbol='\uf30a')
-long_arrow_alt_right = Symbols(name='long_arrow_alt_right', symbol='\uf30b')
-long_arrow_alt_up = Symbols(name='long_arrow_alt_up', symbol='\uf30c')
-low_vision = Symbols(name='low_vision', symbol='\uf2a8')
-luggage_cart = Symbols(name='luggage_cart', symbol='\uf59d')
-lyft = Symbols(name='lyft', symbol='\uf3c3')
-magento = Symbols(name='magento', symbol='\uf3c4')
-magic = Symbols(name='magic', symbol='\uf0d0')
-magnet = Symbols(name='magnet', symbol='\uf076')
-mail_bulk = Symbols(name='mail_bulk', symbol='\uf674')
-mailchimp = Symbols(name='mailchimp', symbol='\uf2ee')
-mandalorian = Symbols(name='mandalorian', symbol='\uf50f')
-map = Symbols(name='map', symbol='\uf279')
-map_marked = Symbols(name='map_marked', symbol='\uf59f')
-map_marked_alt = Symbols(name='map_marked_alt', symbol='\uf5a0')
-map_marker = Symbols(name='map_marker', symbol='\uf041')
-map_marker_alt = Symbols(name='map_marker_alt', symbol='\uf3c5')
-map_pin = Symbols(name='map_pin', symbol='\uf276')
-map_signs = Symbols(name='map_signs', symbol='\uf277')
-markdown = Symbols(name='markdown', symbol='\uf60f')
-marker = Symbols(name='marker', symbol='\uf5a1')
-mars = Symbols(name='mars', symbol='\uf222')
-mars_double = Symbols(name='mars_double', symbol='\uf227')
-mars_stroke = Symbols(name='mars_stroke', symbol='\uf229')
-mars_stroke_h = Symbols(name='mars_stroke_h', symbol='\uf22b')
-mars_stroke_v = Symbols(name='mars_stroke_v', symbol='\uf22a')
-mask = Symbols(name='mask', symbol='\uf6fa')
-mastodon = Symbols(name='mastodon', symbol='\uf4f6')
-maxcdn = Symbols(name='maxcdn', symbol='\uf136')
-medal = Symbols(name='medal', symbol='\uf5a2')
-medapps = Symbols(name='medapps', symbol='\uf3c6')
-medium = Symbols(name='medium', symbol='\uf23a')
-medium_m = Symbols(name='medium_m', symbol='\uf3c7')
-medkit = Symbols(name='medkit', symbol='\uf0fa')
-medrt = Symbols(name='medrt', symbol='\uf3c8')
-meetup = Symbols(name='meetup', symbol='\uf2e0')
-megaport = Symbols(name='megaport', symbol='\uf5a3')
-meh = Symbols(name='meh', symbol='\uf11a')
-meh_blank = Symbols(name='meh_blank', symbol='\uf5a4')
-meh_rolling_eyes = Symbols(name='meh_rolling_eyes', symbol='\uf5a5')
-memory = Symbols(name='memory', symbol='\uf538')
-mendeley = Symbols(name='mendeley', symbol='\uf7b3')
-menorah = Symbols(name='menorah', symbol='\uf676')
-mercury = Symbols(name='mercury', symbol='\uf223')
-meteor = Symbols(name='meteor', symbol='\uf755')
-meteor_full = Symbols(name='meteor_full', symbol='\uf754')
-meteorite = Symbols(name='meteorite', symbol='\uf753')
-microchip = Symbols(name='microchip', symbol='\uf2db')
-microphone = Symbols(name='microphone', symbol='\uf130')
-microphone_alt = Symbols(name='microphone_alt', symbol='\uf3c9')
-microphone_alt_slash = Symbols(name='microphone_alt_slash', symbol='\uf539')
-microphone_slash = Symbols(name='microphone_slash', symbol='\uf131')
-microscope = Symbols(name='microscope', symbol='\uf610')
-microsoft = Symbols(name='microsoft', symbol='\uf3ca')
-minus = Symbols(name='minus', symbol='\uf068')
-minus_circle = Symbols(name='minus_circle', symbol='\uf056')
-minus_square = Symbols(name='minus_square', symbol='\uf146')
-mitten = Symbols(name='mitten', symbol='\uf7b5')
-mix = Symbols(name='mix', symbol='\uf3cb')
-mixcloud = Symbols(name='mixcloud', symbol='\uf289')
-mizuni = Symbols(name='mizuni', symbol='\uf3cc')
-mobile = Symbols(name='mobile', symbol='\uf10b')
-mobile_alt = Symbols(name='mobile_alt', symbol='\uf3cd')
-modx = Symbols(name='modx', symbol='\uf285')
-monero = Symbols(name='monero', symbol='\uf3d0')
-money_bill = Symbols(name='money_bill', symbol='\uf0d6')
-money_bill_alt = Symbols(name='money_bill_alt', symbol='\uf3d1')
-money_bill_wave = Symbols(name='money_bill_wave', symbol='\uf53a')
-money_bill_wave_alt = Symbols(name='money_bill_wave_alt', symbol='\uf53b')
-money_check = Symbols(name='money_check', symbol='\uf53c')
-money_check_alt = Symbols(name='money_check_alt', symbol='\uf53d')
-monument = Symbols(name='monument', symbol='\uf5a6')
-moon = Symbols(name='moon', symbol='\uf186')
-mortar_pestle = Symbols(name='mortar_pestle', symbol='\uf5a7')
-mosque = Symbols(name='mosque', symbol='\uf678')
-motorcycle = Symbols(name='motorcycle', symbol='\uf21c')
-mountain = Symbols(name='mountain', symbol='\uf6fc')
-mouse_pointer = Symbols(name='mouse_pointer', symbol='\uf245')
-mug_hot = Symbols(name='mug_hot', symbol='\uf7b6')
-music = Symbols(name='music', symbol='\uf001')
-napster = Symbols(name='napster', symbol='\uf3d2')
-neos = Symbols(name='neos', symbol='\uf612')
-network = Symbols(name='network', symbol='\ue0a1')
-network_wired = Symbols(name='network_wired', symbol='\uf6ff')
-neuter = Symbols(name='neuter', symbol='\uf22c')
-newspaper = Symbols(name='newspaper', symbol='\uf1ea')
-nimblr = Symbols(name='nimblr', symbol='\uf5a8')
-nintendo_switch = Symbols(name='nintendo_switch', symbol='\uf418')
-node = Symbols(name='node', symbol='\uf419')
-node_js = Symbols(name='node_js', symbol='\uf3d3')
-not_equal = Symbols(name='not_equal', symbol='\uf53e')
-notes_medical = Symbols(name='notes_medical', symbol='\uf481')
-npm = Symbols(name='npm', symbol='\uf3d4')
-ns8 = Symbols(name='ns8', symbol='\uf3d5')
-nutritionix = Symbols(name='nutritionix', symbol='\uf3d6')
-object_group = Symbols(name='object_group', symbol='\uf247')
-object_ungroup = Symbols(name='object_ungroup', symbol='\uf248')
-odnoklassniki = Symbols(name='odnoklassniki', symbol='\uf263')
-odnoklassniki_square = Symbols(name='odnoklassniki_square', symbol='\uf264')
-oil_can = Symbols(name='oil_can', symbol='\uf613')
-old_republic = Symbols(name='old_republic', symbol='\uf510')
-om = Symbols(name='om', symbol='\uf679')
-opencart = Symbols(name='opencart', symbol='\uf23d')
-openid = Symbols(name='openid', symbol='\uf19b')
-opensource = Symbols(name='opensource', symbol='\uf196')
-opensource_alt = Symbols(name='opensource_alt', symbol='\uf41a')
-opera = Symbols(name='opera', symbol='\uf26a')
-optin_monster = Symbols(name='optin_monster', symbol='\uf23c')
-otter = Symbols(name='otter', symbol='\uf700')
-outdent = Symbols(name='outdent', symbol='\uf03b')
-page4 = Symbols(name='page4', symbol='\uf3d7')
-pagelines = Symbols(name='pagelines', symbol='\uf18c')
-pager = Symbols(name='pager', symbol='\uf815')
-paint_brush = Symbols(name='paint_brush', symbol='\uf1fc')
-paint_roller = Symbols(name='paint_roller', symbol='\uf5aa')
-palette = Symbols(name='palette', symbol='\uf53f')
-palfed = Symbols(name='palfed', symbol='\uf3d8')
-pallet = Symbols(name='pallet', symbol='\uf482')
-paper_plane = Symbols(name='paper_plane', symbol='\uf1d8')
-paperclip = Symbols(name='paperclip', symbol='\uf0c6')
-parachute_box = Symbols(name='parachute_box', symbol='\uf4cd')
-paragraph = Symbols(name='paragraph', symbol='\uf1dd')
-parking = Symbols(name='parking', symbol='\uf540')
-passport = Symbols(name='passport', symbol='\uf5ab')
-pastafarianism = Symbols(name='pastafarianism', symbol='\uf67b')
-paste = Symbols(name='paste', symbol='\uf0ea')
-patreon = Symbols(name='patreon', symbol='\uf3d9')
-pause = Symbols(name='pause', symbol='\uf04c')
-pause_circle = Symbols(name='pause_circle', symbol='\uf28b')
-paw = Symbols(name='paw', symbol='\uf1b0')
-paypal = Symbols(name='paypal', symbol='\uf1ed')
-peace = Symbols(name='peace', symbol='\uf67c')
-pen = Symbols(name='pen', symbol='\uf304')
-pen_alt = Symbols(name='pen_alt', symbol='\uf305')
-pen_fancy = Symbols(name='pen_fancy', symbol='\uf5ac')
-pen_nib = Symbols(name='pen_nib', symbol='\uf5ad')
-pen_square = Symbols(name='pen_square', symbol='\uf14b')
-pencil_alt = Symbols(name='pencil_alt', symbol='\uf303')
-pencil_ruler = Symbols(name='pencil_ruler', symbol='\uf5ae')
-penny_arcade = Symbols(name='penny_arcade', symbol='\uf704')
-people_carry = Symbols(name='people_carry', symbol='\uf4ce')
-pepper_hot = Symbols(name='pepper_hot', symbol='\uf816')
-percent = Symbols(name='percent', symbol='\uf295')
-percentage = Symbols(name='percentage', symbol='\uf541')
-periscope = Symbols(name='periscope', symbol='\uf3da')
-person_booth = Symbols(name='person_booth', symbol='\uf756')
-phabricator = Symbols(name='phabricator', symbol='\uf3db')
-phoenix_framework = Symbols(name='phoenix_framework', symbol='\uf3dc')
-phoenix_squadron = Symbols(name='phoenix_squadron', symbol='\uf511')
-phone = Symbols(name='phone', symbol='\uf095')
-phone_slash = Symbols(name='phone_slash', symbol='\uf3dd')
-phone_square = Symbols(name='phone_square', symbol='\uf098')
-phone_volume = Symbols(name='phone_volume', symbol='\uf2a0')
-php = Symbols(name='php', symbol='\uf457')
-pied_piper = Symbols(name='pied_piper', symbol='\uf2ae')
-pied_piper_alt = Symbols(name='pied_piper_alt', symbol='\uf1a8')
-pied_piper_hat = Symbols(name='pied_piper_hat', symbol='\uf4e5')
-pied_piper_pp = Symbols(name='pied_piper_pp', symbol='\uf1a7')
-piggy_bank = Symbols(name='piggy_bank', symbol='\uf4d3')
-pills = Symbols(name='pills', symbol='\uf484')
-pinterest = Symbols(name='pinterest', symbol='\uf0d2')
-pinterest_p = Symbols(name='pinterest_p', symbol='\uf231')
-pinterest_square = Symbols(name='pinterest_square', symbol='\uf0d3')
-pizza_slice = Symbols(name='pizza_slice', symbol='\uf818')
-place_of_worship = Symbols(name='place_of_worship', symbol='\uf67f')
-plane = Symbols(name='plane', symbol='\uf072')
-plane_arrival = Symbols(name='plane_arrival', symbol='\uf5af')
-plane_departure = Symbols(name='plane_departure', symbol='\uf5b0')
-play = Symbols(name='play', symbol='\uf04b')
-play_circle = Symbols(name='play_circle', symbol='\uf144')
-playstation = Symbols(name='playstation', symbol='\uf3df')
-plug = Symbols(name='plug', symbol='\uf1e6')
-plus = Symbols(name='plus', symbol='\uf067')
-plus_circle = Symbols(name='plus_circle', symbol='\uf055')
-plus_square = Symbols(name='plus_square', symbol='\uf0fe')
-podcast = Symbols(name='podcast', symbol='\uf2ce')
-poll = Symbols(name='poll', symbol='\uf681')
-poll_h = Symbols(name='poll_h', symbol='\uf682')
-poo = Symbols(name='poo', symbol='\uf2fe')
-poo_storm = Symbols(name='poo_storm', symbol='\uf75a')
-poop = Symbols(name='poop', symbol='\uf619')
-portrait = Symbols(name='portrait', symbol='\uf3e0')
-pound_sign = Symbols(name='pound_sign', symbol='\uf154')
-power_off = Symbols(name='power_off', symbol='\uf011')
-pray = Symbols(name='pray', symbol='\uf683')
-praying_hands = Symbols(name='praying_hands', symbol='\uf684')
-prescription = Symbols(name='prescription', symbol='\uf5b1')
-prescription_bottle = Symbols(name='prescription_bottle', symbol='\uf485')
-prescription_bottle_alt = Symbols(name='prescription_bottle_alt', symbol='\uf486')
-print = Symbols(name='print', symbol='\uf02f')
-procedures = Symbols(name='procedures', symbol='\uf487')
-product_hunt = Symbols(name='product_hunt', symbol='\uf288')
-project_diagram = Symbols(name='project_diagram', symbol='\uf542')
-pushed = Symbols(name='pushed', symbol='\uf3e1')
-puzzle_piece = Symbols(name='puzzle_piece', symbol='\uf12e')
-python = Symbols(name='python', symbol='\uf3e2')
-qq = Symbols(name='qq', symbol='\uf1d6')
-qrcode = Symbols(name='qrcode', symbol='\uf029')
-question = Symbols(name='question', symbol='\uf128')
-question_circle = Symbols(name='question_circle', symbol='\uf059')
-quidditch = Symbols(name='quidditch', symbol='\uf458')
-quinscape = Symbols(name='quinscape', symbol='\uf459')
-quora = Symbols(name='quora', symbol='\uf2c4')
-quote_left = Symbols(name='quote_left', symbol='\uf10d')
-quote_right = Symbols(name='quote_right', symbol='\uf10e')
-quran = Symbols(name='quran', symbol='\uf687')
-r_project = Symbols(name='r_project', symbol='\uf4f7')
-radiation = Symbols(name='radiation', symbol='\uf7b9')
-radiation_alt = Symbols(name='radiation_alt', symbol='\uf7ba')
-rainbow = Symbols(name='rainbow', symbol='\uf75b')
-random = Symbols(name='random', symbol='\uf074')
-raspberry_pi = Symbols(name='raspberry_pi', symbol='\uf7bb')
-ravelry = Symbols(name='ravelry', symbol='\uf2d9')
-react = Symbols(name='react', symbol='\uf41b')
-reacteurope = Symbols(name='reacteurope', symbol='\uf75d')
-readme = Symbols(name='readme', symbol='\uf4d5')
-rebel = Symbols(name='rebel', symbol='\uf1d0')
-receipt = Symbols(name='receipt', symbol='\uf543')
-recycle = Symbols(name='recycle', symbol='\uf1b8')
-red_river = Symbols(name='red_river', symbol='\uf3e3')
-reddit = Symbols(name='reddit', symbol='\uf1a1')
-reddit_alien = Symbols(name='reddit_alien', symbol='\uf281')
-reddit_square = Symbols(name='reddit_square', symbol='\uf1a2')
-redhat = Symbols(name='redhat', symbol='\uf7bc')
-redo = Symbols(name='redo', symbol='\uf01e')
-redo_alt = Symbols(name='redo_alt', symbol='\uf2f9')
-registered = Symbols(name='registered', symbol='\uf25d')
-renren = Symbols(name='renren', symbol='\uf18b')
-reply = Symbols(name='reply', symbol='\uf3e5')
-reply_all = Symbols(name='reply_all', symbol='\uf122')
-replyd = Symbols(name='replyd', symbol='\uf3e6')
-repostats_detatched = Symbols(name='repostats_detached', symbol= '\u2693')
-repostats_ahead = Symbols(name='repostats_ahead', symbol='\u2B06')
-repostats_behind = Symbols(name='repostats_behind', symbol='\u2B07')
-repostats_staged = Symbols(name='repostats_staged', symbol='\u2714')
-repostats_changed = Symbols(name='repostats_changed', symbol='\u270E')
-repostats_new = Symbols(name='repostats_new', symbol='\uf067')
-repostats_conflicted = Symbols(name='repostats_conflicted', symbol='\u273C')
-repostats_stash = Symbols(name='repostats_stash', symbol='\u2398')
-repostats_git = Symbols(name='repostats_git', symbol='\ue0a0')
-repostats_hg = Symbols(name='repostats_hg', symbol='\u263F')
-repostata_bzr = Symbols(name='repostats_bzr', symbol='\u2B61\u20DF')
-repostats_fossil = Symbols(name='repostats_fossil', symbol='\u2332')
-repostats_svn =  Symbols(name='repostats_svn', symbol='\u2446')
-repostats_url = Symbols(name='repostats_url', symbol='\uf959')
-republican = Symbols(name='republican', symbol='\uf75e')
-researchgate = Symbols(name='researchgate', symbol='\uf4f8')
-resolving = Symbols(name='resolving', symbol='\uf3e7')
-restroom = Symbols(name='restroom', symbol='\uf7bd')
-retweet = Symbols(name='retweet', symbol='\uf079')
-rev = Symbols(name='rev', symbol='\uf5b2')
-ribbon = Symbols(name='ribbon', symbol='\uf4d6')
-ring = Symbols(name='ring', symbol='\uf70b')
-road = Symbols(name='road', symbol='\uf018')
-robot = Symbols(name='robot', symbol='\uf544')
-rocket = Symbols(name='rocket', symbol='\uf135')
-rocketchat = Symbols(name='rocketchat', symbol='\uf3e8')
-rockrms = Symbols(name='rockrms', symbol='\uf3e9')
-route = Symbols(name='route', symbol='\uf4d7')
-rss = Symbols(name='rss', symbol='\uf09e')
-rss_square = Symbols(name='rss_square', symbol='\uf143')
-ruble_sign = Symbols(name='ruble_sign', symbol='\uf158')
-ruby = Symbols(name='ruby', symbol='\uf166')
-ruler = Symbols(name='ruler', symbol='\uf545')
-ruler_combined = Symbols(name='ruler_combined', symbol='\uf546')
-ruler_horizontal = Symbols(name='ruler_horizontal', symbol='\uf547')
-ruler_vertical = Symbols(name='ruler_vertical', symbol='\uf548')
-running = Symbols(name='running', symbol='\uf70c')
-rupee_sign = Symbols(name='rupee_sign', symbol='\uf156')
-sad_cry = Symbols(name='sad_cry', symbol='\uf5b3')
-sad_tear = Symbols(name='sad_tear', symbol='\uf5b4')
-safari = Symbols(name='safari', symbol='\uf267')
-salesforce = Symbols(name='salesforce', symbol='\uf83b')
-sass = Symbols(name='sass', symbol='\uf41e')
-satellite = Symbols(name='satellite', symbol='\uf7bf')
-satellite_dish = Symbols(name='satellite_dish', symbol='\uf7c0')
-save = Symbols(name='save', symbol='\uf0c7')
-schlix = Symbols(name='schlix', symbol='\uf3ea')
-school = Symbols(name='school', symbol='\uf549')
-screwdriver = Symbols(name='screwdriver', symbol='\uf54a')
-scribd = Symbols(name='scribd', symbol='\uf28a')
-scroll = Symbols(name='scroll', symbol='\uf70e')
-sd_card = Symbols(name='sd_card', symbol='\uf7c2')
-search = Symbols(name='search', symbol='\uf002')
-search_dollar = Symbols(name='search_dollar', symbol='\uf688')
-search_location = Symbols(name='search_location', symbol='\uf689')
-search_minus = Symbols(name='search_minus', symbol='\uf010')
-search_plus = Symbols(name='search_plus', symbol='\uf00e')
-searchengin = Symbols(name='searchengin', symbol='\uf3eb')
-seedling = Symbols(name='seedling', symbol='\uf4d8')
-sellcast = Symbols(name='sellcast', symbol='\uf2da')
-sellsy = Symbols(name='sellsy', symbol='\uf213')
-separator_flames = Symbols(name='separator_flames', symbol='\uE0c0')
-separator_thin_flames = Symbols(name='separator_thin_flames', symbol='\uE0b1')
-separator_patched = Symbols(name='separator_patched', symbol='\uE0cc')
-separator_thin_patched = Symbols(name='separator_thin_patched', symbol='\uE0b1')
-separator_slanted = Symbols(name='separator_slanted', symbol='\u27B2')
-separator_thin_slanted = Symbols(name='separator_thin_slanted', symbol='\uE0b5')
-separator_rounded = Symbols(name='separator_rounded', symbol='\uE0b4')
-separator_thin_rounded = Symbols(name='separator_thin_rounded', symbol='\uE0b5')
-separator_lego = Symbols(name='separator_lego', symbol='\uE0d1')
-separator_thin_lego = Symbols(name='separator_thin_lego', symbol='\uf105')
-server = Symbols(name='server', symbol='\uf233')
-servicestack = Symbols(name='servicestack', symbol='\uf3ec')
-shapes = Symbols(name='shapes', symbol='\uf61f')
-share = Symbols(name='share', symbol='\uf064')
-share_alt = Symbols(name='share_alt', symbol='\uf1e0')
-share_alt_square = Symbols(name='share_alt_square', symbol='\uf1e1')
-share_square = Symbols(name='share_square', symbol='\uf14d')
-shekel_sign = Symbols(name='shekel_sign', symbol='\uf20b')
-shield_alt = Symbols(name='shield_alt', symbol='\uf3ed')
-ship = Symbols(name='ship', symbol='\uf21a')
-shipping_fast = Symbols(name='shipping_fast', symbol='\uf48b')
-shirtsinbulk = Symbols(name='shirtsinbulk', symbol='\uf214')
-shoe_prints = Symbols(name='shoe_prints', symbol='\uf54b')
-shopping_bag = Symbols(name='shopping_bag', symbol='\uf290')
-shopping_basket = Symbols(name='shopping_basket', symbol='\uf291')
-shopping_cart = Symbols(name='shopping_cart', symbol='\uf07a')
-shopware = Symbols(name='shopware', symbol='\uf5b5')
-shower = Symbols(name='shower', symbol='\uf2cc')
-shuttle_van = Symbols(name='shuttle_van', symbol='\uf5b6')
-sign = Symbols(name='sign', symbol='\uf4d9')
-signin = Symbols(name='sign_in_alt', symbol='\uf2f6')
-sign_language = Symbols(name='sign_language', symbol='\uf2a7')
-signout = Symbols(name='sign_out_alt', symbol='\uf2f5')
-signal = Symbols(name='signal', symbol='\uf012')
-signature = Symbols(name='signature', symbol='\uf5b7')
-sim_card = Symbols(name='sim_card', symbol='\uf7c4')
-simplybuilt = Symbols(name='simplybuilt', symbol='\uf215')
-sistrix = Symbols(name='sistrix', symbol='\uf3ee')
-sitemap = Symbols(name='sitemap', symbol='\uf0e8')
-sith = Symbols(name='sith', symbol='\uf512')
-skating = Symbols(name='skating', symbol='\uf7c5')
-sketch = Symbols(name='sketch', symbol='\uf7c6')
-skiing = Symbols(name='skiing', symbol='\uf7c9')
-skiing_nordic = Symbols(name='skiing_nordic', symbol='\uf7ca')
-skull = Symbols(name='skull', symbol='\uf54c')
-skull_crossbones = Symbols(name='skull_crossbones', symbol='\uf714')
-skyatlas = Symbols(name='skyatlas', symbol='\uf216')
-skype = Symbols(name='skype', symbol='\uf17e')
-slack = Symbols(name='slack', symbol='\uf198')
-slack_hash = Symbols(name='slack_hash', symbol='\uf3ef')
-slash = Symbols(name='slash', symbol='\uf715')
-sleigh = Symbols(name='sleigh', symbol='\uf7cc')
-sliders_h = Symbols(name='sliders_h', symbol='\uf1de')
-slideshare = Symbols(name='slideshare', symbol='\uf1e7')
-smile = Symbols(name='smile', symbol='\uf118')
-smile_beam = Symbols(name='smile_beam', symbol='\uf5b8')
-smile_wink = Symbols(name='smile_wink', symbol='\uf4da')
-smog = Symbols(name='smog', symbol='\uf75f')
-smoking = Symbols(name='smoking', symbol='\uf48d')
-smoking_ban = Symbols(name='smoking_ban', symbol='\uf54d')
-sms = Symbols(name='sms', symbol='\uf7cd')
-snapchat = Symbols(name='snapchat', symbol='\uf2ab')
-snapchat_ghost = Symbols(name='snapchat_ghost', symbol='\uf2ac')
-snapchat_square = Symbols(name='snapchat_square', symbol='\uf2ad')
-snowboarding = Symbols(name='snowboarding', symbol='\uf7ce')
-snowflake = Symbols(name='snowflake', symbol='\uf2dc')
-snowman = Symbols(name='snowman', symbol='\uf7d0')
-snowplow = Symbols(name='snowplow', symbol='\uf7d2')
-socks = Symbols(name='socks', symbol='\uf696')
-solar_panel = Symbols(name='solar_panel', symbol='\uf5ba')
-sort = Symbols(name='sort', symbol='\uf0dc')
-sort_alpha_down = Symbols(name='sort_alpha_down', symbol='\uf15d')
-sort_alpha_up = Symbols(name='sort_alpha_up', symbol='\uf15e')
-sort_amount_down = Symbols(name='sort_amount_down', symbol='\uf160')
-sort_amount_up = Symbols(name='sort_amount_up', symbol='\uf161')
-sort_down = Symbols(name='sort_down', symbol='\uf0dd')
-sort_numeric_down = Symbols(name='sort_numeric_down', symbol='\uf162')
-sort_numeric_up = Symbols(name='sort_numeric_up', symbol='\uf163')
-sort_up = Symbols(name='sort_up', symbol='\uf0de')
-soundcloud = Symbols(name='soundcloud', symbol='\uf1be')
-sourcetree = Symbols(name='sourcetree', symbol='\uf7d3')
-spa = Symbols(name='spa', symbol='\uf5bb')
-space_shuttle = Symbols(name='space_shuttle', symbol='\uf197')
-speakap = Symbols(name='speakap', symbol='\uf3f3')
-speaker_deck = Symbols(name='speaker_deck', symbol='\uf83c')
-spider = Symbols(name='spider', symbol='\uf717')
-spinner = Symbols(name='spinner', symbol='\uf110')
-splotch = Symbols(name='splotch', symbol='\uf5bc')
-splunk = Symbols(name='splunk', symbol='\uf5d8')
-spotify = Symbols(name='spotify', symbol='\uf1bc')
-spray_can = Symbols(name='spray_can', symbol='\uf5bd')
-square = Symbols(name='square', symbol='\uf0c8')
-square_full = Symbols(name='square_full', symbol='\uf45c')
-square_root_alt = Symbols(name='square_root_alt', symbol='\uf698')
-squarespace = Symbols(name='squarespace', symbol='\uf5be')
-stack_exchange = Symbols(name='stack_exchange', symbol='\uf18d')
-stack_overflow = Symbols(name='stack_overflow', symbol='\uf16c')
-stamp = Symbols(name='stamp', symbol='\uf5bf')
-star = Symbols(name='star', symbol='\uf005')
-star_crescent = Symbols(name='star_and_crescent', symbol='\uf699')
-star_half = Symbols(name='star_half', symbol='\uf089')
-star_half_alt = Symbols(name='star_half_alt', symbol='\uf5c0')
-star_of_david = Symbols(name='star_of_david', symbol='\uf69a')
-star_of_life = Symbols(name='star_of_life', symbol='\uf621')
-staylinked = Symbols(name='staylinked', symbol='\uf3f5')
-steam = Symbols(name='steam', symbol='\uf1b6')
-steam_square = Symbols(name='steam_square', symbol='\uf1b7')
-steam_symbol = Symbols(name='steam_symbol', symbol='\uf3f6')
-step_backward = Symbols(name='step_backward', symbol='\uf048')
-step_forward = Symbols(name='step_forward', symbol='\uf051')
-stethoscope = Symbols(name='stethoscope', symbol='\uf0f1')
-sticker_mule = Symbols(name='sticker_mule', symbol='\uf3f7')
-sticky_note = Symbols(name='sticky_note', symbol='\uf249')
-stop = Symbols(name='stop', symbol='\uf04d')
-stop_circle = Symbols(name='stop_circle', symbol='\uf28d')
-stopwatch = Symbols(name='stopwatch', symbol='\uf2f2')
-store = Symbols(name='store', symbol='\uf54e')
-store_alt = Symbols(name='store_alt', symbol='\uf54f')
-strava = Symbols(name='strava', symbol='\uf428')
-stream = Symbols(name='stream', symbol='\uf550')
-street_view = Symbols(name='street_view', symbol='\uf21d')
-strikethrough = Symbols(name='strikethrough', symbol='\uf0cc')
-stripe = Symbols(name='stripe', symbol='\uf429')
-stripe_s = Symbols(name='stripe_s', symbol='\uf42a')
-stroopwafel = Symbols(name='stroopwafel', symbol='\uf551')
-studiovinari = Symbols(name='studiovinari', symbol='\uf3f8')
-stumbleupon = Symbols(name='stumbleupon', symbol='\uf1a4')
-stumbleupon_circle = Symbols(name='stumbleupon_circle', symbol='\uf1a3')
-subscript = Symbols(name='subscript', symbol='\uf12c')
-subway = Symbols(name='subway', symbol='\uf239')
-suitcase = Symbols(name='suitcase', symbol='\uf0f2')
-suitcase_rolling = Symbols(name='suitcase_rolling', symbol='\uf5c1')
-sun = Symbols(name='sun', symbol='\uf185')
-superpowers = Symbols(name='superpowers', symbol='\uf2dd')
-superscript = Symbols(name='superscript', symbol='\uf12b')
-supple = Symbols(name='supple', symbol='\uf3f9')
-surprise = Symbols(name='surprise', symbol='\uf5c2')
-suse = Symbols(name='suse', symbol='\uf7d6')
-swatchbook = Symbols(name='swatchbook', symbol='\uf5c3')
-swimmer = Symbols(name='swimmer', symbol='\uf5c4')
-swimming_pool = Symbols(name='swimming_pool', symbol='\uf5c5')
-symfony = Symbols(name='symfony', symbol='\uf83d')
-synagogue = Symbols(name='synagogue', symbol='\uf69b')
-sync = Symbols(name='sync', symbol='\uf021')
-sync_alt = Symbols(name='sync_alt', symbol='\uf2f1')
-syringe = Symbols(name='syringe', symbol='\uf48e')
-table = Symbols(name='table', symbol='\uf0ce')
-table_tennis = Symbols(name='table_tennis', symbol='\uf45d')
-tablet = Symbols(name='tablet', symbol='\uf10a')
-tablet_alt = Symbols(name='tablet_alt', symbol='\uf3fa')
-tablets = Symbols(name='tablets', symbol='\uf490')
-tachometer_alt = Symbols(name='tachometer_alt', symbol='\uf3fd')
-tag = Symbols(name='tag', symbol='\uf02b')
-tags = Symbols(name='tags', symbol='\uf02c')
-tape = Symbols(name='tape', symbol='\uf4db')
-tasks = Symbols(name='tasks', symbol='\uf0ae')
-taxi = Symbols(name='taxi', symbol='\uf1ba')
-teamspeak = Symbols(name='teamspeak', symbol='\uf4f9')
-teeth = Symbols(name='teeth', symbol='\uf62e')
-teeth_open = Symbols(name='teeth_open', symbol='\uf62f')
-telegram = Symbols(name='telegram', symbol='\uf2c6')
-telegram_plane = Symbols(name='telegram_plane', symbol='\uf3fe')
-temperature_high = Symbols(name='temperature_high', symbol='\uf769')
-temperature_low = Symbols(name='temperature_low', symbol='\uf76b')
-tencent_weibo = Symbols(name='tencent_weibo', symbol='\uf1d5')
-tenge = Symbols(name='tenge', symbol='\uf7d7')
-terminal = Symbols(name='terminal', symbol='\uf120')
-text_height = Symbols(name='text_height', symbol='\uf034')
-text_width = Symbols(name='text_width', symbol='\uf035')
-th = Symbols(name='th', symbol='\uf00a')
-th_large = Symbols(name='th_large', symbol='\uf009')
-th_list = Symbols(name='th_list', symbol='\uf00b')
-the_red_yeti = Symbols(name='the_red_yeti', symbol='\uf69d')
-theater_masks = Symbols(name='theater_masks', symbol='\uf630')
-themeco = Symbols(name='themeco', symbol='\uf5c6')
-themeisle = Symbols(name='themeisle', symbol='\uf2b2')
-thermometer = Symbols(name='thermometer', symbol='\uf491')
-thermometer_empty = Symbols(name='thermometer_empty', symbol='\uf2cb')
-thermometer_full = Symbols(name='thermometer_full', symbol='\uf2c7')
-thermometer_half = Symbols(name='thermometer_half', symbol='\uf2c9')
-thermometer_quarter = Symbols(name='thermometer_quarter', symbol='\uf2ca')
-thermometer_three_quarters = Symbols(name='thermometer_three_quarters', symbol='\uf2c8')
-think_peaks = Symbols(name='think_peaks', symbol='\uf731')
-thumbs_down = Symbols(name='thumbs_down', symbol='\uf165')
-thumbs_up = Symbols(name='thumbs_up', symbol='\uf164')
-thumbtack = Symbols(name='thumbtack', symbol='\uf08d')
-ticket_alt = Symbols(name='ticket_alt', symbol='\uf3ff')
-times = Symbols(name='times', symbol='\uf00d')
-times_circle = Symbols(name='times_circle', symbol='\uf057')
-tint = Symbols(name='tint', symbol='\uf043')
-tint_slash = Symbols(name='tint_slash', symbol='\uf5c7')
-tired = Symbols(name='tired', symbol='\uf5c8')
-toggle_off = Symbols(name='toggle_off', symbol='\uf204')
-toggle_on = Symbols(name='toggle_on', symbol='\uf205')
-toilet = Symbols(name='toilet', symbol='\uf7d8')
-toilet_paper = Symbols(name='toilet_paper', symbol='\uf71e')
-toolbox = Symbols(name='toolbox', symbol='\uf552')
-tools = Symbols(name='tools', symbol='\uf7d9')
-tooth = Symbols(name='tooth', symbol='\uf5c9')
-torah = Symbols(name='torah', symbol='\uf6a0')
-torii_gate = Symbols(name='torii_gate', symbol='\uf6a1')
-tractor = Symbols(name='tractor', symbol='\uf722')
-trade_federation = Symbols(name='trade_federation', symbol='\uf513')
-trademark = Symbols(name='trademark', symbol='\uf25c')
-traffic_light = Symbols(name='traffic_light', symbol='\uf637')
-train = Symbols(name='train', symbol='\uf238')
-tram = Symbols(name='tram', symbol='\uf7da')
-transgender = Symbols(name='transgender', symbol='\uf224')
-transgender_alt = Symbols(name='transgender_alt', symbol='\uf225')
-trash = Symbols(name='trash', symbol='\uf1f8')
-trash_alt = Symbols(name='trash_alt', symbol='\uf2ed')
-trash_restore = Symbols(name='trash_restore', symbol='\uf829')
-trash_restore_alt = Symbols(name='trash_restore_alt', symbol='\uf82a')
-tree = Symbols(name='tree', symbol='\uf1bb')
-trello = Symbols(name='trello', symbol='\uf181')
-tripadvisor = Symbols(name='tripadvisor', symbol='\uf262')
-trophy = Symbols(name='trophy', symbol='\uf091')
-truck = Symbols(name='truck', symbol='\uf0d1')
-truck_loading = Symbols(name='truck_loading', symbol='\uf4de')
-truck_monster = Symbols(name='truck_monster', symbol='\uf63b')
-truck_moving = Symbols(name='truck_moving', symbol='\uf4df')
-truck_pickup = Symbols(name='truck_pickup', symbol='\uf63c')
-tshirt = Symbols(name='tshirt', symbol='\uf553')
-tty = Symbols(name='tty', symbol='\uf1e4')
-tumblr = Symbols(name='tumblr', symbol='\uf173')
-tumblr_square = Symbols(name='tumblr_square', symbol='\uf174')
-tv = Symbols(name='tv', symbol='\uf26c')
-twitch = Symbols(name='twitch', symbol='\uf1e8')
-twitter = Symbols(name='twitter', symbol='\uf099')
-twitter_square = Symbols(name='twitter_square', symbol='\uf081')
-typo3 = Symbols(name='typo3', symbol='\uf42b')
-uber = Symbols(name='uber', symbol='\uf402')
-ubuntu = Symbols(name='ubuntsymbol=', symbol='\uf7df')
-uikit = Symbols(name='uikit', symbol='\uf403')
-umbrella = Symbols(name='umbrella', symbol='\uf0e9')
-umbrella_beach = Symbols(name='umbrella_beach', symbol='\uf5ca')
-underline = Symbols(name='underline', symbol='\uf0cd')
-undo = Symbols(name='undo', symbol='\uf0e2')
-undo_alt = Symbols(name='undo_alt', symbol='\uf2ea')
-uniregistry = Symbols(name='uniregistry', symbol='\uf404')
-universal_access = Symbols(name='universal_access', symbol='\uf29a')
-university = Symbols(name='university', symbol='\uf19c')
-unlink = Symbols(name='unlink', symbol='\uf127')
-unlock = Symbols(name='unlock', symbol='\uf09c')
-unlock_alt = Symbols(name='unlock_alt', symbol='\uf13e')
-untappd = Symbols(name='untappd', symbol='\uf405')
-upload = Symbols(name='upload', symbol='\uf093')
-ups = Symbols(name='ups', symbol='\uf7e0')
-url = Symbols(name='link', symbol='\uf116')
-usb = Symbols(name='usb', symbol='\uf287')
-user = Symbols(name='user', symbol='\uf007')
-user_alt = Symbols(name='user_alt', symbol='\uf406')
-user_alt_slash = Symbols(name='user_alt_slash', symbol='\uf4fa')
-user_astronaut = Symbols(name='user_astronaut', symbol='\uf4fb')
-user_check = Symbols(name='user_check', symbol='\uf4fc')
-user_circle = Symbols(name='user_circle', symbol='\uf2bd')
-user_clock = Symbols(name='user_clock', symbol='\uf4fd')
-user_cog = Symbols(name='user_cog', symbol='\uf4fe')
-user_edit = Symbols(name='user_edit', symbol='\uf4ff')
-user_friends = Symbols(name='user_friends', symbol='\uf500')
-user_graduate = Symbols(name='user_graduate', symbol='\uf501')
-user_injured = Symbols(name='user_injured', symbol='\uf728')
-user_lock = Symbols(name='user_lock', symbol='\uf502')
-user_md = Symbols(name='user_md', symbol='\uf0f0')
-user_minus = Symbols(name='user_minus', symbol='\uf503')
-user_ninja = Symbols(name='user_ninja', symbol='\uf504')
-user_nurse = Symbols(name='user_nurse', symbol='\uf82f')
-user_plus = Symbols(name='user_plus', symbol='\uf234')
-user_secret = Symbols(name='user_secret', symbol='\uf21b')
-user_shield = Symbols(name='user_shield', symbol='\uf505')
-user_slash = Symbols(name='user_slash', symbol='\uf506')
-user_tag = Symbols(name='user_tag', symbol='\uf507')
-user_tie = Symbols(name='user_tie', symbol='\uf508')
-user_times = Symbols(name='user_times', symbol='\uf235')
-users = Symbols(name='users', symbol='\uf0c0')
-users_cog = Symbols(name='users_cog', symbol='\uf509')
-usps = Symbols(name='usps', symbol='\uf7e1')
-ussunnah = Symbols(name='ussunnah', symbol='\uf407')
-utensil_spoon = Symbols(name='utensil_spoon', symbol='\uf2e5')
-utensils = Symbols(name='utensils', symbol='\uf2e7')
-vaadin = Symbols(name='vaadin', symbol='\uf408')
-vector_square = Symbols(name='vector_square', symbol='\uf5cb')
-venus = Symbols(name='venus', symbol='\uf221')
-venus_double = Symbols(name='venus_double', symbol='\uf226')
-venus_mars = Symbols(name='venus_mars', symbol='\uf228')
-viacoin = Symbols(name='viacoin', symbol='\uf237')
-viadeo = Symbols(name='viadeo', symbol='\uf2a9')
-viadeo_square = Symbols(name='viadeo_square', symbol='\uf2aa')
-vial = Symbols(name='vial', symbol='\uf492')
-vials = Symbols(name='vials', symbol='\uf493')
-viber = Symbols(name='viber', symbol='\uf409')
-video = Symbols(name='video', symbol='\uf03d')
-video_slash = Symbols(name='video_slash', symbol='\uf4e2')
-vihara = Symbols(name='vihara', symbol='\uf6a7')
-vimeo = Symbols(name='vimeo', symbol='\uf40a')
-vimeo_square = Symbols(name='vimeo_square', symbol='\uf194')
-vimeo_v = Symbols(name='vimeo_v', symbol='\uf27d')
-vine = Symbols(name='vine', symbol='\uf1ca')
-vk = Symbols(name='vk', symbol='\uf189')
-vnv = Symbols(name='vnv', symbol='\uf40b')
-volleyball_ball = Symbols(name='volleyball_ball', symbol='\uf45f')
-volume_down = Symbols(name='volume_down', symbol='\uf027')
-volume_mute = Symbols(name='volume_mute', symbol='\uf6a9')
-volume_off = Symbols(name='volume_off', symbol='\uf026')
-volume_up = Symbols(name='volume_up', symbol='\uf028')
-vote_yea = Symbols(name='vote_yea', symbol='\uf772')
-vr_cardboard = Symbols(name='vr_cardboard', symbol='\uf729')
-vuejs = Symbols(name='vuejs', symbol='\uf41f')
-walking = Symbols(name='walking', symbol='\uf554')
-wallet = Symbols(name='wallet', symbol='\uf555')
-warehouse = Symbols(name='warehouse', symbol='\uf494')
-water = Symbols(name='water', symbol='\uf773')
-wave_square = Symbols(name='wave_square', symbol='\uf83e')
-waze = Symbols(name='waze', symbol='\uf83f')
-weebly = Symbols(name='weebly', symbol='\uf5cc')
-weibo = Symbols(name='weibo', symbol='\uf18a')
-weight = Symbols(name='weight', symbol='\uf496')
-weight_hanging = Symbols(name='weight_hanging', symbol='\uf5cd')
-weixin = Symbols(name='weixin', symbol='\uf1d7')
-whatsapp = Symbols(name='whatsapp', symbol='\uf232')
-whatsapp_square = Symbols(name='whatsapp_square', symbol='\uf40c')
-wheelchair = Symbols(name='wheelchair', symbol='\uf193')
-whmcs = Symbols(name='whmcs', symbol='\uf40d')
-wifi = Symbols(name='wifi', symbol='\uf1eb')
-wikipedia_w = Symbols(name='wikipedia_w', symbol='\uf266')
-wind = Symbols(name='wind', symbol='\uf72e')
-window_close = Symbols(name='window_close', symbol='\uf410')
-window_maximize = Symbols(name='window_maximize', symbol='\uf2d0')
-window_minimize = Symbols(name='window_minimize', symbol='\uf2d1')
-window_restore = Symbols(name='window_restore', symbol='\uf2d2')
-windows = Symbols(name='windows', symbol='\uf17a')
-wine_bottle = Symbols(name='wine_bottle', symbol='\uf72f')
-wine_glass = Symbols(name='wine_glass', symbol='\uf4e3')
-wine_glass_alt = Symbols(name='wine_glass_alt', symbol='\uf5ce')
-wix = Symbols(name='wix', symbol='\uf5cf')
-wizards_of_the_coast = Symbols(name='wizards_of_the_coast', symbol='\uf730')
-wolf_pack_battalion = Symbols(name='wolf_pack_battalion', symbol='\uf514')
-won_sign = Symbols(name='won_sign', symbol='\uf159')
-wordpress = Symbols(name='wordpress', symbol='\uf19a')
-wordpress_simple = Symbols(name='wordpress_simple', symbol='\uf411')
-wpbeginner = Symbols(name='wpbeginner', symbol='\uf297')
-wpexplorer = Symbols(name='wpexplorer', symbol='\uf2de')
-wpforms = Symbols(name='wpforms', symbol='\uf298')
-wpressr = Symbols(name='wpressr', symbol='\uf3e4')
-wrench = Symbols(name='wrench', symbol='\uf0ad')
-x_ray = Symbols(name='x_ray', symbol='\uf497')
-xbox = Symbols(name='xbox', symbol='\uf412')
-xing = Symbols(name='xing', symbol='\uf168')
-xing_square = Symbols(name='xing_square', symbol='\uf169')
-y_combinator = Symbols(name='y_combinator', symbol='\uf23b')
-yahoo = Symbols(name='yahoo', symbol='\uf19e')
-yammer = Symbols(name='yammer', symbol='\uf840')
-yandex = Symbols(name='yandex', symbol='\uf413')
-yandex_international = Symbols(name='yandex_international', symbol='\uf414')
-yarn = Symbols(name='yarn', symbol='\uf7e3')
-yelp = Symbols(name='yelp', symbol='\uf1e9')
-yen_sign = Symbols(name='yen_sign', symbol='\uf157')
-yin_yang = Symbols(name='yin_yang', symbol='\uf6ad')
-yoast = Symbols(name='yoast', symbol='\uf2b1')
-youtube = Symbols(name='youtube', symbol='\uf167')
-youtube_square = Symbols(name='youtube_square', symbol='\uf431')
-zhihu = Symbols(name='zhihsymbol=', symbol='\uf63f')
diff --git a/powerline_shell/themes/__init__.py b/powerline_shell/themes/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/powerline_shell/themes/basic.py b/powerline_shell/themes/basic.py
deleted file mode 100644
index 903ed29..0000000
--- a/powerline_shell/themes/basic.py
+++ /dev/null
@@ -1,52 +0,0 @@
-from powerline_shell.themes.default import DefaultColor
-
-
-class Color(DefaultColor):
-    """Basic theme which only uses colors in 0-15 range"""
-    USERNAME_FG = 8
-    USERNAME_BG = 15
-    USERNAME_ROOT_BG = 1
-
-    HOSTNAME_FG = 8
-    HOSTNAME_BG = 7
-
-    HOME_SPECIAL_DISPLAY = False
-    PATH_BG = 8  # dark grey
-    PATH_FG = 7  # light grey
-    CWD_FG = 15  # white
-    SEPARATOR_FG = 7
-
-    READONLY_BG = 1
-    READONLY_FG = 15
-
-    REPO_CLEAN_BG = 2   # green
-    REPO_CLEAN_FG = 0   # black
-    REPO_DIRTY_BG = 1   # red
-    REPO_DIRTY_FG = 15  # white
-
-    JOBS_FG = 14
-    JOBS_BG = 8
-
-    CMD_PASSED_BG = 8
-    CMD_PASSED_FG = 15
-    CMD_FAILED_BG = 11
-    CMD_FAILED_FG = 0
-
-    SVN_CHANGES_BG = REPO_DIRTY_BG
-    SVN_CHANGES_FG = REPO_DIRTY_FG
-
-    VIRTUAL_ENV_BG = 2
-    VIRTUAL_ENV_FG = 0
-
-    AWS_PROFILE_FG = 14
-    AWS_PROFILE_BG = 8
-
-    TIME_FG = 8
-    TIME_BG = 7
-
-    ASCIINEMA_BG = 15
-    ASCIINEMA_FG = 1
-
-    PRIVATE_IP_FG = 8
-    PRIVATE_IP_BG = 15
-    PRIVATE_IP_OFFLINE = 124
diff --git a/powerline_shell/themes/default.py b/powerline_shell/themes/default.py
deleted file mode 100644
index 5611d6a..0000000
--- a/powerline_shell/themes/default.py
+++ /dev/null
@@ -1,111 +0,0 @@
-class DefaultColor(object):
-    """
-    This class should have the default colors for every segment.
-    Please test every new segment with this theme first.
-    """
-    # RESET is not a real color code. It is used as in indicator
-    # within the code that any foreground / background color should
-    # be cleared
-    RESET = -1
-
-    USERNAME_FG = 250
-    USERNAME_BG = 240
-    USERNAME_ROOT_BG = 124
-
-    HOSTNAME_FG = 250
-    HOSTNAME_BG = 238
-
-    HOME_SPECIAL_DISPLAY = True
-    HOME_BG = 31  # blueish
-    HOME_FG = 15  # white
-    PATH_BG = 237 # dark grey
-    PATH_FG = 250 # light grey
-    CWD_FG = 254  # nearly-white grey
-    SEPARATOR_FG = 244
-
-    READONLY_BG = 124
-    READONLY_FG = 254
-
-    SSH_BG = 166  # medium orange
-    SSH_FG = 254
-
-    REPO_CLEAN_BG = 148  # a light green color
-    REPO_CLEAN_FG = 0  # black
-    REPO_DIRTY_BG = 161  # pink/red
-    REPO_DIRTY_FG = 15  # white
-
-    JOBS_FG = 39
-    JOBS_BG = 238
-
-    CMD_PASSED_BG = 236
-    CMD_PASSED_FG = 15
-    CMD_FAILED_BG = 161
-    CMD_FAILED_FG = 15
-
-    SVN_CHANGES_BG = 148
-    SVN_CHANGES_FG = 22  # dark green
-
-    GIT_AHEAD_BG = 240
-    GIT_AHEAD_FG = 250
-    GIT_BEHIND_BG = 240
-    GIT_BEHIND_FG = 250
-    GIT_STAGED_BG = 22
-    GIT_STAGED_FG = 15
-    GIT_NOTSTAGED_BG = 130
-    GIT_NOTSTAGED_FG = 15
-    GIT_UNTRACKED_BG = 52
-    GIT_UNTRACKED_FG = 15
-    GIT_CONFLICTED_BG = 9
-    GIT_CONFLICTED_FG = 15
-    GIT_URL_BG = 9
-    GIT_URL_FG = 15
-
-    GIT_STASH_BG = 221
-    GIT_STASH_FG = 0
-
-    VIRTUAL_ENV_BG = 35  # a mid-tone green
-    VIRTUAL_ENV_FG = 00
-
-    BATTERY_NORMAL_BG = 22
-    BATTERY_NORMAL_FG = 7
-    BATTERY_WARN_FG = 166  # medium orange
-    BATTERY_WARN_BG = 254
-    BATTERY_LOW_BG = 196
-    BATTERY_LOW_FG = 7
-
-    AWS_PROFILE_FG = 39
-    AWS_PROFILE_BG = 237
-
-    AWS_REGION_FG = 35
-    AWS_REGION_BG = 237
-
-
-
-    KUBECONFIG_PATH_FG = 39
-    KUBECONFIG_PATH_BG = 238
-
-    TIME_FG = 250
-    TIME_BG = 238
-
-    ASCIINEMA_BG = 254
-    ASCIINEMA_FG = 124
-
-    RUBY_VERSION_FG = 15
-    RUBY_VERSION_BG = 237
-
-    PYTHON_VERSION_FG = 15
-    PYTHON_VERSION_BG = 237
-
-    PRIVATE_IP_FG = 15
-    PRIVATE_IP_BG = 18
-    PRIVATE_IP_OFFLINE = 124
-
-    PLATFORM_FG = 254
-    PLATFORM_FG = 124
-
-class Color(DefaultColor):
-    """
-    This subclass is required when the user chooses to use 'default' theme.
-    Because the segments require a 'Color' class for every theme.
-    """
-    pass
diff --git a/powerline_shell/themes/flames.py b/powerline_shell/themes/flames.py
deleted file mode 100644
index 67c16cb..0000000
--- a/powerline_shell/themes/flames.py
+++ /dev/null
@@ -1,52 +0,0 @@
-from powerline_shell.themes.default import DefaultColor
-
-class Color(DefaultColor):
-    USERNAME_FG = 250
-    #USERNAME_BG = 240
-    USERNAME_BG = 226
-    #USERNAME_ROOT_BG = 124
-    USERNAME_ROOT_BG = 160
-
-    HOSTNAME_FG = 250
-    HOSTNAME_BG = 238
-
-    HOME_SPECIAL_DISPLAY = True
-    #HOME_BG = 31  # blueish
-    HOME_BG = 208  # blueish
-    HOME_FG = 15  # white
-    #PATH_BG = 237  # dark grey
-    PATH_BG = 166 # dark grey
-    #PATH_FG = 250  # light grey
-    PATH_FG = 15  # light grey
-    #CWD_FG = 254  # nearly-white grey
-    CWD_FG = 15 # nearly-white grey
-    #SEPARATOR_FG = 244
-    SEPARATOR_FG = 15
-
-    #READONLY_BG = 124
-    READONLY_BG = 160
-    READONLY_FG = 254
-
-    SSH_BG = 166 # medium orange
-    SSH_FG = 254
-
-    REPO_CLEAN_BG = 148  # a light green color
-    REPO_CLEAN_FG = 0  # black
-    REPO_DIRTY_BG = 161  # pink/red
-    REPO_DIRTY_FG = 15  # white
-
-    JOBS_FG = 39
-    JOBS_BG = 238
-
-    #CMD_PASSED_BG = 236
-    CMD_PASSED_BG = 160
-    CMD_PASSED_FG = 15
-    #CMD_FAILED_BG = 161
-    CMD_FAILED_BG = 160
-    CMD_FAILED_FG = 15
-
-    SVN_CHANGES_BG = 148
-    SVN_CHANGES_FG = 22  # dark green
-
-    VIRTUAL_ENV_BG = 35  # a mid-tone green
-    VIRTUAL_ENV_FG = 00
diff --git a/powerline_shell/themes/gruvbox.py b/powerline_shell/themes/gruvbox.py
deleted file mode 100644
index d3c883c..0000000
--- a/powerline_shell/themes/gruvbox.py
+++ /dev/null
@@ -1,164 +0,0 @@
-from powerline_shell.themes.default import DefaultColor
-
-"""
-absolute colors based on
-https://github.com/morhetz/gruvbox/blob/master/colors/gruvbox.vim
-"""
-dark0 = 235
-dark1 = 237
-dark2 = 239
-dark3 = 241
-dark4 = 243
-dark5 = 232
-
-light0 = 229
-light1 = 223
-light2 = 250
-light3 = 248
-light4 = 246
-light5 = 255
-
-dark_gray  = 245
-light_gray = 244
-
-neutral_red    = 124
-neutral_green  = 106
-neutral_orange = 166
-neutral_yellow = 172
-neutral_blue   = 66
-neutral_purple = 132
-neutral_aqua   = 72
-
-bright_blueish = 159
-bright_red     = 167
-bright_green   = 142
-bright_yellow  = 214
-bright_blue    = 109
-bright_purple  = 175
-bright_aqua    = 108
-bright_orange  = 208
-
-faded_red    = 88
-faded_green  = 100
-faded_yellow = 136
-faded_blue   = 24
-faded_purple = 96
-faded_aqua   = 66
-faded_orange = 130
-
-class Color(DefaultColor):
-    USERNAME_ROOT_BG = faded_red
-    USERNAME_BG = dark2
-    USERNAME_FG = bright_purple
-
-    HOSTNAME_BG = dark1
-    HOSTNAME_FG = bright_purple
-
-    HOME_SPECIAL_DISPLAY = True
-    HOME_BG = neutral_blue
-    HOME_FG = light2
-    PATH_BG = dark5
-    PATH_FG = light3
-    CWD_FG = bright_blueish
-    SEPARATOR_FG = dark_gray
-
-    READONLY_BG = bright_red
-    READONLY_FG = light0
-
-    SSH_BG = faded_purple
-    SSH_FG = light0
-
-    REPO_CLEAN_BG = faded_green
-    REPO_CLEAN_FG = dark1
-    REPO_DIRTY_BG = faded_orange
-    REPO_DIRTY_FG = light0
-
-    JOBS_FG = neutral_aqua
-    JOBS_BG = dark1
-
-    CMD_PASSED_FG = light0
-    CMD_PASSED_BG = dark5
-    CMD_FAILED_FG = light3
-    CMD_FAILED_BG = neutral_red
-
-    SVN_CHANGES_FG = REPO_DIRTY_FG
-    SVN_CHANGES_BG = REPO_DIRTY_BG
-
-    GIT_AHEAD_BG = dark2
-    GIT_AHEAD_FG = light3
-    GIT_BEHIND_BG = dark2
-    GIT_BEHIND_FG = light3
-    GIT_STAGED_BG = neutral_green
-    GIT_STAGED_FG = light0
-    GIT_NOTSTAGED_BG = neutral_orange
-    GIT_NOTSTAGED_FG = light0
-    GIT_UNTRACKED_BG = faded_red
-    GIT_UNTRACKED_FG = light0
-    GIT_CONFLICTED_BG = neutral_red
-    GIT_CONFLICTED_FG = light0
-    GIT_STASH_BG = neutral_yellow
-    GIT_STASH_FG = dark0
-    GIT_URL_BG = faded_red
-    GIT_URL_FG = light0
-
-    VIRTUAL_ENV_BG = faded_green
-    VIRTUAL_ENV_FG = light0
-
-    BATTERY_NORMAL_BG = neutral_green
-    BATTERY_NORMAL_FG = dark2
-    BATTERY_WARN_FG = neutral_orange
-    BATTERY_WARN_BG = light0
-    BATTERY_LOW_BG = neutral_red
-    BATTERY_LOW_FG = light1
-
-    AWS_PROFILE_FG = neutral_aqua
-    AWS_PROFILE_BG = dark1
-
-    AWS_REGION_FG = neutral_yellow
-    AWS_REGION_BG = dark1
-
-    TIME_FG = light2
-    TIME_BG = dark4
-
-    PRIVATE_IP_FG = 148
-    PRIVATE_IP_BG = dark1
-    PRIVATE_IP_OFFLINE = neutral_red
-
-    PLATFORM_FG = light2
-    PLATFORM_BG = dark1
-
-    RUBY1_VERSION_FG = light2
-    RUBY1_VERSION_BG = dark1
-
-    SYMBOLS = {
-        "flames": {
-            "lock": u"\uE0A2",
-            "network": u"\uE0A1",
-            "separator": u"\uE0C0 ",
-            "separator_thin": u"\uE0b1"
-        },
-        'patched-blocks': {
-            'lock': u'\uE0A2',
-            'network': u'\uE0A1',
-            'separator': u'\uE0CC',
-            'separator_thin': u'\uE0B1'
-        },
-        'slanted': {
-            'lock': u'\uE0A2',
-            'network': u'\uE0A1',
-            'separator': u'\u27B2',
-            'separator_thin': u'\uE0B5'
-        },
-        'rounded': {
-            'lock': u'\uE0A2',
-            'network': u'\uE0A1',
-            'separator': u'\uE0B4',
-            'separator_thin': u'\uE0B5'
-        },
-        'lego-blocks': {
-            'lock': u'\uE0A2',
-            'network': u'\uE0A2',
-            'separator': u'\uE0D1',
-            'separator_thin': u'\uF105'
-            }
-    }
diff --git a/powerline_shell/themes/solarized_dark.py b/powerline_shell/themes/solarized_dark.py
deleted file mode 100644
index 4856b62..0000000
--- a/powerline_shell/themes/solarized_dark.py
+++ /dev/null
@@ -1,51 +0,0 @@
-from powerline_shell.themes.default import DefaultColor
-
-
-class Color(DefaultColor):
-    USERNAME_FG = 15
-    USERNAME_BG = 4
-    USERNAME_ROOT_BG = 1
-
-    HOSTNAME_FG = 15
-    HOSTNAME_BG = 10
-
-    HOME_SPECIAL_DISPLAY = False
-    PATH_FG = 7
-    PATH_BG = 10
-    CWD_FG = 15
-    SEPARATOR_FG = 14
-
-    READONLY_BG = 1
-    READONLY_FG = 7
-
-    REPO_CLEAN_FG = 14
-    REPO_CLEAN_BG = 0
-    REPO_DIRTY_FG = 3
-    REPO_DIRTY_BG = 0
-
-    JOBS_FG = 4
-    JOBS_BG = 8
-
-    CMD_PASSED_FG = 15
-    CMD_PASSED_BG = 2
-    CMD_FAILED_FG = 15
-    CMD_FAILED_BG = 1
-
-    SVN_CHANGES_FG = REPO_DIRTY_FG
-    SVN_CHANGES_BG = REPO_DIRTY_BG
-
-    VIRTUAL_ENV_BG = 15
-    VIRTUAL_ENV_FG = 2
-
-    AWS_PROFILE_FG = 7
-    AWS_PROFILE_BG = 2
-
-    TIME_FG = 15
-    TIME_BG = 10
-
-    ASCIINEMA_BG = 15
-    ASCIINEMA_FG = 1
-
-    PRIVATE_IP_FG = 15
-    PRIVATE_IP_BG = 4
-    PRIVATE_IP_OFFLINE = 124
diff --git a/powerline_shell/themes/solarized_light.py b/powerline_shell/themes/solarized_light.py
deleted file mode 100644
index cf67763..0000000
--- a/powerline_shell/themes/solarized_light.py
+++ /dev/null
@@ -1,48 +0,0 @@
-from powerline_shell.themes.default import DefaultColor
-
-
-class Color(DefaultColor):
-    USERNAME_FG = 15
-    USERNAME_BG = 4
-    USERNAME_ROOT_BG = 1
-
-    HOSTNAME_FG = 15
-    HOSTNAME_BG = 10
-
-    HOME_SPECIAL_DISPLAY = False
-    PATH_FG = 10
-    PATH_BG = 7
-    CWD_FG = 0
-    SEPARATOR_FG = 14
-
-    READONLY_BG = 1
-    READONLY_FG = 7
-
-    REPO_CLEAN_FG = 0
-    REPO_CLEAN_BG = 15
-    REPO_DIRTY_FG = 1
-    REPO_DIRTY_BG = 15
-
-    JOBS_FG = 4
-    JOBS_BG = 7
-
-    CMD_PASSED_FG = 15
-    CMD_PASSED_BG = 2
-    CMD_FAILED_FG = 15
-    CMD_FAILED_BG = 1
-
-    SVN_CHANGES_FG = REPO_DIRTY_FG
-    SVN_CHANGES_BG = REPO_DIRTY_BG
-
-    VIRTUAL_ENV_BG = 15
-    VIRTUAL_ENV_FG = 2
-
-    TIME_FG = 15
-    TIME_BG = 10
-
-    ASCIINEMA_BG = 15
-    ASCIINEMA_FG = 1
-
-    PRIVATE_IP_FG = 15
-    PRIVATE_IP_BG = 4
-    PRIVATE_IP_OFFLINE = 124
diff --git a/powerline_shell/themes/vitko.py b/powerline_shell/themes/vitko.py
deleted file mode 100644
index b6462a6..0000000
--- a/powerline_shell/themes/vitko.py
+++ /dev/null
@@ -1,143 +0,0 @@
-from powerline_shell.themes.default import DefaultColor
-
-"""
-absolute colors based on
-https://github.com/morhetz/gruvbox/blob/master/colors/gruvbox.vim
-"""
-dark0 = 235
-dark1 = 237
-dark2 = 239
-dark3 = 241
-dark4 = 243
-dark5 = 232
-
-light0 = 229
-light1 = 223
-light2 = 250
-light3 = 248
-light4 = 246
-light5 = 255
-
-
-vitko_gray = 272
-dark_gray  = 245
-light_gray = 244
-
-neutral_red    = 124
-neutral_green  = 106
-neutral_orange = 166
-neutral_yellow = 172
-neutral_blue   = 66
-neutral_purple = 132
-neutral_aqua   = 72
-
-bright_blueish = 159
-bright_red     = 167
-bright_green   = 142
-bright_yellow  = 214
-bright_blue    = 109
-bright_purple  = 175
-bright_aqua    = 108
-bright_orange  = 208
-
-faded_red    = 88
-faded_green  = 100
-faded_yellow = 136
-faded_blue   = 24
-faded_purple = 96
-faded_aqua   = 66
-faded_orange = 130
-
-class Color(DefaultColor):
-    USERNAME_ROOT_BG = faded_red
-    USERNAME_BG = dark2
-    USERNAME_FG = bright_purple
-
-    HOSTNAME_BG = dark1
-    HOSTNAME_FG = bright_purple
-
-    HOME_SPECIAL_DISPLAY = True
-    HOME_BG = neutral_blue
-    HOME_FG = light2
-    PATH_BG = dark5
-    PATH_FG = light3
-    CWD_FG = bright_blueish
-    SEPARATOR_FG = dark_gray
-
-    READONLY_BG = bright_red
-    READONLY_FG = light0
-
-    SSH_BG = faded_purple
-    SSH_FG = light0
-
-    REPO_CLEAN_BG = faded_green
-    REPO_CLEAN_FG = dark1
-    REPO_DIRTY_BG = faded_orange
-    REPO_DIRTY_FG = light0
-
-    JOBS_FG = neutral_aqua
-    JOBS_BG = dark1
-
-    CMD_PASSED_FG = light0
-    CMD_PASSED_BG = dark5
-    CMD_FAILED_FG = light3
-    CMD_FAILED_BG = neutral_red
-
-    SVN_CHANGES_FG = REPO_DIRTY_FG
-    SVN_CHANGES_BG = REPO_DIRTY_BG
-
-    GIT_AHEAD_BG = dark2
-    GIT_AHEAD_FG = light3
-    GIT_BEHIND_BG = dark2
-    GIT_BEHIND_FG = light3
-    GIT_STAGED_BG = neutral_green
-    GIT_STAGED_FG = light0
-    GIT_NOTSTAGED_BG = neutral_orange
-    GIT_NOTSTAGED_FG = light0
-    GIT_UNTRACKED_BG = faded_red
-    GIT_UNTRACKED_FG = light0
-    GIT_CONFLICTED_BG = neutral_red
-    GIT_CONFLICTED_FG = light0
-    GIT_STASH_BG = neutral_yellow
-    GIT_STASH_FG = dark0
-    GIT_URL_BG = faded_red
-    GIT_URL_FG = light0
-
-    VIRTUAL_ENV_BG = faded_green
-    VIRTUAL_ENV_FG = light0
-
-    BATTERY_NORMAL_BG = neutral_green
-    BATTERY_NORMAL_FG = dark2
-    BATTERY_WARN_FG = neutral_orange
-    BATTERY_WARN_BG = light0
-    BATTERY_LOW_BG = neutral_red
-    BATTERY_LOW_FG = light1
-
-    AWS_PROFILE_FG = neutral_aqua
-    AWS_PROFILE_BG = dark1
-
-    AWS_REGION_FG = neutral_yellow
-    AWS_REGION_BG = dark1
-
-    TIME_FG = light2
-    TIME_BG = dark4
-
-    PRIVATE_IP_FG = 148
-    PRIVATE_IP_BG = dark1
-    PRIVATE_IP_OFFLINE = neutral_red
-
-    SYMBOLS = {
-        "flames": {
-            "lock": u"\uE0A2",
-            "network": u"\uE0A1",
-            "separator": u"\uE0C0 ",
-            "separator_thin": u"\uE0b1"
-        },
-        'patched-blocks': {
-            'lock': u'\uE0A2',
-            'network': u'\uE0A2',
-            'separator': u'\uE0cd',
-            'separator_thin': u'\uE0cc'
-        }
-
-    }
diff --git a/powerline_shell/themes/washed.py b/powerline_shell/themes/washed.py
deleted file mode 100644
index d9e77ac..0000000
--- a/powerline_shell/themes/washed.py
+++ /dev/null
@@ -1,51 +0,0 @@
-from powerline_shell.themes.default import DefaultColor
-
-
-class Color(DefaultColor):
-    USERNAME_FG = 8
-    USERNAME_BG = 251
-    USERNAME_ROOT_BG = 209
-
-    HOSTNAME_FG = 8
-    HOSTNAME_BG = 7
-
-    HOME_SPECIAL_DISPLAY = False
-    PATH_BG = 15
-    PATH_FG = 8
-    CWD_FG = 8
-    SEPARATOR_FG = 251
-
-    READONLY_BG = 209
-    READONLY_FG = 15
-
-    REPO_CLEAN_BG = 150  # pale green
-    REPO_CLEAN_FG = 235
-    REPO_DIRTY_BG = 203  # pale red
-    REPO_DIRTY_FG = 15
-
-    JOBS_FG = 14
-    JOBS_BG = 8
-
-    CMD_PASSED_BG = 7
-    CMD_PASSED_FG = 8
-    CMD_FAILED_BG = 9
-    CMD_FAILED_FG = 15
-
-    SVN_CHANGES_BG = REPO_DIRTY_BG
-    SVN_CHANGES_FG = REPO_DIRTY_FG
-
-    VIRTUAL_ENV_BG = 150
-    VIRTUAL_ENV_FG = 0
-
-    AWS_PROFILE_FG = 0
-    AWS_PROFILE_BG = 7
-
-    TIME_FG = 8
-    TIME_BG = 7
-
-    ASCIINEMA_BG = 15
-    ASCIINEMA_FG = 203
-
-    PRIVATE_IP_FG = 8
-    PRIVATE_IP_BG = 15
-    PRIVATE_IP_OFFLINE = 124
diff --git a/powerline_shell/unicode.py b/powerline_shell/unicode.py
deleted file mode 100644
index 82c7bb2..0000000
--- a/powerline_shell/unicode.py
+++ /dev/null
@@ -1,283 +0,0 @@
-# vim:fileencoding=utf-8:noet
-from __future__ import (unicode_literals, division, absolute_import, print_function)
-
-import sys
-import codecs
-
-from unicodedata import east_asian_width, combining
-
-from powerline_shell.encoding import get_preferred_output_encoding
-
-
-try:
-	from __builtin__ import unicode
-except ImportError:
-	unicode = str
-
-
-try:
-	from __builtin__ import unichr
-except ImportError:
-	unichr = chr
-
-
-if sys.maxunicode < 0x10FFFF:
-	_unichr = unichr
-
-	def unichr(ch):
-		if ch <= sys.maxunicode:
-			return _unichr(ch)
-		else:
-			ch -= 0x10000
-			return _unichr((ch >> 10) + 0xD800) + _unichr((ch & ((1 << 10) - 1)) + 0xDC00)
-
-
-def u(s):
-	'''Return unicode instance assuming UTF-8 encoded string.
-	'''
-	if type(s) is unicode:
-		return s
-	else:
-		return unicode(s, 'utf-8')
-
-
-if sys.version_info < (3,):
-	def tointiter(s):
-		'''Convert a byte string to the sequence of integers
-		'''
-		return (ord(c) for c in s)
-else:
-	def tointiter(s):
-		'''Convert a byte string to the sequence of integers
-		'''
-		return iter(s)
-
-
-def powerline_decode_error(e):
-	if not isinstance(e, UnicodeDecodeError):
-		raise NotImplementedError
-	return (''.join((
-		'<{0:02X}>'.format(c)
-		for c in tointiter(e.object[e.start:e.end])
-	)), e.end)
-
-
-codecs.register_error('powerline_decode_error', powerline_decode_error)
-
-
-last_swe_idx = 0
-
-
-def register_strwidth_error(strwidth):
-	'''Create new encode errors handling method similar to ``replace``
-
-	Like ``replace`` this method uses question marks in place of the characters 
-	that cannot be represented in the requested encoding. Unlike ``replace`` the 
-	amount of question marks is identical to the amount of display cells 
-	offending character occupies. Thus encoding ``…`` (U+2026, HORIZONTAL 
-	ELLIPSIS) to ``latin1`` will emit one question mark, but encoding ``Ａ`` 
-	(U+FF21, FULLWIDTH LATIN CAPITAL LETTER A) will emit two question marks.
-
-	Since width of some characters depends on the terminal settings and 
-	powerline knows how to respect them a single error handling method cannot be 
-	used. Instead of it the generator function is used which takes ``strwidth`` 
-	function (function that knows how to compute string width respecting all 
-	needed settings) and emits new error handling method name.
-
-	:param function strwidth:
-		Function that computs string width measured in display cells the string 
-		occupies when displayed.
-
-	:return: New error handling method name.
-	'''
-	global last_swe_idx
-	last_swe_idx += 1
-
-	def powerline_encode_strwidth_error(e):
-		if not isinstance(e, UnicodeEncodeError):
-			raise NotImplementedError
-		return ('?' * strwidth(e.object[e.start:e.end]), e.end)
-
-	ename = 'powerline_encode_strwidth_error_{0}'.format(last_swe_idx)
-	codecs.register_error(ename, powerline_encode_strwidth_error)
-	return ename
-
-
-def out_u(s):
-	'''Return unicode string suitable for displaying
-
-	Unlike other functions assumes get_preferred_output_encoding() first. Unlike 
-	u() does not throw exceptions for invalid unicode strings. Unlike 
-	safe_unicode() does throw an exception if object is not a string.
-	'''
-	if isinstance(s, unicode):
-		return s
-	elif isinstance(s, bytes):
-		return unicode(s, get_preferred_output_encoding(), 'powerline_decode_error')
-	else:
-		raise TypeError('Expected unicode or bytes instance, got {0}'.format(repr(type(s))))
-
-
-def safe_unicode(s):
-	'''Return unicode instance without raising an exception.
-
-	Order of assumptions:
-	* ASCII string or unicode object
-	* UTF-8 string
-	* Object with __str__() or __repr__() method that returns UTF-8 string or 
-	  unicode object (depending on python version)
-	* String in powerline.lib.encoding.get_preferred_output_encoding() encoding
-	* If everything failed use safe_unicode on last exception with which 
-	  everything failed
-	'''
-	try:
-		try:
-			if type(s) is bytes:
-				return unicode(s, 'ascii')
-			else:
-				return unicode(s)
-		except UnicodeDecodeError:
-			try:
-				return unicode(s, 'utf-8')
-			except TypeError:
-				return unicode(str(s), 'utf-8')
-			except UnicodeDecodeError:
-				return unicode(s, get_preferred_output_encoding())
-	except Exception as e:
-		return safe_unicode(e)
-
-
-class FailedUnicode(unicode):
-	'''Builtin ``unicode`` subclass indicating fatal error
-
-	If your code for some reason wants to determine whether `.render()` method 
-	failed it should check returned string for being a FailedUnicode instance. 
-	Alternatively you could subclass Powerline and override `.render()` method 
-	to do what you like in place of catching the exception and returning 
-	FailedUnicode.
-	'''
-	pass
-
-
-if sys.version_info < (3,):
-	def string(s):
-		if type(s) is not str:
-			return s.encode('utf-8')
-		else:
-			return s
-else:
-	def string(s):
-		if type(s) is not str:
-			return s.decode('utf-8')
-		else:
-			return s
-
-
-string.__doc__ = (
-	'''Transform ``unicode`` or ``bytes`` object into ``str`` object
-
-	On Python-2 this encodes ``unicode`` to ``bytes`` (which is ``str``) using 
-	UTF-8 encoding; on Python-3 this decodes ``bytes`` to ``unicode`` (which is 
-	``str``) using UTF-8 encoding.
-
-	Useful for functions that expect an ``str`` object in both unicode versions, 
-	not caring about the semantic differences between them in Python-2 and 
-	Python-3.
-	'''
-)
-
-
-def surrogate_pair_to_character(high, low):
-	'''Transform a pair of surrogate codepoints to one codepoint
-	'''
-	return 0x10000 + ((high - 0xD800) << 10) + (low - 0xDC00)
-
-
-_strwidth_documentation = (
-	'''Compute string width in display cells
-
-	{0}
-
-	:param dict width_data:
-		Dictionary which maps east_asian_width property values to strings 
-		lengths. It is expected to contain the following keys and values (from 
-		`East Asian Width annex <http://www.unicode.org/reports/tr11/>`_):
-
-		===  ======  ===========================================================
-		Key  Value   Description
-		===  ======  ===========================================================
-		F    2       Fullwidth: all characters that are defined as Fullwidth in 
-		             the Unicode Standard [Unicode] by having a compatibility 
-		             decomposition of type <wide> to characters elsewhere in the 
-		             Unicode Standard that are implicitly narrow but unmarked.
-		H    1       Halfwidth: all characters that are explicitly defined as 
-		             Halfwidth in the Unicode Standard by having a compatibility 
-		             decomposition of type <narrow> to characters elsewhere in 
-		             the Unicode Standard that are implicitly wide but unmarked, 
-		             plus U+20A9 ₩ WON SIGN.
-		W    2       Wide: all other characters that are always wide. These 
-		             characters occur only in the context of East Asian 
-		             typography where they are wide characters (such as the 
-		             Unified Han Ideographs or Squared Katakana Symbols). This 
-		             category includes characters that have explicit halfwidth 
-		             counterparts.
-		Na   1       Narrow: characters that are always narrow and have explicit 
-		             fullwidth or wide counterparts. These characters are 
-		             implicitly narrow in East Asian typography and legacy 
-		             character sets because they have explicit fullwidth or wide 
-		             counterparts. All of ASCII is an example of East Asian 
-		             Narrow characters.
-		A    1 or 2  Ambigious: characters that may sometimes be wide and 
-		             sometimes narrow. Ambiguous characters require additional 
-		             information not contained in the character code to further 
-		             resolve their width. This information is usually defined in 
-		             terminal setting that should in turn respect glyphs widths 
-		             in used fonts. Also see :ref:`ambiwidth configuration 
-		             option <config-common-ambiwidth>`.
-		N    1       Neutral characters: character that does not occur in legacy 
-		             East Asian character sets.
-		===  ======  ===========================================================
-
-	:param unicode string:
-		String whose width will be calculated.
-
-	:return: unsigned integer.''')
-
-
-def strwidth_ucs_4(width_data, string):
-	return sum(((
-		(
-			0
-		) if combining(symbol) else (
-			width_data[east_asian_width(symbol)]
-		)
-	) for symbol in string))
-
-
-strwidth_ucs_4.__doc__ = _strwidth_documentation.format(
-	'''This version of function expects that characters above 0xFFFF are 
-	represented using one symbol. This is only the case in UCS-4 Python builds.
-
-	.. note:
-		Even in UCS-4 Python builds it is possible to represent characters above 
-		0xFFFF using surrogate pairs. Characters represented this way are not 
-		supported.''')
-
-
-def strwidth_ucs_2(width_data, string):
-	return sum(((
-		(
-			width_data[east_asian_width(string[i - 1] + symbol)]
-		) if 0xDC00 <= ord(symbol) <= 0xDFFF else (
-			0
-		) if combining(symbol) or 0xD800 <= ord(symbol) <= 0xDBFF else (
-			width_data[east_asian_width(symbol)]
-		)
-	) for i, symbol in enumerate(string)))
-
-
-strwidth_ucs_2.__doc__ = _strwidth_documentation.format(
-	'''This version of function expects that characters above 0xFFFF are 
-	represented using two symbols forming a surrogate pair, which is the only 
-	option in UCS-2 Python builds. It still works correctly in UCS-4 Python 
-	builds, but is slower then its UCS-4 counterpart.''')
diff --git a/powerline_shell/utils.py b/powerline_shell/utils.py
deleted file mode 100644
index 30b5526..0000000
--- a/powerline_shell/utils.py
+++ /dev/null
@@ -1,306 +0,0 @@
-# -*- coding: utf-8 -*-
-
-import sys
-import os
-import logging
-from threading import Thread
-from powerline_shell.encoding import get_preferred_output_encoding, get_preferred_input_encoding
-
-py3 = sys.version_info[0] == 3
-
-if py3:
-    def unicode_(x):
-        return str(x)
-
-
-    def decode(x):
-        return x.decode(get_preferred_output_encoding())
-else:
-    unicode_ = unicode
-    decode = unicode
-
-
-class RepoStats(object):
-    symbols = {
-        'detached': u'\u2693',
-        'ahead': u'\u2B06',
-        'behind': u'\u2B07',
-        'staged': u'\u2714',
-        'changed': u'\u270E',
-        'new': u'\uf067',
-        'conflicted': u'\u273C',
-        'stash': u'\u2398',
-        'git': u'\ue0a0',
-        'git-name': u'\ue717',
-        'hg': u'\u263F',
-        'bzr': u'\u2B61\u20DF',
-        'fossil': u'\u2332',
-        'svn': u'\u2446',
-        'url': u'\uf116',
-    }
-
-    def __init__(self, ahead=0, behind=0, new=0, changed=0, staged=0, conflicted=0):
-        self.ahead = ahead
-        self.behind = behind
-        self.new = new
-        self.changed = changed
-        self.staged = staged
-        self.conflicted = conflicted
-        # print(self.symbols)
-
-    def __eq__(self, other):
-        return (
-                self.ahead == other.ahead and
-                self.behind == other.behind and
-                self.new == other.new and
-                self.changed == other.changed and
-                self.staged == other.staged and
-                self.conflicted == other.conflicted
-        )
-
-    @property
-    def dirty(self):
-        qualifiers = [
-            self.new,
-            self.changed,
-            self.staged,
-            self.conflicted,
-        ]
-        return sum(qualifiers) > 0
-
-    def __getitem__(self, _key):
-        return getattr(self, _key)
-
-    def n_or_empty(self, _key):
-        """Given a string name of one of the properties of this class, returns
-        the value of the property as a string when the value is greater than
-        1. When it is not greater than one, returns an empty string.
-
-        As an example, if you want to show an icon for new files, but you only
-        want a number to appear next to the icon when there are more than one
-        new file, you can do:
-
-            segment = repo_stats.n_or_empty("new") + icon_string
-        """
-        return unicode_(self[_key]) if int(self[_key]) > 1 else u''
-
-    def add_to_powerline(self, powerline):
-        def add(_key, fg, bg):
-            if self[_key]:
-                s = u" {}{} ".format(self.n_or_empty(_key), self.symbols[_key])
-                powerline.append(s, fg, bg)
-
-        color = powerline.theme
-        add('ahead', color.GIT_AHEAD_FG, color.GIT_AHEAD_BG)
-        add('behind', color.GIT_BEHIND_FG, color.GIT_BEHIND_BG)
-        add('staged', color.GIT_STAGED_FG, color.GIT_STAGED_BG)
-        add('changed', color.GIT_NOTSTAGED_FG, color.GIT_NOTSTAGED_BG)
-        add('new', color.GIT_UNTRACKED_FG, color.GIT_UNTRACKED_BG)
-        add('conflicted', color.GIT_CONFLICTED_FG, color.GIT_CONFLICTED_BG)
-
-
-def set_logger(loglevel, logname):
-    log_format = '%(asctime)s:%(levelname)s:%(message)s'
-    formatter = logging.Formatter(log_format)
-    console = logging.StreamHandler()
-    console.setLevel(logging.INFO)
-
-    if loglevel.lower() == "warning":
-        level = logging.WARNING
-    if loglevel.lower() == "critical":
-        level = logging.CRITICAL
-    if loglevel.lower() == "exception":
-        level = logging.EXCEPTION
-    if loglevel.lower() == "info":
-        level = logging.INFO
-    if loglevel.lower() == "debug":
-        level = logging.DEBUG
-    if loglevel.lower() == "error":
-        level = logging.ERROR
-    stdout = logging.StreamHandler(sys.stdout)
-    stdout.setLevel(level)
-    stdout.setFormatter(formatter)
-
-    logger = logging.Logger(logname)
-    logger.setLevel(level)
-    logger.addHandler(console)
-    eventlog = EventLogger(logger, logname)
-    return eventlog
-
-
-def critical(msg):
-    eventlog = set_logger("critical", 'powerline-shell')
-    eventlog.critical('[powerline-shell] {0}', msg)
-
-
-def exception(msg):
-    eventlog = set_logger("exception", 'powerline-shell')
-    eventlog.exception('[powerline-shell] {0}', msg)
-
-
-def error(msg):
-    eventlog = set_logger("error", 'powerline-shell')
-    eventlog.error('[powerline-shell] {0}', msg)
-
-
-def debug(msg):
-    eventlog = set_logger("debug", 'powerline-shell')
-    eventlog.debug('[powerline-shell] {0}', msg)
-
-
-def info(msg):
-    eventlog = set_logger("info", 'powerline-shell')
-    eventlog.info('[powerline-shell] {0}', msg)
-
-
-def warn(msg):
-    eventlog = set_logger("warning", 'powerline-shell')
-    eventlog.warn('[powerline-shell] {0}', msg)
-
-
-class EventLogger(object):
-    '''Proxy class for logging.Logger instance
-
-    It emits messages in format ``{ext}:{prefix}:{message}`` where
-
-    ``{ext}``
-            is an EventLogger extension (e.g. “vim”, “shell”, “python”).
-    ``{prefix}``
-            is a local prefix, usually a segment name.
-    ``{message}``
-            is the original message passed to one of the logging methods.
-
-    Each of the methods (``critical``, ``exception``, ``info``, ``error``,
-    ``warn``, ``debug``) expects to receive message in an ``str.format`` format,
-    not in printf-like format.
-
-    Log is saved to the location :ref:`specified by user <config-common-log>`.
-    '''
-
-    def __init__(self, logger, ext):
-        self.logger = logger
-        self.ext = ext
-        self.prefix = ''
-        self.last_msgs = {}
-
-    def _log(self, attr, msg, *args, **kwargs):
-        from powerline_shell.unicode import safe_unicode
-        prefix = kwargs.get('prefix') or self.prefix
-        prefix = self.ext + ((':' + prefix) if prefix else '')
-        msg = safe_unicode(msg)
-        if args or kwargs:
-            args = [safe_unicode(s) if isinstance(s, bytes) else s for s in args]
-            kwargs = dict((
-                (k, safe_unicode(v) if isinstance(v, bytes) else v)
-                for k, v in kwargs.items()
-            ))
-            msg = msg.format(*args, **kwargs)
-        msg = prefix + ':' + msg
-        key = attr + ':' + prefix
-        if msg != self.last_msgs.get(key):
-            getattr(self.logger, attr)(msg)
-            self.last_msgs[key] = msg
-
-    def critical(self, msg, *args, **kwargs):
-        self._log('critical', msg, *args, **kwargs)
-
-    def exception(self, msg, *args, **kwargs):
-        self._log('exception', msg, *args, **kwargs)
-
-    def info(self, msg, *args, **kwargs):
-        self._log('info', msg, *args, **kwargs)
-
-    def error(self, msg, *args, **kwargs):
-        self._log('error', msg, *args, **kwargs)
-
-    def warn(self, msg, *args, **kwargs):
-        self._log('warning', msg, *args, **kwargs)
-
-    def debug(self, msg, *args, **kwargs):
-        self._log('debug', msg, *args, **kwargs)
-
-
-class BasicSegment(object):
-    def __init__(self, powerline, segment_def):
-        from powerline_shell import symbols
-        self.powerline = powerline
-        self.segment_def = segment_def  # type: dict
-        self.symbols = powerline.symbols
-
-    def start(self):
-        pass
-
-    def error(self, msg):
-        eventlog = set_logger("error", self.segment_def["type"])
-        eventlog.error('[{0}] {1}', self.segment_def["type"], msg)
-
-    def debug(self, msg):
-        eventlog = set_logger("debug", self.segment_def["type"])
-        eventlog.debug('[{0}] {1}', self.segment_def["type"], msg)
-
-    def info(self, msg):
-        eventlog = set_logger("info", self.segment_def["type"])
-        eventlog.info('[{0}] {1}', self.segment_def["type"], msg)
-
-    def warn(self, msg):
-        eventlog = set_logger("warning", self.segment_def["type"])
-        eventlog.warn('[{0}] {1}', self.segment_def["type"], msg)
-
-    def add_spaces_left(self, amount):
-	    return (' ' * amount)
-
-
-class BatteryStats(object):
-    def __init__(self, Threshold):
-        from powerline_shell import symbols
-        self.threshold = Threshold
-
-
-class ThreadedSegment(Thread, BasicSegment):
-    def __init__(self, powerline, segment_def):
-        from powerline_shell import symbols
-        super(ThreadedSegment, self).__init__()
-        self.powerline = powerline
-        self.segment_def = segment_def  # type: dict
-
-
-def import_file(module_name, path):
-    # An implementation of https://stackoverflow.com/a/67692/683436
-    if py3 and sys.version_info[1] >= 5:
-        import importlib.util
-        spec = importlib.util.spec_from_file_location(module_name, path)
-        if not spec:
-            raise ImportError()
-        mod = importlib.util.module_from_spec(spec)
-        spec.loader.exec_module(mod)
-        return mod
-    elif py3:
-        from importlib.machinery import SourceFileLoader
-        return SourceFileLoader(module_name, path).load_module()
-    else:
-        import imp
-        return imp.load_source(module_name, path)
-
-
-def get_PATH():
-    """Normally gets the PATH from the OS. This function exists to enable
-    easily mocking the PATH in tests.
-    """
-    return os.getenv("PATH")
-
-
-def get_subprocess_env(**envs):
-    defaults = {
-        # https://github.com/milkbikis/powerline-shell/pull/153
-        "PATH": get_PATH(),
-    }
-    defaults.update(envs)
-    env = dict(os.environ)
-    env.update(defaults)
-    return env
-
-
-def get_git_subprocess_env():
-    # LANG is specified to ensure git always uses a language we are expecting.
-    # Otherwise we may be unable to parse the output.
-    return get_subprocess_env(LANG="C")
